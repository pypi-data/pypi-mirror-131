{"version":3,"file":"chunks/app_views_alerts_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"sVAUA,SAASA,GAAgB,aAACC,EAAD,SAAeC,IACtC,MAAMC,EAAkBF,EAAaG,SAASC,SAAS,aAEjDC,EACJJ,IAAYK,EAAAA,EAAAA,gBAAeL,IACvBM,EAAAA,EAAAA,cAAaN,EAAU,CACrBD,aAAAA,EACAE,gBAAAA,IAEFD,EAEN,OAAO,QAAC,EAAAO,SAAD,UAAWH,IAXXN,EAAAA,YAAAA,kBAcT,SAAeU,EAAAA,EAAAA,GAAiBV","sources":["webpack:///./app/views/alerts/index.tsx"],"sourcesContent":["import {cloneElement, Fragment, isValidElement} from 'react';\n\nimport {Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nfunction AlertsContainer({organization, children}: Props) {\n  const hasMetricAlerts = organization.features.includes('incidents');\n\n  const content =\n    children && isValidElement(children)\n      ? cloneElement(children, {\n          organization,\n          hasMetricAlerts,\n        })\n      : children;\n\n  return <Fragment>{content}</Fragment>;\n}\n\nexport default withOrganization(AlertsContainer);\n"],"names":["AlertsContainer","organization","children","hasMetricAlerts","features","includes","content","isValidElement","cloneElement","Fragment","withOrganization"],"sourceRoot":""}