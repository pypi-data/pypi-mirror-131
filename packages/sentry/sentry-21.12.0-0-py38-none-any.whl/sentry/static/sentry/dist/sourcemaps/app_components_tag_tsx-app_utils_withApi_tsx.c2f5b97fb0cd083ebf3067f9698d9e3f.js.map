{"version":3,"file":"chunks/app_components_tag_tsx-app_utils_withApi_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"+qBAaA,MAAMA,EAAa,OAuCnB,SAASC,GAAI,KACXC,EAAO,UADI,KAEXC,EAFW,YAGXC,EAHW,GAIXC,EAJW,QAKXC,EALW,KAMXC,EANW,UAOXC,EAPW,SAQXC,EARW,aASXC,EAAe,OACZC,IAEH,MAAMC,EAAa,CACjBC,KAAM,OACNC,MAAOC,EAAAA,GAAAA,IAAUb,GAAMc,WAGnBC,GACJ,QAAC,IAAD,CAASC,MAAOd,EAAae,qBAAqB,cAAlD,UACE,QAACC,EAAD,CAAYlB,KAAMA,EAAlB,UA2BEmB,EAAAA,eAAqBlB,IAChB,QAACmB,EAAD,UAAcD,EAAAA,aAAmBlB,EAAM,IAAIS,QAG/CW,EAAAA,EAAAA,IAAQhB,KAASgB,EAAAA,EAAAA,IAAQlB,UAAiBmB,IAATrB,GAElC,QAACmB,EAAD,WACE,QAAC,KAAD,IAAcV,MAKb,MApCH,QAACa,EAAD,CAAMvB,KAAMA,EAAMwB,SAAUhB,EAA5B,SACGD,KAGFc,EAAAA,EAAAA,IAAQf,KACP,QAACmB,EAAD,CACErB,QAYV,SAAuBsB,GACrBA,EAAMC,iBACNrB,MAAAA,GAAAA,KAbQK,KAAK,OACLiB,SAAS,OACTC,OAAOC,EAAAA,EAAAA,GAAE,WAJX,UAME,QAAC,KAAD,CAAWC,WAAS,KAAKrB,WA+CnC,OAAO,QAACsB,EAAD,IAAgBvB,EAAhB,UAlBDY,EAAAA,EAAAA,IAAQhB,IACH,QAAC,IAAD,CAAcA,KAAMA,EAApB,SAA2BU,KAGhCM,EAAAA,EAAAA,IAAQlB,KAAOkB,EAAAA,EAAAA,IAAQjB,IAEvB,QAAC,IAAD,CAAMD,GAAIA,EAAIC,QAASA,EAAvB,SACGW,KAIHM,EAAAA,EAAAA,IAAQlB,IACH,QAAC,IAAD,CAAMA,GAAIA,EAAV,SAAeY,IAGjBA,IA7EFhB,EAAAA,YAAAA,MAmFT,MAAMiC,GAAa,OAAO,OAAP,qBAAH,cACDC,GAAKA,EAAEpB,MAAMqB,eADZ,KAIHhB,GAAa,OAAO,MAAP,qBAAH,iDAGXpB,EAHW,kBAIJA,EAJI,sBAKDmC,GAAKA,EAAEpB,MAAME,IAAIkB,EAAEjC,MAAMmC,YALxB,eAMRC,EAAAA,EAAAA,GAAM,GANE,KASjBhB,GAAc,OAAO,OAAP,qBAAH,iBACCgB,EAAAA,EAAAA,GAAM,IADP,yBAKXb,GAAO,OAAO,OAAP,qBAAH,UACCU,GAAM,CAAC,QAAS,SAASI,SAASJ,EAAEjC,MAAQiC,EAAEpB,MAAMyB,MAAQL,EAAEpB,MAAM0B,SADrE,eAEKN,GAAKA,EAAET,UAFZ,4EAMO1B,EANP,KASJ2B,GAAgB,OAAOe,EAAAA,GAAP,qBAAH,gBACFJ,EAAAA,EAAAA,GAAM,IADJ,iBAKnB,K,mHCxHA,QApBA,UAAgB,gBAACK,EAAiBC,IAAKC,GAAwB,IAC7D,MAAMC,GAAWC,EAAAA,EAAAA,eAGQvB,IAArBsB,EAASE,cAAyCxB,IAAhBqB,IACpCC,EAASE,QAAU,IAAIC,EAAAA,IAIzB,MAAML,EAAMC,MAAAA,EAAAA,EAAeC,EAASE,QAEpC,SAASE,KACNP,GAAmBC,EAAIO,QAK1B,OAFAC,EAAAA,EAAAA,YAAU,IAAMF,GAAe,IAExBN,I,6NCzBT,MAeA,EAfgB,CACdS,EACAC,EAAwC,MAExC,MAAMC,EAAqC,EAAEX,IAAKY,KAAa7C,MAC7D,MAAMiC,GAAMa,EAAAA,EAAAA,GAAO,CAACb,IAAKY,KAAaF,IAEtC,OAAO,QAACD,EAAD,IAAuB1C,EAAaiC,IAAKA,KAKlD,OAFAW,EAAQG,YAAR,mBAAiCC,EAAAA,EAAAA,GAAeN,GAAhD,KAEOE","sources":["webpack:///./app/components/tag.tsx","webpack:///./app/utils/useApi.tsx","webpack:///./app/utils/withApi.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconClose, IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport theme, {Color, Theme} from 'sentry/utils/theme';\n\nconst TAG_HEIGHT = '20px';\n\ntype Props = React.HTMLAttributes<HTMLSpanElement> & {\n  /**\n   * Dictates color scheme of the tag.\n   */\n  type?: keyof Theme['tag'];\n  /**\n   * Icon on the left side.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Text to show up on a hover.\n   */\n  tooltipText?: React.ComponentProps<typeof Tooltip>['title'];\n  /**\n   * Makes the tag clickable. Use for internal links handled by react router.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  to?: React.ComponentProps<typeof Link>['to'];\n  /**\n   * Triggered when the item is clicked\n   */\n  onClick?: (eventKey: any) => void;\n  /**\n   * Makes the tag clickable. Use for external links.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  href?: string;\n  /**\n   * Shows clickable IconClose on the right side.\n   */\n  onDismiss?: () => void;\n  /**\n   * Max width of the tag's text\n   */\n  textMaxWidth?: number;\n};\n\nfunction Tag({\n  type = 'default',\n  icon,\n  tooltipText,\n  to,\n  onClick,\n  href,\n  onDismiss,\n  children,\n  textMaxWidth = 150,\n  ...props\n}: Props) {\n  const iconsProps = {\n    size: '11px',\n    color: theme.tag[type].iconColor as Color,\n  };\n\n  const tag = (\n    <Tooltip title={tooltipText} containerDisplayMode=\"inline-flex\">\n      <Background type={type}>\n        {tagIcon()}\n\n        <Text type={type} maxWidth={textMaxWidth}>\n          {children}\n        </Text>\n\n        {defined(onDismiss) && (\n          <DismissButton\n            onClick={handleDismiss}\n            size=\"zero\"\n            priority=\"link\"\n            label={t('Dismiss')}\n          >\n            <IconClose isCircled {...iconsProps} />\n          </DismissButton>\n        )}\n      </Background>\n    </Tooltip>\n  );\n\n  function handleDismiss(event: React.MouseEvent) {\n    event.preventDefault();\n    onDismiss?.();\n  }\n\n  function tagIcon() {\n    if (React.isValidElement(icon)) {\n      return <IconWrapper>{React.cloneElement(icon, {...iconsProps})}</IconWrapper>;\n    }\n\n    if ((defined(href) || defined(to)) && icon === undefined) {\n      return (\n        <IconWrapper>\n          <IconOpen {...iconsProps} />\n        </IconWrapper>\n      );\n    }\n\n    return null;\n  }\n\n  function tagWithParent() {\n    if (defined(href)) {\n      return <ExternalLink href={href}>{tag}</ExternalLink>;\n    }\n\n    if (defined(to) && defined(onClick)) {\n      return (\n        <Link to={to} onClick={onClick}>\n          {tag}\n        </Link>\n      );\n    }\n    if (defined(to)) {\n      return <Link to={to}>{tag}</Link>;\n    }\n\n    return tag;\n  }\n\n  return <TagWrapper {...props}>{tagWithParent()}</TagWrapper>;\n}\n\nconst TagWrapper = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport const Background = styled('div')<{type: keyof Theme['tag']}>`\n  display: inline-flex;\n  align-items: center;\n  height: ${TAG_HEIGHT};\n  border-radius: ${TAG_HEIGHT};\n  background-color: ${p => p.theme.tag[p.type].background};\n  padding: 0 ${space(1)};\n`;\n\nconst IconWrapper = styled('span')`\n  margin-right: ${space(0.5)};\n  display: inline-flex;\n`;\n\nconst Text = styled('span')<{maxWidth: number; type: keyof Theme['tag']}>`\n  color: ${p => (['black', 'focus'].includes(p.type) ? p.theme.white : p.theme.gray500)};\n  max-width: ${p => p.maxWidth}px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  line-height: ${TAG_HEIGHT};\n`;\n\nconst DismissButton = styled(Button)`\n  margin-left: ${space(0.5)};\n  border: none;\n`;\n\nexport default Tag;\n","import {useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  function handleCleanup() {\n    !persistInFlight && api.clear();\n  }\n\n  useEffect(() => handleCleanup, []);\n\n  return api;\n}\n\nexport default useApi;\n","import {Client} from 'sentry/api';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useApi from 'sentry/utils/useApi';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\n/**\n * XXX: Prefer useApi if you are wrapping a Function Component!\n *\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n *\n * If an `api` prop is provided when the component is invoked it will be passed\n * through.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: Parameters<typeof useApi>[0] = {}\n) => {\n  const WithApi: React.FC<WrappedProps<P>> = ({api: propsApi, ...props}) => {\n    const api = useApi({api: propsApi, ...options});\n\n    return <WrappedComponent {...(props as P)} api={api} />;\n  };\n\n  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi;\n};\n\nexport default withApi;\n"],"names":["TAG_HEIGHT","Tag","type","icon","tooltipText","to","onClick","href","onDismiss","children","textMaxWidth","props","iconsProps","size","color","theme","iconColor","tag","title","containerDisplayMode","Background","React","IconWrapper","defined","undefined","Text","maxWidth","DismissButton","event","preventDefault","priority","label","t","isCircled","TagWrapper","p","fontSizeSmall","background","space","includes","white","gray500","Button","persistInFlight","api","providedApi","localApi","useRef","current","Client","handleCleanup","clear","useEffect","WrappedComponent","options","WithApi","propsApi","useApi","displayName","getDisplayName"],"sourceRoot":""}