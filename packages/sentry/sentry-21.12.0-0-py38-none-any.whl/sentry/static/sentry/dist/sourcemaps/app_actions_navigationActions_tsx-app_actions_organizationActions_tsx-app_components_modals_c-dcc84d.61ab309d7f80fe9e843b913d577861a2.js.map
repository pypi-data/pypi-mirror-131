{"version":3,"file":"chunks/app_actions_navigationActions_tsx-app_actions_organizationActions_tsx-app_components_modals_c-dcc84d.xxxxxxxxxxxxxxxxxxxx.js","mappings":"uRAEA,Q,MAAeA,GAAAA,cAAqB,CAAC,kB,kHCArC,Q,MAAeA,GAAAA,cAAqB,CAAC,QAAS,gBAAiB,Y,0uBCS/D,SAASC,GAAe,KAACC,IACvB,MAAMC,GAAQC,EAAAA,EAAAA,KAId,OAFAC,EAAAA,EAAAA,YAAU,MAAWC,EAAAA,EAAAA,IAAU,kBAAmB,MAAK,KAGrD,QAACJ,EAAD,WACE,QAAC,KAAD,UACG,EAAEK,IAAKC,MACN,QAAC,IAAD,CACEC,WAAW,kBACXC,UAAW,EACXC,WAAY,GACZC,cAAeJ,EAAF,qTAOeL,EAAMU,QAElCC,YAAa,EAAEC,cAAAA,MACb,QAACC,EAAD,WACE,QAACC,EAAD,CACEC,WAAS,KACLH,EAAc,CAChBI,KAAM,OACNC,aAAaC,EAAAA,EAAAA,GAAE,4DA5B1BpB,EAAAA,YAAAA,iBAwCT,UAEaqB,EAAW,CAAH,uDAMfN,GAAe,OAAO,MAAP,sBAAH,YACLO,EAAAA,EAAAA,GAAM,KADD,KAIZN,GAAc,OAAOO,EAAAA,EAAP,sBAAH,uBAEJD,EAAAA,EAAAA,GAAM,GAFF,iI,yFC5DV,MAAME,EAAQ,4BAqBrB,EAnBqC,CACnC,CAEEC,MAAO,uBACPC,OAAQ,CACN,CACEC,KAAM,QACNT,KAAM,SAGNU,MAAO,mBACPT,YAAa,6BACbU,KAAM,kDACNC,kBAAkB,O,8LCC1B,MAAMC,EAAoE,CACxEC,YAAa,C,4CAACC,GAEdC,MAAO,GACPC,QAAQ,EAGRC,kBACE,OAAOC,KAAKH,OAGdI,OACED,KAAKH,MAAQ,GACbG,KAAKF,QAAS,GAGhBI,SAASC,GACPH,KAAKI,IAAID,IAGXE,aAAaC,EAAoBC,GAC3BD,EAAKE,OAASD,EAAKC,OAIvBR,KAAKS,OAAOH,EAAKE,MACjBR,KAAKI,IAAIG,KAGXG,gBAAgBF,GACdR,KAAKS,OAAOD,IAGdG,IAAIH,GACF,OAAOR,KAAKH,MAAMe,MAAMC,GAAuBA,EAAKL,OAASA,KAG/DM,SACE,OAAOd,KAAKH,OAGdY,OAAOD,GACLR,KAAKH,MAAQG,KAAKH,MAAMkB,QAAOF,GAAQL,IAASK,EAAKL,OACrDR,KAAKgB,QAAQhB,KAAKH,QAGpBO,IAAIS,GACF,IAAII,GAAQ,EACZjB,KAAKH,MAAMqB,SAAQ,CAACC,EAAUC,KACxBD,EAASE,KAAOR,EAAKQ,KACvBR,EAAO,IAAIM,KAAaN,GACxBb,KAAKH,MAAMuB,GAAOP,EAClBI,GAAQ,MAGPA,IACHjB,KAAKH,MAAQ,IAAIG,KAAKH,MAAOgB,IAE/Bb,KAAKgB,QAAQhB,KAAKH,QAGpByB,KAAKC,GACHvB,KAAKH,MAAQ0B,EACbvB,KAAKF,QAAS,EACdE,KAAKgB,QAAQO,KAOjB,EAH2B7D,IAAAA,YAAmBgC,I,mHCxC9C,QApBA,UAAgB,gBAAC8B,EAAiBC,IAAKC,GAAwB,IAC7D,MAAMC,GAAWC,EAAAA,EAAAA,eAGQC,IAArBF,EAASG,cAAyCD,IAAhBH,IACpCC,EAASG,QAAU,IAAIC,EAAAA,IAIzB,MAAMN,EAAMC,MAAAA,EAAAA,EAAeC,EAASG,QAEpC,SAASE,KACNR,GAAmBC,EAAIQ,QAK1B,OAFAlE,EAAAA,EAAAA,YAAU,IAAMiE,GAAe,IAExBP,I,6NCzBT,MAeA,EAfgB,CACdS,EACAC,EAAwC,MAExC,MAAMC,EAAqC,EAAEX,IAAKY,KAAaC,MAC7D,MAAMb,GAAMc,EAAAA,EAAAA,GAAO,CAACd,IAAKY,KAAaF,IAEtC,OAAO,QAACD,EAAD,IAAuBI,EAAab,IAAKA,KAKlD,OAFAW,EAAQI,YAAR,mBAAiCC,EAAAA,EAAAA,GAAeP,GAAhD,KAEOE","sources":["webpack:///./app/actions/navigationActions.tsx","webpack:///./app/actions/organizationActions.tsx","webpack:///./app/components/modals/commandPalette.tsx","webpack:///./app/data/forms/accountEmails.tsx","webpack:///./app/stores/organizationsStore.tsx","webpack:///./app/utils/useApi.tsx","webpack:///./app/utils/withApi.tsx"],"sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions(['setLastRoute']);\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions(['reset', 'fetchOrgError', 'update']);\n","import {useEffect} from 'react';\nimport {ClassNames, css, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Search from 'sentry/components/search';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {analytics} from 'sentry/utils/analytics';\nimport Input from 'sentry/views/settings/components/forms/controls/input';\n\nfunction CommandPalette({Body}: ModalRenderProps) {\n  const theme = useTheme();\n\n  useEffect(() => void analytics('omnisearch.open', {}), []);\n\n  return (\n    <Body>\n      <ClassNames>\n        {({css: injectedCss}) => (\n          <Search\n            entryPoint=\"command_palette\"\n            minSearch={1}\n            maxResults={10}\n            dropdownStyle={injectedCss`\n                width: 100%;\n                border: transparent;\n                border-top-left-radius: 0;\n                border-top-right-radius: 0;\n                position: initial;\n                box-shadow: none;\n                border-top: 1px solid ${theme.border};\n              `}\n            renderInput={({getInputProps}) => (\n              <InputWrapper>\n                <StyledInput\n                  autoFocus\n                  {...getInputProps({\n                    type: 'text',\n                    placeholder: t('Search for projects, teams, settings, etc...'),\n                  })}\n                />\n              </InputWrapper>\n            )}\n          />\n        )}\n      </ClassNames>\n    </Body>\n  );\n}\n\nexport default CommandPalette;\n\nexport const modalCss = css`\n  [role='document'] {\n    padding: 0;\n  }\n`;\n\nconst InputWrapper = styled('div')`\n  padding: ${space(0.25)};\n`;\n\nconst StyledInput = styled(Input)`\n  width: 100%;\n  padding: ${space(1)};\n  border-radius: 8px;\n\n  outline: none;\n  border: none;\n  box-shadow: none;\n\n  :focus,\n  :active,\n  :hover {\n    outline: none;\n    border: none;\n    box-shadow: none;\n  }\n`;\n","import {JsonFormObject} from 'sentry/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Add Secondary Emails',\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Additional Email',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Designate an alternative email for this account',\n        showReturnButton: true,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import Reflux from 'reflux';\n\nimport OrganizationsActions from 'sentry/actions/organizationsActions';\nimport {Organization} from 'sentry/types';\n\ntype OrganizationsStoreInterface = {\n  state: Organization[];\n  loaded: boolean;\n\n  onUpdate(org: Organization): void;\n  onChangeSlug(prev: Organization, next: Organization): void;\n  onRemoveSuccess(slug: string): void;\n  get(slug: string): Organization | undefined;\n  getAll(): Organization[];\n  remove(slug: string): void;\n  add(item: Organization): void;\n  load(items: Organization[]): void;\n};\n\nconst storeConfig: Reflux.StoreDefinition & OrganizationsStoreInterface = {\n  listenables: [OrganizationsActions],\n\n  state: [],\n  loaded: false,\n\n  // So we can use Reflux.connect in a component mixin\n  getInitialState() {\n    return this.state;\n  },\n\n  init() {\n    this.state = [];\n    this.loaded = false;\n  },\n\n  onUpdate(org: Organization) {\n    this.add(org);\n  },\n\n  onChangeSlug(prev: Organization, next: Organization) {\n    if (prev.slug === next.slug) {\n      return;\n    }\n\n    this.remove(prev.slug);\n    this.add(next);\n  },\n\n  onRemoveSuccess(slug: string) {\n    this.remove(slug);\n  },\n\n  get(slug: Organization['slug']) {\n    return this.state.find((item: Organization) => item.slug === slug);\n  },\n\n  getAll() {\n    return this.state;\n  },\n\n  remove(slug: Organization['slug']) {\n    this.state = this.state.filter(item => slug !== item.slug);\n    this.trigger(this.state);\n  },\n\n  add(item: Organization) {\n    let match = false;\n    this.state.forEach((existing, idx) => {\n      if (existing.id === item.id) {\n        item = {...existing, ...item};\n        this.state[idx] = item;\n        match = true;\n      }\n    });\n    if (!match) {\n      this.state = [...this.state, item];\n    }\n    this.trigger(this.state);\n  },\n\n  load(items: Organization[]) {\n    this.state = items;\n    this.loaded = true;\n    this.trigger(items);\n  },\n};\n\nconst OrganizationsStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  OrganizationsStoreInterface;\n\nexport default OrganizationsStore;\n","import {useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  function handleCleanup() {\n    !persistInFlight && api.clear();\n  }\n\n  useEffect(() => handleCleanup, []);\n\n  return api;\n}\n\nexport default useApi;\n","import {Client} from 'sentry/api';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useApi from 'sentry/utils/useApi';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\n/**\n * XXX: Prefer useApi if you are wrapping a Function Component!\n *\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n *\n * If an `api` prop is provided when the component is invoked it will be passed\n * through.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: Parameters<typeof useApi>[0] = {}\n) => {\n  const WithApi: React.FC<WrappedProps<P>> = ({api: propsApi, ...props}) => {\n    const api = useApi({api: propsApi, ...options});\n\n    return <WrappedComponent {...(props as P)} api={api} />;\n  };\n\n  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi;\n};\n\nexport default withApi;\n"],"names":["Reflux","CommandPalette","Body","theme","useTheme","useEffect","analytics","css","injectedCss","entryPoint","minSearch","maxResults","dropdownStyle","border","renderInput","getInputProps","InputWrapper","StyledInput","autoFocus","type","placeholder","t","modalCss","space","Input","route","title","fields","name","label","help","showReturnButton","storeConfig","listenables","OrganizationsActions","state","loaded","getInitialState","this","init","onUpdate","org","add","onChangeSlug","prev","next","slug","remove","onRemoveSuccess","get","find","item","getAll","filter","trigger","match","forEach","existing","idx","id","load","items","persistInFlight","api","providedApi","localApi","useRef","undefined","current","Client","handleCleanup","clear","WrappedComponent","options","WithApi","propsApi","props","useApi","displayName","getDisplayName"],"sourceRoot":""}