{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_accountSecurityEnroll_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/u2f/webAuthnHelper.tsx","webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityEnroll.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx"],"sourcesContent":["// Copyright (c) 2019 GitHub, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\n// below is from https://github.com/github/webauthn-json/tree/66322fc5c12184c5269691ab5abaac79545a3916\n\nexport function base64urlToBuffer(baseurl64String: string): ArrayBuffer {\n  // Base64url to Base64\n  const padding = '=='.slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String = baseurl64String.replace(/-/g, '+').replace(/_/g, '/') + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): string {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = '';\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n  return base64urlString;\n}\n","import * as React from 'react';\nimport * as Sentry from '@sentry/react';\nimport u2f from 'u2f-api';\n\nimport {base64urlToBuffer, bufferToBase64url} from 'sentry/components/u2f/webAuthnHelper';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {ChallengeData} from 'sentry/types';\n\ntype TapParams = {\n  response: string;\n  challenge: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  isWebauthnSigninFFEnabled: boolean;\n  flowMode: string;\n  silentIfUnsupported: boolean;\n  onTap: ({response, challenge}: TapParams) => Promise<void>;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  responseElement: HTMLInputElement | null;\n  formElement: HTMLFormElement | null;\n  challengeElement: HTMLInputElement | null;\n  isSupported: boolean | null;\n  hasBeenTapped: boolean;\n  deviceFailure: string | null;\n};\n\nclass U2fInterface extends React.Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n  };\n\n  async componentDidMount() {\n    const supported = this.props.isWebauthnSigninFFEnabled\n      ? !!window.PublicKeyCredential\n      : await u2f.isSupported();\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    if (supported) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  getU2FResponse(data) {\n    if (!data.response) {\n      return JSON.stringify(data);\n    }\n\n    const authenticatorData = {\n      keyHandle: data.id,\n      clientData: bufferToBase64url(data.response.clientDataJSON),\n      signatureData: bufferToBase64url(data.response.signature),\n      authenticatorData: bufferToBase64url(data.response.authenticatorData),\n    };\n\n    return JSON.stringify(authenticatorData);\n  }\n\n  submitU2fResponse(promise) {\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = this.getU2FResponse(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n        });\n      });\n  }\n\n  webAuthnSignIn(authenticateRequests) {\n    const credentials: PublicKeyCredentialDescriptor[] = [];\n    // challenge and appId are the same for each device in authenticateRequests\n    const challenge = authenticateRequests[0].challenge;\n    const appId = authenticateRequests[0].appId;\n\n    authenticateRequests.forEach(device => {\n      credentials.push({\n        id: base64urlToBuffer(device.keyHandle),\n        type: 'public-key',\n        transports: ['usb', 'ble', 'nfc'],\n      });\n    });\n\n    const publicKeyCredentialRequestOptions: PublicKeyCredentialRequestOptions = {\n      challenge: base64urlToBuffer(challenge),\n      allowCredentials: credentials,\n      userVerification: 'discouraged',\n      extensions: {\n        appid: appId,\n      },\n    };\n\n    const promise = navigator.credentials.get({\n      publicKey: publicKeyCredentialRequestOptions,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  invokeU2fFlow() {\n    let promise: Promise<u2f.SignResponse | u2f.RegisterResponse>;\n\n    if (this.props.flowMode === 'sign') {\n      if (this.props.isWebauthnSigninFFEnabled) {\n        this.webAuthnSignIn(this.props.challengeData.authenticateRequests);\n      } else {\n        promise = u2f.sign(this.props.challengeData.authenticateRequests);\n        this.submitU2fResponse(promise);\n      }\n    } else if (this.props.flowMode === 'enroll') {\n      const {registerRequests, registeredKeys} = this.props.challengeData;\n      promise = u2f.register(registerRequests as any, registeredKeys as any);\n      this.submitU2fResponse(promise);\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already registered with Sentry.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                '[p1:The Sentry server administrator modified the ' +\n                  'device registrations.]' +\n                  '[p2:You need to remove and re-add the device to continue ' +\n                  'using your U2F device. Use a different sign-in method or ' +\n                  'contact [support] for assistance.]',\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure ? ' device-failure' : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default U2fInterface;\n","import {Component} from 'react';\n\nimport {t} from 'sentry/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = U2fInterface['props'];\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode: 'signin' | 'enroll' | 'sudo';\n};\n\nclass U2fSign extends Component<Props> {\n  static defaultProps = {\n    displayMode: 'signin',\n  };\n\n  render() {\n    const {displayMode, ...props} = this.props;\n    const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n    return (\n      <U2fInterface\n        {...props}\n        silentIfUnsupported={displayMode === 'sudo'}\n        flowMode={flowMode}\n      >\n        <p>{MESSAGES[displayMode] || null}</p>\n      </U2fInterface>\n    );\n  }\n}\n\nexport default U2fSign;\n","import Cookies from 'js-cookie';\nimport * as queryString from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return queryString.parse(data) as any;\n}\n","import * as React from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport QRCode from 'qrcode.react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {openRecoveryOptions} from 'sentry/actionCreators/modal';\nimport {fetchOrganizationByMember} from 'sentry/actionCreators/organizations';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport {PanelItem} from 'sentry/components/panels';\nimport U2fsign from 'sentry/components/u2f/u2fsign';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Authenticator} from 'sentry/types';\nimport getPendingInvite from 'sentry/utils/getPendingInvite';\nimport AsyncView from 'sentry/views/asyncView';\nimport RemoveConfirm from 'sentry/views/settings/account/accountSecurity/components/removeConfirm';\nimport Field from 'sentry/views/settings/components/forms/field';\nimport Form from 'sentry/views/settings/components/forms/form';\nimport JsonForm from 'sentry/views/settings/components/forms/jsonForm';\nimport FormModel from 'sentry/views/settings/components/forms/model';\nimport TextCopyInput from 'sentry/views/settings/components/forms/textCopyInput';\nimport {FieldObject} from 'sentry/views/settings/components/forms/type';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype getFieldsOpts = {\n  authenticator: Authenticator;\n  /**\n   * Flag to track if totp has been sent\n   */\n  hasSentCode: boolean;\n  /**\n   * Flag to track if we are currently sending the otp code\n   */\n  sendingCode: boolean;\n  /**\n   * Callback to reset SMS 2fa enrollment\n   */\n  onSmsReset: () => void;\n  /**\n   * Callback when u2f device is activated\n   */\n  onU2fTap: U2fsign['props']['onTap'];\n};\n\n/**\n * Retrieve additional form fields (or modify ones) based on 2fa method\n */\nconst getFields = ({\n  authenticator,\n  hasSentCode,\n  sendingCode,\n  onSmsReset,\n  onU2fTap,\n}: getFieldsOpts): null | FieldObject[] => {\n  const {form} = authenticator;\n\n  if (!form) {\n    return null;\n  }\n\n  if (authenticator.id === 'totp') {\n    return [\n      () => (\n        <CodeContainer key=\"qrcode\">\n          <StyledQRCode value={authenticator.qrcode} size={228} />\n        </CodeContainer>\n      ),\n      () => (\n        <Field key=\"secret\" label={t('Authenticator secret')}>\n          <TextCopyInput>{authenticator.secret ?? ''}</TextCopyInput>\n        </Field>\n      ),\n      ...form,\n      () => (\n        <Actions key=\"confirm\">\n          <Button priority=\"primary\" type=\"submit\">\n            {t('Confirm')}\n          </Button>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Sms Form needs a start over button + confirm button\n  // Also inputs being disabled vary based on hasSentCode\n  if (authenticator.id === 'sms') {\n    // Ideally we would have greater flexibility when rendering footer\n    return [\n      {...form[0], disabled: sendingCode || hasSentCode},\n      ...(hasSentCode ? [{...form[1], required: true}] : []),\n      () => (\n        <Actions key=\"sms-footer\">\n          <ButtonBar gap={1}>\n            {hasSentCode && <Button onClick={onSmsReset}>{t('Start Over')}</Button>}\n            <Button priority=\"primary\" type=\"submit\">\n              {hasSentCode ? t('Confirm') : t('Send Code')}\n            </Button>\n          </ButtonBar>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Need to render device name field + U2f component\n  if (authenticator.id === 'u2f') {\n    const deviceNameField = form.find(({name}) => name === 'deviceName')!;\n    return [\n      deviceNameField,\n      () => (\n        <U2fsign\n          key=\"u2f-enroll\"\n          style={{marginBottom: 0}}\n          challengeData={authenticator.challenge}\n          displayMode=\"enroll\"\n          onTap={onU2fTap}\n          isWebauthnSigninFFEnabled={false} // turn off webauthn for registration of u2f device\n        />\n      ),\n    ];\n  }\n\n  return null;\n};\n\ntype Props = AsyncView['props'] & WithRouterProps<{authId: string}, {}> & {};\n\ntype State = AsyncView['state'] & {\n  authenticator: Authenticator | null;\n  hasSentCode: boolean;\n  sendingCode: boolean;\n};\n\ntype PendingInvite = ReturnType<typeof getPendingInvite>;\n\n/**\n * Renders necessary forms in order to enroll user in 2fa\n */\nclass AccountSecurityEnroll extends AsyncView<Props, State> {\n  formModel = new FormModel();\n\n  getTitle() {\n    return t('Security');\n  }\n\n  getDefaultState() {\n    return {...super.getDefaultState(), hasSentCode: false};\n  }\n\n  get authenticatorEndpoint() {\n    return `/users/me/authenticators/${this.props.params.authId}/`;\n  }\n\n  get enrollEndpoint() {\n    return `${this.authenticatorEndpoint}enroll/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const errorHandler = (err: any) => {\n      const alreadyEnrolled =\n        err &&\n        err.status === 400 &&\n        err.responseJSON &&\n        err.responseJSON.details === 'Already enrolled';\n\n      if (alreadyEnrolled) {\n        this.props.router.push('/settings/account/security/');\n        addErrorMessage(t('Already enrolled'));\n      }\n\n      // Allow the endpoint to fail if the user is already enrolled\n      return alreadyEnrolled;\n    };\n\n    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];\n  }\n\n  componentDidMount() {\n    this.pendingInvitation = getPendingInvite();\n  }\n\n  pendingInvitation: PendingInvite = null;\n\n  get authenticatorName() {\n    return this.state.authenticator?.name ?? 'Authenticator';\n  }\n\n  // This resets state so that user can re-enter their phone number again\n  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);\n\n  // Handles SMS authenticators\n  handleSmsSubmit = async (dataModel: any) => {\n    const {authenticator, hasSentCode} = this.state;\n    const {phone, otp} = dataModel;\n\n    // Don't submit if empty\n    if (!phone || !authenticator) {\n      return;\n    }\n\n    const data = {\n      phone,\n      // Make sure `otp` is undefined if we are submitting OTP verification\n      // Otherwise API will think that we are on verification step (e.g. after submitting phone)\n      otp: hasSentCode ? otp : undefined,\n      secret: authenticator.secret,\n    };\n\n    // Only show loading when submitting OTP\n    this.setState({sendingCode: !hasSentCode});\n\n    if (!hasSentCode) {\n      addLoadingMessage(t('Sending code to %s...', data.phone));\n    } else {\n      addLoadingMessage(t('Verifying OTP...'));\n    }\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (error) {\n      this.formModel.resetForm();\n\n      addErrorMessage(\n        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')\n      );\n\n      this.setState({\n        hasSentCode: false,\n        sendingCode: false,\n      });\n\n      // Re-mount because we want to fetch a fresh secret\n      this.remountComponent();\n\n      return;\n    }\n\n    if (!hasSentCode) {\n      // Just successfully finished sending OTP to user\n      this.setState({hasSentCode: true, sendingCode: false});\n      addSuccessMessage(t('Sent code to %s', data.phone));\n    } else {\n      // OTP was accepted and SMS was added as a 2fa method\n      this.handleEnrollSuccess();\n    }\n  };\n\n  // Handle u2f device tap\n  handleU2fTap = async (tapData: any) => {\n    const data = {deviceName: this.formModel.getValue('deviceName'), ...tapData};\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Currently only TOTP uses this\n  handleTotpSubmit = async (dataModel: any) => {\n    if (!this.state.authenticator) {\n      return;\n    }\n\n    const data = {\n      ...(dataModel ?? {}),\n      secret: this.state.authenticator.secret,\n    };\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  handleSubmit: Form['props']['onSubmit'] = data => {\n    const id = this.state.authenticator?.id;\n\n    if (id === 'totp') {\n      this.handleTotpSubmit(data);\n      return;\n    }\n    if (id === 'sms') {\n      this.handleSmsSubmit(data);\n      return;\n    }\n  };\n\n  // Handler when we successfully add a 2fa device\n  async handleEnrollSuccess() {\n    // If we're pending approval of an invite, the user will have just joined\n    // the organization when completing 2fa enrollment. We should reload the\n    // organization context in that case to assign them to the org.\n    if (this.pendingInvitation) {\n      await fetchOrganizationByMember(this.pendingInvitation.memberId.toString(), {\n        addOrg: true,\n        fetchOrgDetails: true,\n      });\n    }\n\n    this.props.router.push('/settings/account/security/');\n    openRecoveryOptions({authenticatorName: this.authenticatorName});\n  }\n\n  // Handler when we failed to add a 2fa device\n  handleEnrollError() {\n    this.setState({loading: false});\n    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));\n  }\n\n  // Removes an authenticator\n  handleRemove = async () => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // `authenticator.authId` is NOT the same as `props.params.authId` This is\n    // for backwards compatibility with API endpoint\n    try {\n      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticator'));\n      return;\n    }\n\n    this.props.router.push('/settings/account/security/');\n    addSuccessMessage(t('Authenticator has been removed'));\n  };\n\n  renderBody() {\n    const {authenticator, hasSentCode, sendingCode} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const fields = getFields({\n      authenticator,\n      hasSentCode,\n      sendingCode,\n      onSmsReset: this.handleSmsReset,\n      onU2fTap: this.handleU2fTap,\n    });\n\n    // Attempt to extract `defaultValue` from server generated form fields\n    const defaultValues = fields\n      ? fields\n          .filter(\n            field =>\n              typeof field !== 'function' && typeof field.defaultValue !== 'undefined'\n          )\n          .map(field => [\n            field.name,\n            typeof field !== 'function' ? field.defaultValue : '',\n          ])\n          .reduce((acc, [name, value]) => {\n            acc[name] = value;\n            return acc;\n          }, {})\n      : {};\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator\n                css={{marginLeft: 6}}\n                enabled={authenticator.isEnrolled || authenticator.status === 'rotation'}\n              />\n            </Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <RemoveConfirm onConfirm={this.handleRemove}>\n                <Button priority=\"danger\">{authenticator.removeButton}</Button>\n              </RemoveConfirm>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        {authenticator.rotationWarning && authenticator.status === 'rotation' && (\n          <Alert type=\"warning\" icon={<IconWarning size=\"md\" />}>\n            {authenticator.rotationWarning}\n          </Alert>\n        )}\n\n        {!!authenticator.form?.length && (\n          <Form\n            model={this.formModel}\n            apiMethod=\"POST\"\n            apiEndpoint={this.authenticatorEndpoint}\n            onSubmit={this.handleSubmit}\n            initialData={{...defaultValues, ...authenticator}}\n            hideFooter\n          >\n            <JsonForm forms={[{title: 'Configuration', fields: fields ?? []}]} />\n          </Form>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst CodeContainer = styled(PanelItem)`\n  justify-content: center;\n`;\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nconst StyledQRCode = styled(QRCode)`\n  background: white;\n  padding: ${space(2)};\n`;\n\nexport default withRouter(AccountSecurityEnroll);\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import * as React from 'react';\n\nimport Confirm from 'sentry/components/confirm';\nimport {t} from 'sentry/locale';\nimport ConfirmHeader from 'sentry/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n"],"names":["base64urlToBuffer","baseurl64String","padding","slice","length","base64String","replace","str","atob","buffer","ArrayBuffer","byteView","Uint8Array","i","charCodeAt","bufferToBase64url","charCode","String","fromCharCode","btoa","U2fInterface","React","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","this","setState","invokeU2fFlow","ref","form","value","JSON","stringify","props","challengeData","state","supportMail","ConfigStore","support","href","t","className","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","onClick","onTryAgain","supported","isWebauthnSigninFFEnabled","window","PublicKeyCredential","u2f","getU2FResponse","data","response","authenticatorData","keyHandle","id","clientData","clientDataJSON","signatureData","signature","submitU2fResponse","promise","then","u2fResponse","challenge","onTap","catch","submit","err","failure","metaData","type","flowMode","Sentry","webAuthnSignIn","authenticateRequests","credentials","appId","forEach","device","push","transports","publicKeyCredentialRequestOptions","allowCredentials","userVerification","extensions","appid","navigator","get","publicKey","Error","registerRequests","registeredKeys","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","children","renderPrompt","name","bindChallengeElement","bindResponseElement","render","MESSAGES","signin","sudo","enroll","U2fSign","Component","displayMode","getPendingInvite","Cookies","queryString","AsyncView","AsyncComponent","getTitle","title","renderComponent","AccountSecurityEnroll","FormModel","hasSentCode","remountComponent","async","authenticator","phone","otp","dataModel","undefined","secret","sendingCode","addLoadingMessage","api","requestPromise","enrollEndpoint","error","formModel","resetForm","addErrorMessage","handleEnrollSuccess","addSuccessMessage","deviceName","getValue","tapData","loading","handleEnrollError","method","handleSmsSubmit","handleTotpSubmit","authId","authenticatorEndpoint","router","getDefaultState","super","params","getEndpoints","allowError","alreadyEnrolled","status","responseJSON","details","componentDidMount","pendingInvitation","fetchOrganizationByMember","memberId","toString","addOrg","fetchOrgDetails","openRecoveryOptions","authenticatorName","fields","onSmsReset","onU2fTap","CodeContainer","StyledQRCode","qrcode","size","label","Actions","priority","disabled","required","gap","find","marginBottom","getFields","handleSmsReset","handleU2fTap","defaultValues","filter","field","defaultValue","map","reduce","acc","Fragment","css","enabled","isEnrolled","action","removeButton","onConfirm","handleRemove","description","rotationWarning","icon","model","apiMethod","apiEndpoint","onSubmit","handleSubmit","initialData","hideFooter","forms","PanelItem","QRCode","space","withRouter","message","RemoveConfirm"],"sourceRoot":""}