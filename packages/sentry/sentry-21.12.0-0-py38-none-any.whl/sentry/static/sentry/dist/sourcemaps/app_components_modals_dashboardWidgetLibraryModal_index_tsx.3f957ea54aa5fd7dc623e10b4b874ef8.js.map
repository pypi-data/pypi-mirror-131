{"version":3,"file":"chunks/app_components_modals_dashboardWidgetLibraryModal_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboardsV2/widgetLibrary/data.tsx","webpack:///./app/views/dashboardsV2/widgetLibrary/widgetCard.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/libraryTab.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/index.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/tabsButtonBar.tsx","webpack:///./app/views/dashboardsV2/types.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\n\nimport {DisplayType, Widget, WidgetType} from '../types';\n\nexport type WidgetTemplate = Widget & {\n  description: string;\n};\n\nexport const DEFAULT_WIDGETS: Readonly<Array<WidgetTemplate>> = [\n  {\n    id: undefined,\n    title: t('Duration Distribution'),\n    description: t('Compare transaction durations across different percentiles.'),\n    displayType: DisplayType.AREA,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '!event.type:error',\n        fields: [\n          'p50(transaction.duration)',\n          'p75(transaction.duration)',\n          'p95(transaction.duration)',\n        ],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('High Throughput Transactions'),\n    description: t('Top 5 transactions with the largest volume.'),\n    displayType: DisplayType.TOP_N,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '!event.type:error',\n        fields: ['transaction', 'count()'],\n        orderby: '-count',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('LCP by Country'),\n    description: t('Density map showing page load times by country.'),\n    displayType: DisplayType.WORLD_MAP,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'has:geo.country_code',\n        fields: ['p75(measurements.lcp)'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Miserable Users'),\n    description: t('Unique users who have experienced slow load times.'),\n    displayType: DisplayType.BIG_NUMBER,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '',\n        fields: ['count_miserable(user,300)'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Slow vs Fast Transactions'),\n    description: t('Percentage breakdown of transaction durations over and under 300ms.'),\n    displayType: DisplayType.BAR,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '!event.type:error',\n        fields: [\n          'equation|(count_if(transaction.duration,greater,300) / count()) * 100',\n          'equation|(count_if(transaction.duration,lessOrEquals,300) / count()) * 100',\n        ],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Top Issues'),\n    description: t('Issues with the most error events.'),\n    displayType: DisplayType.TABLE,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:error',\n        fields: ['issue', 'count()', 'any(message)'],\n        orderby: '-count',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Top Unhandled Error Types'),\n    description: t('Most frequently encountered unhandled errors.'),\n    displayType: DisplayType.TOP_N,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'error.unhandled:true',\n        fields: ['error.type', 'count()'],\n        orderby: '-count',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Users Affected by Errors'),\n    description: t('Footprint of unique users affected by errors.'),\n    displayType: DisplayType.LINE,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:error',\n        fields: ['count_unique(user)', 'count()'],\n        orderby: '',\n      },\n    ],\n  },\n];\n","import * as React from 'react';\nimport {useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {IconArrow, IconGlobe, IconGraph, IconMenu, IconNumber} from 'sentry/icons';\nimport {IconGraphArea} from 'sentry/icons/iconGraphArea';\nimport {IconGraphBar} from 'sentry/icons/iconGraphBar';\nimport space from 'sentry/styles/space';\n\nimport {DisplayType} from '../types';\n\nimport {WidgetTemplate} from './data';\n\ntype Props = {\n  widget: WidgetTemplate;\n  ['data-test-id']?: string;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n  setErrored: (errored: boolean) => void;\n  selectedWidgets: WidgetTemplate[];\n};\n\nfunction WidgetLibraryCard({\n  selectedWidgets,\n  widget,\n  setSelectedWidgets,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  const [selected, setSelected] = useState(selectedWidgets.includes(widget));\n\n  function getWidgetIcon(displayType: DisplayType) {\n    switch (displayType) {\n      case DisplayType.TABLE:\n        return <IconMenu size=\"xs\" />;\n      case DisplayType.WORLD_MAP:\n        return <IconGlobe size=\"xs\" />;\n      case DisplayType.BIG_NUMBER:\n        return <IconNumber size=\"xs\" />;\n      case DisplayType.BAR:\n        return <IconGraphBar size=\"xs\" />;\n      case DisplayType.TOP_N:\n        return <IconArrow size=\"xs\" />;\n      case DisplayType.AREA:\n        return <IconGraphArea size=\"xs\" />;\n      case DisplayType.LINE:\n      default:\n        return <IconGraph size=\"xs\" />;\n    }\n  }\n\n  return (\n    <StyledPanel\n      data-test-id={dataTestId}\n      selected={selected}\n      onClick={() => {\n        if (selected) {\n          const updatedWidgets = selectedWidgets.filter(\n            selectedWidget => widget !== selectedWidget\n          );\n          setSelectedWidgets(updatedWidgets);\n        } else {\n          const updatedWidgets = selectedWidgets.slice().concat(widget);\n          setSelectedWidgets(updatedWidgets);\n        }\n        setSelected(!!!selected);\n      }}\n    >\n      <PanelBody>\n        <TitleContainer>\n          {getWidgetIcon(widget.displayType)}\n          <Title>{widget.title}</Title>\n        </TitleContainer>\n        <Description>{widget.description}</Description>\n      </PanelBody>\n    </StyledPanel>\n  );\n}\n\nconst Title = styled('div')`\n  padding-left: ${space(1)};\n  font-size: 16px;\n  line-height: 140%;\n  color: ${p => p.theme.gray500};\n`;\n\nconst TitleContainer = styled('div')`\n  padding: ${space(1.5)} ${space(2)};\n  padding-bottom: ${space(0.5)};\n  display: flex;\n  align-items: center;\n`;\n\nconst Description = styled('div')`\n  padding: 0 ${space(1)} ${space(1.5)} 36px;\n  font-size: 14px;\n  line-height: 21px;\n  color: ${p => p.theme.gray300};\n`;\n\ntype PanelProps = {\n  selected?: boolean;\n};\n\nconst StyledPanel = styled(Panel)<PanelProps>`\n  margin-bottom: 0;\n  border: ${p => '1px solid ' + p.theme.border};\n  outline: ${p => (p.selected ? '2px solid' + p.theme.purple400 : undefined)};\n  box-sizing: border-box;\n  box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.08);\n  cursor: pointer;\n`;\n\nexport default WidgetLibraryCard;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  DEFAULT_WIDGETS,\n  WidgetTemplate,\n} from 'sentry/views/dashboardsV2/widgetLibrary/data';\nimport WidgetLibraryCard from 'sentry/views/dashboardsV2/widgetLibrary/widgetCard';\n\ntype Props = {\n  selectedWidgets: WidgetTemplate[];\n  errored: boolean;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n  setErrored: (errored: boolean) => void;\n};\n\nfunction DashboardWidgetLibraryTab({\n  selectedWidgets,\n  errored,\n  setSelectedWidgets,\n  setErrored,\n}: Props) {\n  return (\n    <React.Fragment>\n      {errored && !!!selectedWidgets.length ? (\n        <Alert type=\"error\">\n          {t(\n            'Please select at least one Widget from our Library. Alternatively, you can build a custom widget from scratch.'\n          )}\n        </Alert>\n      ) : null}\n      <WidgetLibraryGrid>\n        {DEFAULT_WIDGETS.map((widgetCard, index) => {\n          return (\n            <WidgetLibraryCard\n              data-test-id={`widget-library-card-${index}`}\n              key={widgetCard.title}\n              widget={widgetCard}\n              selectedWidgets={selectedWidgets}\n              setSelectedWidgets={setSelectedWidgets}\n              setErrored={setErrored}\n            />\n          );\n        })}\n      </WidgetLibraryGrid>\n    </React.Fragment>\n  );\n}\n\nconst WidgetLibraryGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(100px, 1fr));\n  grid-template-rows: repeat(2, max-content);\n  row-gap: ${space(1.5)};\n  column-gap: ${space(2)};\n  /* 700px is the max width of the modal */\n  @media (max-width: 700px) {\n    grid-template-columns: auto;\n  }\n`;\n\nexport default DashboardWidgetLibraryTab;\n","import * as React from 'react';\nimport {useState} from 'react';\nimport {css} from '@emotion/react';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {DashboardDetails, MAX_WIDGETS, Widget} from 'sentry/views/dashboardsV2/types';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\n\nimport Button from '../../button';\nimport ButtonBar from '../../buttonBar';\n\nimport DashboardWidgetLibraryTab from './libraryTab';\nimport {TAB, TabsButtonBar} from './tabsButtonBar';\n\nexport type DashboardWidgetLibraryModalOptions = {\n  organization: Organization;\n  dashboard: DashboardDetails;\n  initialSelectedWidgets?: WidgetTemplate[];\n  customWidget?: Widget;\n  onAddWidget: (widgets: Widget[]) => void;\n};\n\ntype Props = ModalRenderProps & DashboardWidgetLibraryModalOptions;\n\nfunction DashboardWidgetLibraryModal({\n  Header,\n  Body,\n  Footer,\n  dashboard,\n  organization,\n  customWidget,\n  initialSelectedWidgets,\n  closeModal,\n  onAddWidget,\n}: Props) {\n  const [selectedWidgets, setSelectedWidgets] = useState<WidgetTemplate[]>(\n    initialSelectedWidgets ? initialSelectedWidgets : []\n  );\n  const [errored, setErrored] = useState(false);\n\n  function handleSubmit() {\n    onAddWidget([...dashboard.widgets, ...selectedWidgets]);\n    closeModal();\n  }\n\n  const overLimit = dashboard.widgets.length + selectedWidgets.length > MAX_WIDGETS;\n\n  return (\n    <React.Fragment>\n      <Header closeButton>\n        <h4>{t('Add Widget(s)')}</h4>\n      </Header>\n      <Body>\n        <TabsButtonBar\n          activeTab={TAB.Library}\n          organization={organization}\n          dashboard={dashboard}\n          selectedWidgets={selectedWidgets}\n          customWidget={customWidget}\n          onAddWidget={onAddWidget}\n        />\n        <DashboardWidgetLibraryTab\n          selectedWidgets={selectedWidgets}\n          errored={errored}\n          setSelectedWidgets={setSelectedWidgets}\n          setErrored={setErrored}\n        />\n      </Body>\n      <Footer>\n        <ButtonBar gap={1}>\n          <Button\n            external\n            href=\"https://docs.sentry.io/product/dashboards/custom-dashboards/#widget-builder\"\n          >\n            {t('Read the docs')}\n          </Button>\n          <Tooltip\n            title={tct(\n              'Exceeds max widgets ([maxWidgets]) per dashboard. Plese unselect [unselectWidgets] widget(s).',\n              {\n                maxWidgets: MAX_WIDGETS,\n                unselectWidgets:\n                  dashboard.widgets.length + selectedWidgets.length - MAX_WIDGETS,\n              }\n            )}\n            disabled={!!!overLimit}\n          >\n            <Button\n              data-test-id=\"confirm-widgets\"\n              priority=\"primary\"\n              disabled={overLimit}\n              type=\"button\"\n              onClick={() => {\n                if (!!!selectedWidgets.length) {\n                  setErrored(true);\n                  return;\n                }\n                handleSubmit();\n              }}\n            >\n              {t('Save')}\n            </Button>\n          </Tooltip>\n        </ButtonBar>\n      </Footer>\n    </React.Fragment>\n  );\n}\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 700px;\n  margin: 70px auto;\n`;\n\nexport default DashboardWidgetLibraryModal;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  openAddDashboardWidgetModal,\n  openDashboardWidgetLibraryModal,\n} from 'sentry/actionCreators/modal';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  DashboardDetails,\n  DashboardWidgetSource,\n  Widget,\n} from 'sentry/views/dashboardsV2/types';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\n\nimport Button from '../../button';\nimport ButtonBar from '../../buttonBar';\n\nexport enum TAB {\n  Library = 'library',\n  Custom = 'custom',\n}\n\ntype Props = {\n  activeTab: TAB;\n  organization: Organization;\n  dashboard: DashboardDetails;\n  selectedWidgets?: WidgetTemplate[];\n  customWidget?: Widget;\n  onAddWidget?: (widgets: Widget[]) => void;\n};\n\nexport function TabsButtonBar({\n  activeTab,\n  organization,\n  dashboard,\n  selectedWidgets,\n  customWidget,\n  onAddWidget,\n}: Props) {\n  return (\n    <StyledButtonBar active={activeTab}>\n      <LibraryButton\n        barId={TAB.Library}\n        onClick={() => {\n          if (activeTab === TAB.Library) {\n            return;\n          }\n          if (defined(onAddWidget)) {\n            openDashboardWidgetLibraryModal({\n              organization,\n              dashboard,\n              customWidget,\n              initialSelectedWidgets: selectedWidgets,\n              onAddWidget,\n            });\n          }\n        }}\n      >\n        {t('Widget Library')}\n      </LibraryButton>\n      <CustomButton\n        barId={TAB.Custom}\n        onClick={() => {\n          if (activeTab === TAB.Custom) {\n            return;\n          }\n          openAddDashboardWidgetModal({\n            organization,\n            dashboard,\n            selectedWidgets,\n            widget: customWidget,\n            source: DashboardWidgetSource.LIBRARY,\n            onAddLibraryWidget: onAddWidget,\n          });\n        }}\n      >\n        {t('Custom Widget')}\n      </CustomButton>\n    </StyledButtonBar>\n  );\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  display: inline;\n  margin-bottom: ${space(2)};\n`;\n\nconst LibraryButton = styled(Button)`\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n`;\n\nconst CustomButton = styled(Button)`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`;\n","import {User} from 'sentry/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  STACKED_AREA = 'stacked_area',\n  TOP_N = 'top_n',\n}\n\nexport enum WidgetType {\n  DISCOVER = 'discover',\n  ISSUE = 'issue',\n}\n\nexport type WidgetQuery = {\n  name: string;\n  fields: string[];\n  conditions: string;\n  orderby: string;\n};\n\nexport type Widget = {\n  id?: string;\n  title: string;\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n  widgetType?: WidgetType;\n  tempId?: string;\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  dateCreated?: string;\n  createdBy?: User;\n  widgetDisplay: DisplayType[];\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  title: string;\n  widgets: Widget[];\n  id: string;\n  dateCreated: string;\n  createdBy?: User;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n}\n\n// where we launch the dashboard widget from\nexport enum DashboardWidgetSource {\n  DISCOVERV2 = 'discoverv2',\n  DASHBOARDS = 'dashboards',\n  LIBRARY = 'library',\n  ISSUE_DETAILS = 'issueDetail',\n}\n"],"names":["DEFAULT_WIDGETS","id","undefined","title","t","description","displayType","DisplayType","widgetType","WidgetType","interval","queries","name","conditions","fields","orderby","WidgetLibraryCard","selectedWidgets","widget","setSelectedWidgets","dataTestId","selected","setSelected","useState","includes","StyledPanel","onClick","updatedWidgets","filter","selectedWidget","slice","concat","TitleContainer","size","getWidgetIcon","Title","Description","space","p","theme","gray500","gray300","Panel","border","purple400","DashboardWidgetLibraryTab","errored","setErrored","length","type","WidgetLibraryGrid","map","widgetCard","index","DashboardWidgetLibraryModal","Header","Body","Footer","dashboard","organization","customWidget","initialSelectedWidgets","closeModal","onAddWidget","overLimit","widgets","MAX_WIDGETS","closeButton","activeTab","TAB","gap","external","href","tct","maxWidgets","unselectWidgets","disabled","priority","modalCss","TabsButtonBar","StyledButtonBar","active","LibraryButton","barId","Library","defined","openDashboardWidgetLibraryModal","CustomButton","Custom","openAddDashboardWidgetModal","source","DashboardWidgetSource","onAddLibraryWidget","ButtonBar","Button","DashboardState"],"sourceRoot":""}