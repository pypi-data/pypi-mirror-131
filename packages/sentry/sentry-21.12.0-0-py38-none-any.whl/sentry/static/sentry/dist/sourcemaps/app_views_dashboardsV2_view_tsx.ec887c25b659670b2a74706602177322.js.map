{"version":3,"file":"chunks/app_views_dashboardsV2_view_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboardsV2/orgDashboards.tsx","webpack:///./app/views/dashboardsV2/view.tsx"],"sourcesContent":["import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\n\nimport {DashboardDetails, DashboardListItem} from './types';\n\ntype OrgDashboardsChildrenProps = {\n  dashboard: DashboardDetails | null;\n  dashboards: DashboardListItem[];\n  error: boolean;\n  onDashboardUpdate: (updatedDashboard: DashboardDetails) => void;\n};\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  params: {orgId: string; dashboardId?: string};\n  location: Location;\n  children: (props: OrgDashboardsChildrenProps) => React.ReactNode;\n};\n\ntype State = {\n  // endpoint response\n  dashboards: DashboardListItem[] | null;\n  /**\n   * The currently selected dashboard.\n   */\n  selectedDashboard: DashboardDetails | null;\n} & AsyncComponent['state'];\n\nclass OrgDashboards extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n\n    dashboards: [],\n    selectedDashboard: null,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.params.dashboardId, this.props.params.dashboardId)) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const url = `/organizations/${organization.slug}/dashboards/`;\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [['dashboards', url]];\n\n    if (params.dashboardId) {\n      endpoints.push(['selectedDashboard', `${url}${params.dashboardId}/`]);\n      trackAnalyticsEvent({\n        eventKey: 'dashboards2.view',\n        eventName: 'Dashboards2: View dashboard',\n        organization_id: parseInt(this.props.organization.id, 10),\n        dashboard_id: params.dashboardId,\n      });\n    }\n\n    return endpoints;\n  }\n\n  onDashboardUpdate(updatedDashboard: DashboardDetails) {\n    this.setState({selectedDashboard: updatedDashboard});\n  }\n\n  getDashboards(): DashboardListItem[] {\n    const {dashboards} = this.state;\n\n    return Array.isArray(dashboards) ? dashboards : [];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    const {params, organization, location} = this.props;\n    if (params.dashboardId || stateKey === 'selectedDashboard') {\n      return;\n    }\n\n    // If we don't have a selected dashboard, and one isn't going to arrive\n    // we can redirect to the first dashboard in the list.\n    const dashboardId = data.length ? data[0].id : 'default-overview';\n    const url = `/organizations/${organization.slug}/dashboard/${dashboardId}/`;\n    browserHistory.replace({\n      pathname: url,\n      query: {\n        ...location.query,\n      },\n    });\n  }\n\n  renderLoading() {\n    return (\n      <PageContent>\n        <LoadingIndicator />\n      </PageContent>\n    );\n  }\n\n  renderBody() {\n    const {children} = this.props;\n    const {selectedDashboard, error} = this.state;\n\n    return children({\n      error,\n      dashboard: selectedDashboard,\n      dashboards: this.getDashboards(),\n      onDashboardUpdate: (updatedDashboard: DashboardDetails) =>\n        this.onDashboardUpdate(updatedDashboard),\n    });\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n\n    return super.renderError(error, true, true);\n  }\n\n  renderComponent() {\n    const {organization, location} = this.props;\n\n    if (!organization.features.includes('dashboards-basic')) {\n      // Redirect to Dashboards v1\n      browserHistory.replace({\n        pathname: `/organizations/${organization.slug}/dashboards/`,\n        query: {\n          ...location.query,\n        },\n      });\n      return null;\n    }\n\n    return (\n      <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n        {super.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default OrgDashboards;\n","import {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport {updateDashboardVisit} from 'sentry/actionCreators/dashboards';\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState, Widget} from './types';\nimport {constructWidgetFromQuery} from './utils';\n\nconst ALLOWED_PARAMS = ['start', 'end', 'utc', 'period', 'project', 'environment'];\n\ntype Props = RouteComponentProps<{orgId: string; dashboardId: string}, {}> & {\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nfunction ViewEditDashboard(props: Props) {\n  const api = useApi();\n\n  const {organization, params, location} = props;\n  const dashboardId = params.dashboardId;\n  const orgSlug = organization.slug;\n  const [newWidget, setNewWidget] = useState<Widget | undefined>();\n\n  useEffect(() => {\n    if (dashboardId && dashboardId !== 'default-overview') {\n      updateDashboardVisit(api, orgSlug, dashboardId);\n    }\n\n    const constructedWidget = constructWidgetFromQuery(location.query);\n    setNewWidget(constructedWidget);\n    // Clean up url after constructing widget from query string, only allow GHS params\n    if (constructedWidget) {\n      browserHistory.replace({\n        pathname: location.pathname,\n        query: pick(location.query, ALLOWED_PARAMS),\n      });\n    }\n  }, [api, orgSlug, dashboardId]);\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, onDashboardUpdate}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <DashboardDetail\n              {...props}\n              initialState={newWidget ? DashboardState.EDIT : DashboardState.VIEW}\n              dashboard={dashboard}\n              dashboards={dashboards}\n              onDashboardUpdate={onDashboardUpdate}\n              newWidget={newWidget}\n            />\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withOrganization(ViewEditDashboard);\n\ntype FeatureProps = {\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nexport const DashboardBasicFeature = ({organization, children}: FeatureProps) => {\n  const renderDisabled = () => (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-page\"\n      features={['organizations:dashboards-basic']}\n      organization={organization}\n      renderDisabled={renderDisabled}\n    >\n      {children}\n    </Feature>\n  );\n};\n"],"names":["OrgDashboards","AsyncComponent","loading","reloading","error","errors","dashboards","selectedDashboard","componentDidUpdate","prevProps","isEqual","params","dashboardId","this","props","remountComponent","getEndpoints","organization","url","slug","endpoints","push","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","dashboard_id","onDashboardUpdate","updatedDashboard","setState","getDashboards","state","Array","isArray","onRequestSuccess","stateKey","data","location","length","browserHistory","pathname","query","renderLoading","renderBody","children","dashboard","renderError","Object","values","find","resp","status","super","renderComponent","features","includes","title","t","orgSlug","ALLOWED_PARAMS","ViewEditDashboard","api","useApi","newWidget","setNewWidget","useState","useEffect","updateDashboardVisit","constructedWidget","constructWidgetFromQuery","pick","DashboardBasicFeature","initialState","DashboardState","withOrganization","hookName","renderDisabled","type"],"sourceRoot":""}