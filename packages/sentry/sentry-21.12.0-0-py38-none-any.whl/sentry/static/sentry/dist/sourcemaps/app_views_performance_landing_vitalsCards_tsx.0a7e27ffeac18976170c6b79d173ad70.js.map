{"version":3,"file":"chunks/app_views_performance_landing_vitalsCards_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/vitals/vitalsCardsDiscoverQuery.tsx","webpack:///./app/components/sparklines/index.tsx","webpack:///./app/views/performance/vitalDetail/colorBar.tsx","webpack:///./app/views/performance/vitalDetail/vitalPercents.tsx","webpack:///./app/views/performance/landing/vitalsCards.tsx"],"sourcesContent":["import * as React from 'react';\nimport pick from 'lodash/pick';\n\nimport {MetaType} from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport GenericDiscoverQuery, {\n  DiscoverQueryPropsWithContext,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {PERFORMANCE_URL_PARAM} from 'sentry/utils/performance/constants';\nimport withApi from 'sentry/utils/withApi';\n\nexport type TableDataRow = {\n  id: string;\n  [key: string]: React.ReactText;\n};\n\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\nexport type VitalData = {\n  poor: number;\n  meh: number;\n  good: number;\n  total: number;\n  p75: number | null;\n};\n\nexport type VitalsData = Record<string, VitalData>;\n\ntype VitalsProps = {\n  vitals: WebVital[];\n};\n\ntype RequestProps = DiscoverQueryPropsWithContext & VitalsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<VitalsProps>, 'tableData'> & {\n  vitalsData: VitalsData | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getRequestPayload(props: RequestProps) {\n  const {eventView, vitals} = props;\n  const apiPayload = eventView?.getEventsAPIPayload(props.location);\n  return {\n    vital: vitals,\n    ...pick(apiPayload, ['query', ...Object.values(PERFORMANCE_URL_PARAM)]),\n  };\n}\n\nfunction VitalsCardsDiscoverQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<VitalsData, VitalsProps>\n      getRequestPayload={getRequestPayload}\n      route=\"events-vitals\"\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({vitalsData: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(VitalsCardsDiscoverQuery);\n","import {Sparklines} from 'react-sparklines';\nimport PropTypes from 'prop-types';\n\n/**\n * This is required because:\n *\n * - React.Suspense only works with default exports\n * - typescript complains that the library's `propTypes` does not\n * have `children defined.\n * - typescript also won't let us access `Sparklines.propTypes`\n */\nexport default class SparklinesWithCustomPropTypes extends Sparklines {\n  static propTypes = {\n    children: PropTypes.node,\n    data: PropTypes.array,\n    limit: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    svgWidth: PropTypes.number,\n    svgHeight: PropTypes.number,\n    preserveAspectRatio: PropTypes.string,\n    margin: PropTypes.number,\n    style: PropTypes.object,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    onMouseMove: PropTypes.func,\n  };\n}\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Color} from 'sentry/utils/theme';\n\ntype ColorStop = {\n  percent: number;\n  color: Color;\n};\n\ntype Props = {\n  colorStops: ColorStop[];\n  barHeight?: number;\n};\n\nconst ColorBar = (props: Props) => {\n  return (\n    <VitalBar\n      barHeight={props.barHeight}\n      fractions={props.colorStops.map(({percent}) => percent)}\n    >\n      {props.colorStops.map(colorStop => {\n        return <BarStatus color={colorStop.color} key={colorStop.color} />;\n      })}\n    </VitalBar>\n  );\n};\n\ntype VitalBarProps = {\n  fractions: number[];\n  barHeight?: number;\n};\n\nconst VitalBar = styled('div')<VitalBarProps>`\n  height: ${p => (p.barHeight ? `${p.barHeight}px` : '16px')};\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  background: ${p => p.theme.gray100};\n  display: grid;\n  grid-template-columns: ${p => p.fractions.map(f => `${f}fr`).join(' ')};\n  margin-bottom: ${p => (p.barHeight ? '' : space(1))};\n  border-radius: 2px;\n`;\n\ntype ColorProps = {\n  color: Color;\n};\n\nconst BarStatus = styled('div')<ColorProps>`\n  background-color: ${p => p.theme[p.color]};\n`;\n\nexport default ColorBar;\n","import styled from '@emotion/styled';\n\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\n\nimport {VitalState, vitalStateIcons, webVitalMeh, webVitalPoor} from './utils';\n\ntype Percent = {\n  vitalState: VitalState;\n  percent: number;\n};\n\ntype Props = {\n  vital: WebVital | WebVital[];\n  percents: Percent[];\n  showVitalPercentNames?: boolean;\n  hideTooltips?: boolean;\n};\n\nfunction getVitalStateText(vital: WebVital | WebVital[], vitalState) {\n  const unit = !Array.isArray(vital) && vital !== WebVital.CLS ? 'ms' : '';\n  switch (vitalState) {\n    case VitalState.POOR:\n      return Array.isArray(vital)\n        ? t('Poor')\n        : tct('Poor: >[threshold][unit]', {threshold: webVitalPoor[vital], unit});\n    case VitalState.MEH:\n      return Array.isArray(vital)\n        ? t('Meh')\n        : tct('Meh: >[threshold][unit]', {threshold: webVitalMeh[vital], unit});\n    case VitalState.GOOD:\n      return Array.isArray(vital)\n        ? t('Good')\n        : tct('Good: <[threshold][unit]', {threshold: webVitalMeh[vital], unit});\n    default:\n      return null;\n  }\n}\n\nexport default function VitalPercents(props: Props) {\n  return (\n    <VitalSet>\n      {props.percents.map(pct => {\n        return (\n          <Tooltip\n            key={pct.vitalState}\n            title={getVitalStateText(props.vital, pct.vitalState)}\n            disabled={props.hideTooltips}\n          >\n            <VitalStatus>\n              {vitalStateIcons[pct.vitalState]}\n              <span>\n                {props.showVitalPercentNames && t(`${pct.vitalState}`)}{' '}\n                {formatPercentage(pct.percent, 0)}\n              </span>\n            </VitalStatus>\n          </Tooltip>\n        );\n      })}\n    </VitalSet>\n  );\n}\n\nconst VitalSet = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n`;\n\nconst VitalStatus = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport Card from 'sentry/components/card';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {HeaderTitle} from 'sentry/components/charts/styles';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport Sparklines from 'sentry/components/sparklines';\nimport SparklinesLine from 'sentry/components/sparklines/line';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  Column,\n  generateFieldAsString,\n  getAggregateAlias,\n  WebVital,\n} from 'sentry/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport VitalsCardsDiscoverQuery, {\n  VitalData,\n  VitalsData,\n} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeList} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport useApi from 'sentry/utils/useApi';\n\nimport ColorBar from '../vitalDetail/colorBar';\nimport {\n  vitalAbbreviations,\n  vitalDetailRouteWithQuery,\n  vitalMap,\n  VitalState,\n  vitalStateColors,\n} from '../vitalDetail/utils';\nimport VitalPercents from '../vitalDetail/vitalPercents';\n\nimport {\n  getDefaultDisplayFieldForPlatform,\n  LandingDisplayField,\n  vitalCardDetails,\n} from './utils';\n\ntype FrontendCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  frontendOnly?: boolean;\n};\n\nexport function FrontendCards(props: FrontendCardsProps) {\n  const {eventView, location, organization, projects, frontendOnly = false} = props;\n\n  if (frontendOnly) {\n    const defaultDisplay = getDefaultDisplayFieldForPlatform(projects, eventView);\n    const isFrontend = defaultDisplay === LandingDisplayField.FRONTEND_PAGELOAD;\n\n    if (!isFrontend) {\n      return null;\n    }\n  }\n\n  const vitals = [WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS];\n\n  return (\n    <VitalsCardsDiscoverQuery\n      eventView={eventView}\n      location={location}\n      orgSlug={organization.slug}\n      vitals={vitals}\n    >\n      {({isLoading, vitalsData}) => {\n        return (\n          <VitalsContainer>\n            {vitals.map(vital => {\n              const target = vitalDetailRouteWithQuery({\n                orgSlug: organization.slug,\n                query: eventView.generateQueryStringObject(),\n                vitalName: vital,\n                projectID: decodeList(location.query.project),\n              });\n\n              const value = isLoading\n                ? '\\u2014'\n                : getP75(vitalsData?.[vital] ?? null, vital);\n              const chart = (\n                <VitalBarContainer>\n                  <VitalBar isLoading={isLoading} vital={vital} data={vitalsData} />\n                </VitalBarContainer>\n              );\n\n              return (\n                <Link\n                  key={vital}\n                  to={target}\n                  data-test-id={`vitals-linked-card-${vitalAbbreviations[vital]}`}\n                >\n                  <VitalCard\n                    title={vitalMap[vital] ?? ''}\n                    tooltip={WEB_VITAL_DETAILS[vital].description ?? ''}\n                    value={isLoading ? '\\u2014' : value}\n                    chart={chart}\n                    minHeight={150}\n                  />\n                </Link>\n              );\n            })}\n          </VitalsContainer>\n        );\n      }}\n    </VitalsCardsDiscoverQuery>\n  );\n}\n\nconst VitalBarContainer = styled('div')`\n  margin-top: ${space(1.5)};\n`;\n\ntype BaseCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\ntype GenericCardsProps = BaseCardsProps & {\n  functions: Column[];\n};\n\nfunction GenericCards(props: GenericCardsProps) {\n  const api = useApi();\n\n  const {eventView: baseEventView, location, organization, functions} = props;\n  const {query} = location;\n  const eventView = baseEventView.withColumns(functions);\n\n  // construct request parameters for fetching chart data\n  const globalSelection = eventView.getGlobalSelection();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : undefined;\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : undefined;\n  const interval =\n    typeof query.sparkInterval === 'string'\n      ? query.sparkInterval\n      : getInterval(\n          {\n            start: start || null,\n            end: end || null,\n            period: globalSelection.datetime.period,\n          },\n          'low'\n        );\n  const apiPayload = eventView.getEventsAPIPayload(location);\n\n  return (\n    <DiscoverQuery\n      location={location}\n      eventView={eventView}\n      orgSlug={organization.slug}\n      limit={1}\n      referrer=\"api.performance.vitals-cards\"\n    >\n      {({isLoading: isSummaryLoading, tableData}) => (\n        <EventsRequest\n          api={api}\n          organization={organization}\n          period={globalSelection.datetime.period}\n          project={globalSelection.projects}\n          environment={globalSelection.environments}\n          team={apiPayload.team}\n          start={start}\n          end={end}\n          interval={interval}\n          query={apiPayload.query}\n          includePrevious={false}\n          yAxis={eventView.getFields()}\n          partial\n        >\n          {({results}) => {\n            const series = results?.reduce((allSeries, oneSeries) => {\n              allSeries[oneSeries.seriesName] = oneSeries.data.map(item => item.value);\n              return allSeries;\n            }, {});\n            const details = vitalCardDetails(organization);\n\n            return (\n              <VitalsContainer>\n                {functions.map(func => {\n                  let fieldName = generateFieldAsString(func);\n\n                  if (fieldName.includes('apdex')) {\n                    // Replace apdex with explicit thresholds with a generic one for lookup\n                    fieldName = 'apdex()';\n                  }\n\n                  const cardDetail = details[fieldName];\n                  if (!cardDetail) {\n                    Sentry.captureMessage(`Missing field '${fieldName}' in vital cards.`);\n                    return null;\n                  }\n\n                  const {title, tooltip, formatter} = cardDetail;\n                  const alias = getAggregateAlias(fieldName);\n                  const rawValue = tableData?.data?.[0]?.[alias];\n\n                  const data = series?.[fieldName];\n                  const value =\n                    isSummaryLoading || !defined(rawValue)\n                      ? '\\u2014'\n                      : formatter(rawValue);\n                  const chart = <SparklineChart data={data} />;\n                  return (\n                    <VitalCard\n                      key={fieldName}\n                      title={title}\n                      tooltip={tooltip}\n                      value={value}\n                      chart={chart}\n                      horizontal\n                      minHeight={96}\n                      isNotInteractive\n                    />\n                  );\n                })}\n              </VitalsContainer>\n            );\n          }}\n        </EventsRequest>\n      )}\n    </DiscoverQuery>\n  );\n}\n\nfunction _BackendCards(props: BaseCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'transaction.duration', undefined, undefined],\n    },\n    {kind: 'function', function: ['tpm', '', undefined, undefined]},\n    {kind: 'function', function: ['failure_rate', '', undefined, undefined]},\n    {\n      kind: 'function',\n      function: ['apdex', '', undefined, undefined],\n    },\n  ];\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const BackendCards = _BackendCards;\n\ntype MobileCardsProps = BaseCardsProps & {\n  showStallPercentage: boolean;\n};\n\nfunction _MobileCards(props: MobileCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_cold', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_warm', undefined, undefined],\n    },\n  ];\n  if (props.showStallPercentage) {\n    functions.push({\n      kind: 'function',\n      function: ['p75', 'measurements.stall_percentage', undefined, undefined],\n    });\n  } else {\n    // TODO(tonyx): add these by default once the SDKs are ready\n    functions.push({\n      kind: 'function',\n      function: ['p75', 'measurements.frames_slow_rate', undefined, undefined],\n    });\n    functions.push({\n      kind: 'function',\n      function: ['p75', 'measurements.frames_frozen_rate', undefined, undefined],\n    });\n  }\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const MobileCards = _MobileCards;\n\ntype SparklineChartProps = {\n  data: number[];\n};\n\nfunction SparklineChart(props: SparklineChartProps) {\n  const {data} = props;\n  const width = 150;\n  const height = 24;\n  const lineColor = theme.charts.getColorPalette(1)[0];\n  return (\n    <SparklineContainer data-test-id=\"sparkline\" width={width} height={height}>\n      <Sparklines data={data} width={width} height={height}>\n        <SparklinesLine style={{stroke: lineColor, fill: 'none', strokeWidth: 3}} />\n      </Sparklines>\n    </SparklineContainer>\n  );\n}\n\ntype SparklineContainerProps = {\n  width: number;\n  height: number;\n};\n\nconst SparklineContainer = styled('div')<SparklineContainerProps>`\n  flex-grow: 4;\n  max-height: ${p => p.height}px;\n  max-width: ${p => p.width}px;\n  margin: ${space(1)} ${space(0)} ${space(0.5)} ${space(3)};\n`;\n\nconst VitalsContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  }\n`;\n\ntype VitalBarProps = {\n  isLoading: boolean;\n  data: VitalsData | null;\n  vital: WebVital | WebVital[];\n  value?: string;\n  showBar?: boolean;\n  showStates?: boolean;\n  showDurationDetail?: boolean;\n  showVitalPercentNames?: boolean;\n  showDetail?: boolean;\n  showTooltip?: boolean;\n  barHeight?: number;\n};\n\nexport function VitalBar(props: VitalBarProps) {\n  const {\n    isLoading,\n    data,\n    vital,\n    value,\n    showBar = true,\n    showStates = false,\n    showDurationDetail = false,\n    showVitalPercentNames = false,\n    showDetail = true,\n    showTooltip = false,\n    barHeight,\n  } = props;\n\n  if (isLoading) {\n    return showStates ? <Placeholder height=\"48px\" /> : null;\n  }\n\n  const emptyState = showStates ? (\n    <EmptyVitalBar small>{t('No vitals found')}</EmptyVitalBar>\n  ) : null;\n\n  if (!data) {\n    return emptyState;\n  }\n\n  const counts: Pick<VitalData, 'poor' | 'meh' | 'good' | 'total'> = {\n    poor: 0,\n    meh: 0,\n    good: 0,\n    total: 0,\n  };\n  const vitals = Array.isArray(vital) ? vital : [vital];\n  vitals.forEach(vitalName => {\n    const c = data?.[vitalName] ?? {};\n    Object.keys(counts).forEach(countKey => (counts[countKey] += c[countKey]));\n  });\n\n  if (!counts.total) {\n    return emptyState;\n  }\n\n  const p75: React.ReactNode = Array.isArray(vital)\n    ? null\n    : value ?? getP75(data?.[vital] ?? null, vital);\n  const percents = getPercentsFromCounts(counts);\n  const colorStops = getColorStopsFromPercents(percents);\n\n  return (\n    <React.Fragment>\n      {showBar && (\n        <StyledTooltip\n          title={\n            <VitalPercents\n              vital={vital}\n              percents={percents}\n              showVitalPercentNames\n              hideTooltips={showTooltip}\n            />\n          }\n          disabled={!showTooltip}\n          position=\"bottom\"\n        >\n          <ColorBar barHeight={barHeight} colorStops={colorStops} />\n        </StyledTooltip>\n      )}\n      {showDetail && (\n        <BarDetail>\n          {showDurationDetail && p75 && (\n            <div data-test-id=\"vital-bar-p75\">\n              {t('The p75 for all transactions is ')}\n              <strong>{p75}</strong>\n            </div>\n          )}\n\n          <VitalPercents\n            vital={vital}\n            percents={percents}\n            showVitalPercentNames={showVitalPercentNames}\n          />\n        </BarDetail>\n      )}\n    </React.Fragment>\n  );\n}\n\nconst EmptyVitalBar = styled(EmptyStateWarning)`\n  height: 48px;\n  padding: ${space(1.5)} 15%;\n`;\n\ntype VitalCardProps = {\n  title: string;\n  tooltip: string;\n  value: string | number;\n  chart: React.ReactNode;\n  minHeight?: number;\n  horizontal?: boolean;\n  isNotInteractive?: boolean;\n};\n\nfunction VitalCard(props: VitalCardProps) {\n  const {chart, minHeight, horizontal, title, tooltip, value, isNotInteractive} = props;\n  return (\n    <StyledCard interactive={!isNotInteractive} minHeight={minHeight}>\n      <HeaderTitle>\n        <OverflowEllipsis>{t(title)}</OverflowEllipsis>\n        <QuestionTooltip size=\"sm\" position=\"top\" title={tooltip} />\n      </HeaderTitle>\n      <CardContent horizontal={horizontal}>\n        <CardValue>{value}</CardValue>\n        {chart}\n      </CardContent>\n    </StyledCard>\n  );\n}\n\nconst CardContent = styled('div')<{horizontal?: boolean}>`\n  width: 100%;\n  display: flex;\n  flex-direction: ${p => (p.horizontal ? 'row' : 'column')};\n  justify-content: space-between;\n`;\n\nconst StyledCard = styled(Card)<{minHeight?: number}>`\n  color: ${p => p.theme.textColor};\n  padding: ${space(2)} ${space(3)};\n  align-items: flex-start;\n  margin-bottom: ${space(2)};\n  ${p => p.minHeight && `min-height: ${p.minHeight}px`};\n`;\n\nconst StyledTooltip = styled(Tooltip)`\n  width: 100%;\n`;\n\nfunction getP75(data: VitalData | null, vitalName: WebVital): string {\n  const p75 = data?.p75 ?? null;\n  if (p75 === null) {\n    return '\\u2014';\n  }\n  return vitalName === WebVital.CLS ? p75.toFixed(2) : `${p75.toFixed(0)}ms`;\n}\n\ntype Percent = {\n  vitalState: VitalState;\n  percent: number;\n};\n\nfunction getPercentsFromCounts({poor, meh, good, total}) {\n  const poorPercent = poor / total;\n  const mehPercent = meh / total;\n  const goodPercent = good / total;\n\n  const percents: Percent[] = [\n    {\n      vitalState: VitalState.GOOD,\n      percent: goodPercent,\n    },\n    {\n      vitalState: VitalState.MEH,\n      percent: mehPercent,\n    },\n    {\n      vitalState: VitalState.POOR,\n      percent: poorPercent,\n    },\n  ];\n\n  return percents;\n}\n\nfunction getColorStopsFromPercents(percents: Percent[]) {\n  return percents.map(({percent, vitalState}) => ({\n    percent,\n    color: vitalStateColors[vitalState],\n  }));\n}\n\nconst BarDetail = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst CardValue = styled('div')`\n  font-size: 32px;\n  margin-top: ${space(1)};\n`;\n\nconst OverflowEllipsis = styled('div')`\n  ${overflowEllipsis};\n`;\n"],"names":["getRequestPayload","props","eventView","vitals","apiPayload","getEventsAPIPayload","location","vital","pick","Object","values","PERFORMANCE_URL_PARAM","VitalsCardsDiscoverQuery","route","tableData","rest","children","vitalsData","withApi","SparklinesWithCustomPropTypes","Sparklines","PropTypes","data","limit","width","height","svgWidth","svgHeight","preserveAspectRatio","margin","style","min","max","onMouseMove","ColorBar","VitalBar","barHeight","fractions","colorStops","map","percent","colorStop","BarStatus","color","p","theme","gray100","f","join","space","getVitalStateText","vitalState","unit","Array","isArray","WebVital","VitalState","t","tct","threshold","webVitalPoor","webVitalMeh","VitalPercents","VitalSet","percents","pct","title","disabled","hideTooltips","VitalStatus","vitalStateIcons","showVitalPercentNames","formatPercentage","fontSizeMedium","FrontendCards","organization","projects","frontendOnly","getDefaultDisplayFieldForPlatform","LandingDisplayField","orgSlug","slug","isLoading","VitalsContainer","target","vitalDetailRouteWithQuery","query","generateQueryStringObject","vitalName","projectID","decodeList","project","value","getP75","chart","VitalBarContainer","to","vitalAbbreviations","VitalCard","vitalMap","tooltip","WEB_VITAL_DETAILS","description","minHeight","GenericCards","api","useApi","baseEventView","functions","withColumns","globalSelection","getGlobalSelection","start","datetime","getUtcToLocalDateObject","undefined","end","interval","sparkInterval","getInterval","period","referrer","isSummaryLoading","environment","environments","team","includePrevious","yAxis","getFields","partial","results","series","reduce","allSeries","oneSeries","seriesName","item","details","vitalCardDetails","func","fieldName","generateFieldAsString","includes","cardDetail","Sentry","formatter","alias","getAggregateAlias","rawValue","defined","SparklineChart","horizontal","isNotInteractive","_BackendCards","kind","function","BackendCards","_MobileCards","showStallPercentage","push","MobileCards","lineColor","SparklineContainer","SparklinesLine","stroke","fill","strokeWidth","breakpoints","showBar","showStates","showDurationDetail","showDetail","showTooltip","emptyState","EmptyVitalBar","small","counts","poor","meh","good","total","forEach","c","keys","countKey","p75","poorPercent","mehPercent","goodPercent","getPercentsFromCounts","vitalStateColors","getColorStopsFromPercents","StyledTooltip","position","BarDetail","EmptyStateWarning","StyledCard","interactive","OverflowEllipsis","size","CardContent","CardValue","Card","textColor","Tooltip","toFixed","overflowEllipsis"],"sourceRoot":""}