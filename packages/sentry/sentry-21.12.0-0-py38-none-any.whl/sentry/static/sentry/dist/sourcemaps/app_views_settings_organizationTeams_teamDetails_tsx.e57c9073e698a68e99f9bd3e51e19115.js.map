{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/views/settings/organizationTeams/teamDetails.tsx"],"sourcesContent":["import * as React from 'react';\nimport {Link as RouterLink, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport omit from 'lodash/omit';\nimport * as qs from 'query-string';\n\ntype DefaultProps = {\n  index: boolean;\n  activeClassName: string;\n  disabled: boolean;\n};\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = WithRouterProps &\n  Partial<DefaultProps> &\n  LinkProps & {\n    /**\n     * Link target. We don't want to expose the ToLocationFunction on this component.\n     */\n    to: LocationDescriptor;\n    query?: string;\n    // If supplied by parent component, decides whether link element\n    // is \"active\" or not ... overriding default behavior of strict\n    // route matching\n    isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  };\n\nclass ListLink extends React.Component<Props> {\n  static displayName = 'ListLink';\n\n  static defaultProps: DefaultProps = {\n    activeClassName: 'active',\n    index: false,\n    disabled: false,\n  };\n\n  isActive() {\n    const {isActive, to, query, index, router} = this.props;\n    const queryData = query ? qs.parse(query) : undefined;\n    const target: LocationDescriptor =\n      typeof to === 'string' ? {pathname: to, query: queryData} : to;\n\n    if (typeof isActive === 'function') {\n      return isActive(target, index);\n    }\n\n    return router.isActive(target, index);\n  }\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive() && activeClassName) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children, to, disabled, ...props} = this.props;\n    const carriedProps = omit(\n      props,\n      'activeClassName',\n      'css',\n      'isActive',\n      'index',\n      'router',\n      'location'\n    );\n\n    return (\n      <StyledLi className={this.getClassName()} disabled={disabled}>\n        <RouterLink {...carriedProps} onlyActiveOnIndex={index} to={disabled ? '' : to}>\n          {children}\n        </RouterLink>\n      </StyledLi>\n    );\n  }\n}\n\nexport default withRouter(ListLink);\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import * as React from 'react';\n\nimport {Team} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useTeams from 'sentry/utils/useTeams';\n\ntype InjectedTeamsProps = {\n  teams?: Team[];\n};\n\n/**\n * Higher order component that provides a list of teams\n *\n * @deprecated Prefer `useTeams` or `<Teams />`.\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) => {\n  const WithTeams: React.FC<Omit<P, keyof InjectedTeamsProps> & InjectedTeamsProps> =\n    props => {\n      const {teams} = useTeams();\n      return <WrappedComponent teams={teams} {...(props as P)} />;\n    };\n\n  WithTeams.displayName = `withTeams(${getDisplayName(WrappedComponent)})`;\n\n  return WithTeams;\n};\n\nexport default withTeams;\n","import * as React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {fetchTeamDetails, joinTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport ListLink from 'sentry/components/links/listLink';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {Organization, Team} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withTeams from 'sentry/utils/withTeams';\n\ntype Props = {\n  api: Client;\n  teams: Team[];\n  children: React.ReactNode;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  requesting: boolean;\n  team: Team | null;\n};\n\nclass TeamDetails extends React.Component<Props, State> {\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    const team = TeamStore.getBySlug(this.props.params.teamId);\n\n    return {\n      loading: !TeamStore.initialized,\n      error: false,\n      requesting: false,\n      team,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {params} = this.props;\n\n    if (\n      prevProps.params.teamId !== params.teamId ||\n      prevProps.params.orgId !== params.orgId\n    ) {\n      this.fetchData();\n    }\n    if (!isEqual(this.props.teams, prevProps.teams)) {\n      this.setActiveTeam();\n    }\n  }\n\n  setActiveTeam() {\n    const team = TeamStore.getBySlug(this.props.params.teamId);\n    const loading = !TeamStore.initialized;\n    const error = !loading && !team;\n\n    this.setState({team, loading, error});\n  }\n\n  handleRequestAccess = () => {\n    const {api, params} = this.props;\n    const {team} = this.state;\n    if (!team) {\n      return;\n    }\n\n    this.setState({\n      requesting: true,\n    });\n\n    joinTeam(\n      api,\n      {\n        orgId: params.orgId,\n        teamId: team.slug,\n      },\n      {\n        success: () => {\n          addSuccessMessage(\n            tct('You have requested access to [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n          this.setState({\n            requesting: false,\n          });\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to request access to [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n          this.setState({\n            requesting: false,\n          });\n        },\n      }\n    );\n  };\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n    fetchTeamDetails(this.props.api, this.props.params);\n  };\n\n  onTeamChange = (data: Team) => {\n    const team = this.state.team;\n    if (data.slug !== team?.slug) {\n      const orgId = this.props.params.orgId;\n      browserHistory.replace(`/organizations/${orgId}/teams/${data.slug}/settings/`);\n    } else {\n      this.setState({\n        team: {\n          ...team,\n          ...data,\n        },\n      });\n    }\n  };\n\n  render() {\n    const {children, params, routes} = this.props;\n    const {team, loading, requesting, error} = this.state;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (!team || !team.hasAccess) {\n      return (\n        <Alert type=\"warning\">\n          {team ? (\n            <RequestAccessWrapper>\n              {tct('You do not have access to the [teamSlug] team.', {\n                teamSlug: <strong>{`#${team.slug}`}</strong>,\n              })}\n              <Button\n                disabled={requesting || team.isPending}\n                size=\"small\"\n                onClick={this.handleRequestAccess}\n              >\n                {team.isPending ? t('Request Pending') : t('Request Access')}\n              </Button>\n            </RequestAccessWrapper>\n          ) : (\n            <div>{t('You do not have access to this team.')}</div>\n          )}\n        </Alert>\n      );\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    // `/organizations/${orgId}/teams/${teamId}`;\n    const routePrefix = recreateRoute('', {routes, params, stepBack: -1});\n\n    const navigationTabs = [\n      <ListLink key={0} to={`${routePrefix}members/`}>\n        {t('Members')}\n      </ListLink>,\n      <ListLink key={1} to={`${routePrefix}projects/`}>\n        {t('Projects')}\n      </ListLink>,\n      <ListLink key={2} to={`${routePrefix}notifications/`}>\n        {t('Notifications')}\n      </ListLink>,\n      <ListLink key={3} to={`${routePrefix}settings/`}>\n        {t('Settings')}\n      </ListLink>,\n    ];\n\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Team Details')} orgSlug={params.orgId} />\n        <h3>\n          <IdBadge hideAvatar team={team} avatarSize={36} />\n        </h3>\n\n        <NavTabs underlined>{navigationTabs}</NavTabs>\n\n        {React.isValidElement(children) &&\n          React.cloneElement(children, {\n            team,\n            onTeamChange: this.onTeamChange,\n          })}\n      </div>\n    );\n  }\n}\n\n// TODO(davidenwang): change to functional component and replace withTeams with useTeams\nexport default withApi(withOrganization(withTeams(TeamDetails)));\n\nconst RequestAccessWrapper = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n"],"names":["ListLink","React","_classNames","className","activeClassName","this","props","isActive","classNames","to","query","index","router","queryData","qs","undefined","target","pathname","render","children","disabled","carriedProps","omit","StyledLi","getClassName","onlyActiveOnIndex","withRouter","shouldForwardProp","prop","p","theme","recreateRoute","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","WrappedComponent","WithTeams","teams","useTeams","displayName","getDisplayName","TeamDetails","getInitialState","api","team","state","setState","requesting","joinTeam","orgId","teamId","slug","success","addSuccessMessage","tct","error","addErrorMessage","loading","fetchTeamDetails","data","browserHistory","TeamStore","componentDidUpdate","prevProps","fetchData","isEqual","setActiveTeam","hasAccess","type","RequestAccessWrapper","teamSlug","isPending","size","onClick","handleRequestAccess","t","onRetry","routePrefix","navigationTabs","title","orgSlug","hideAvatar","avatarSize","underlined","onTeamChange","withApi","withOrganization","withTeams"],"sourceRoot":""}