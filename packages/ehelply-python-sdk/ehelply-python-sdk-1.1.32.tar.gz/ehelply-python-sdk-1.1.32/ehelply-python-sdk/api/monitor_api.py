"""
    eHelply SDK

    eHelply SDK  # noqa: E501

    The version of the OpenAPI document: 1.1.32
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ehelply-python-sdk.api_client import ApiClient, Endpoint as _Endpoint
from ehelply-python-sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ehelply-python-sdk.model.body_ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post import BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost
from ehelply-python-sdk.model.body_assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post import BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost
from ehelply-python-sdk.model.body_attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post import BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost
from ehelply-python-sdk.model.body_attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post import BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost
from ehelply-python-sdk.model.body_ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post import BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost
from ehelply-python-sdk.model.body_register_service_monitor_services_post import BodyRegisterServiceMonitorServicesPost
from ehelply-python-sdk.model.body_terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post import BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost
from ehelply-python-sdk.model.body_trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post import BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost
from ehelply-python-sdk.model.http_validation_error import HTTPValidationError


class MonitorApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/acknowledge',
                'operation_id': 'ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'alarm_uuid':
                        (str,),
                    'body_ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post':
                        (BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'alarm_uuid': 'alarm_uuid',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'alarm_uuid': 'path',
                    'body_ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/assign',
                'operation_id': 'assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'alarm_uuid':
                        (str,),
                    'body_assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post':
                        (BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'alarm_uuid': 'alarm_uuid',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'alarm_uuid': 'path',
                    'body_assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/note',
                'operation_id': 'attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'alarm_uuid':
                        (str,),
                    'body_attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post':
                        (BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'alarm_uuid': 'alarm_uuid',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'alarm_uuid': 'path',
                    'body_attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/ticket',
                'operation_id': 'attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'alarm_uuid':
                        (str,),
                    'body_attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post':
                        (BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'alarm_uuid': 'alarm_uuid',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'alarm_uuid': 'path',
                    'body_attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.clear_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_clear_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/clear',
                'operation_id': 'clear_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_clear_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'alarm_uuid':
                        (str,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'alarm_uuid': 'alarm_uuid',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'alarm_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_service_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}',
                'operation_id': 'get_service_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'alarm_uuid':
                        (str,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'alarm_uuid': 'alarm_uuid',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'alarm_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_service_alarms_monitor_services_service_uuid_stages_stage_alarms_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/alarms',
                'operation_id': 'get_service_alarms_monitor_services_service_uuid_stages_stage_alarms_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'history',
                    'include_terminated',
                    'include_cleared',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'history':
                        (int,),
                    'include_terminated':
                        (bool,),
                    'include_cleared':
                        (bool,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'history': 'history',
                    'include_terminated': 'include_terminated',
                    'include_cleared': 'include_cleared',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'history': 'query',
                    'include_terminated': 'query',
                    'include_cleared': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_service_heartbeats_monitor_services_service_uuid_stages_stage_heartbeats_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/heartbeats',
                'operation_id': 'get_service_heartbeats_monitor_services_service_uuid_stages_stage_heartbeats_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'history',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'history':
                        (int,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'history': 'history',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'history': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_service_kpis_monitor_services_service_uuid_kpis_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/kpis',
                'operation_id': 'get_service_kpis_monitor_services_service_uuid_kpis_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'history',
                ],
                'required': [
                    'service_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'history':
                        (int,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'history': 'history',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'history': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_service_monitor_services_service_uuid_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}',
                'operation_id': 'get_service_monitor_services_service_uuid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'heartbeats',
                    'heartbeat_limit',
                    'alarms',
                    'alarm_limit',
                    'stage',
                ],
                'required': [
                    'service_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'heartbeats':
                        (bool,),
                    'heartbeat_limit':
                        (int,),
                    'alarms':
                        (bool,),
                    'alarm_limit':
                        (int,),
                    'stage':
                        (str,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'heartbeats': 'heartbeats',
                    'heartbeat_limit': 'heartbeat_limit',
                    'alarms': 'alarms',
                    'alarm_limit': 'alarm_limit',
                    'stage': 'stage',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'heartbeats': 'query',
                    'heartbeat_limit': 'query',
                    'alarms': 'query',
                    'alarm_limit': 'query',
                    'stage': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_service_vitals_monitor_services_service_uuid_stages_stage_vitals_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/vitals',
                'operation_id': 'get_service_vitals_monitor_services_service_uuid_stages_stage_vitals_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'history',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'history':
                        (int,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'history': 'history',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'history': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_services_monitor_services_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services',
                'operation_id': 'get_services_monitor_services_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'heartbeats',
                    'heartbeat_limit',
                    'alarms',
                    'alarm_limit',
                    'include_hidden',
                    'stage',
                    'key',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'heartbeats':
                        (bool,),
                    'heartbeat_limit':
                        (int,),
                    'alarms':
                        (bool,),
                    'alarm_limit':
                        (int,),
                    'include_hidden':
                        (bool,),
                    'stage':
                        (str,),
                    'key':
                        (str,),
                },
                'attribute_map': {
                    'heartbeats': 'heartbeats',
                    'heartbeat_limit': 'heartbeat_limit',
                    'alarms': 'alarms',
                    'alarm_limit': 'alarm_limit',
                    'include_hidden': 'include_hidden',
                    'stage': 'stage',
                    'key': 'key',
                },
                'location_map': {
                    'heartbeats': 'query',
                    'heartbeat_limit': 'query',
                    'alarms': 'query',
                    'alarm_limit': 'query',
                    'include_hidden': 'query',
                    'stage': 'query',
                    'key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.hide_service_monitor_services_service_uuid_stages_stage_hide_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/hide',
                'operation_id': 'hide_service_monitor_services_service_uuid_stages_stage_hide_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/ignore',
                'operation_id': 'ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'alarm_uuid':
                        (str,),
                    'body_ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post':
                        (BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'alarm_uuid': 'alarm_uuid',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'alarm_uuid': 'path',
                    'body_ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.register_service_monitor_services_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services',
                'operation_id': 'register_service_monitor_services_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body_register_service_monitor_services_post',
                ],
                'required': [
                    'body_register_service_monitor_services_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body_register_service_monitor_services_post':
                        (BodyRegisterServiceMonitorServicesPost,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body_register_service_monitor_services_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.search_alarms_monitor_services_service_uuid_alarms_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/alarms',
                'operation_id': 'search_alarms_monitor_services_service_uuid_alarms_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'page',
                    'page_size',
                    'search',
                    'search_on',
                    'sort_on',
                    'sort_desc',
                ],
                'required': [
                    'service_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'search':
                        (str,),
                    'search_on':
                        (str,),
                    'sort_on':
                        (str,),
                    'sort_desc':
                        (bool,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'page': 'page',
                    'page_size': 'page_size',
                    'search': 'search',
                    'search_on': 'search_on',
                    'sort_on': 'sort_on',
                    'sort_desc': 'sort_desc',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'page': 'query',
                    'page_size': 'query',
                    'search': 'query',
                    'search_on': 'query',
                    'sort_on': 'query',
                    'sort_desc': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.show_service_monitor_services_service_uuid_stages_stage_show_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/show',
                'operation_id': 'show_service_monitor_services_service_uuid_stages_stage_show_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/terminate',
                'operation_id': 'terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                    'alarm_uuid',
                    'body_terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'alarm_uuid':
                        (str,),
                    'body_terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post':
                        (BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                    'alarm_uuid': 'alarm_uuid',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'alarm_uuid': 'path',
                    'body_terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/monitor/services/{service_uuid}/stages/{stage}/alarms',
                'operation_id': 'trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_uuid',
                    'stage',
                    'body_trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post',
                ],
                'required': [
                    'service_uuid',
                    'stage',
                    'body_trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_uuid':
                        (str,),
                    'stage':
                        (str,),
                    'body_trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post':
                        (BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost,),
                },
                'attribute_map': {
                    'service_uuid': 'service_uuid',
                    'stage': 'stage',
                },
                'location_map': {
                    'service_uuid': 'path',
                    'stage': 'path',
                    'body_trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post(
        self,
        service_uuid,
        stage,
        alarm_uuid,
        body_ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post,
        **kwargs
    ):
        """Ack Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post(service_uuid, stage, alarm_uuid, body_ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):
            alarm_uuid (str):
            body_ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post (BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        kwargs['alarm_uuid'] = \
            alarm_uuid
        kwargs['body_ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post'] = \
            body_ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post
        return self.ack_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_acknowledge_post_endpoint.call_with_http_info(**kwargs)

    def assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post(
        self,
        service_uuid,
        stage,
        alarm_uuid,
        body_assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post,
        **kwargs
    ):
        """Assign Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post(service_uuid, stage, alarm_uuid, body_assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):
            alarm_uuid (str):
            body_assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post (BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        kwargs['alarm_uuid'] = \
            alarm_uuid
        kwargs['body_assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post'] = \
            body_assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post
        return self.assign_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_assign_post_endpoint.call_with_http_info(**kwargs)

    def attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post(
        self,
        service_uuid,
        stage,
        alarm_uuid,
        body_attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post,
        **kwargs
    ):
        """Attach Alarm Note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post(service_uuid, stage, alarm_uuid, body_attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):
            alarm_uuid (str):
            body_attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post (BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        kwargs['alarm_uuid'] = \
            alarm_uuid
        kwargs['body_attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post'] = \
            body_attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post
        return self.attach_alarm_note_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_note_post_endpoint.call_with_http_info(**kwargs)

    def attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post(
        self,
        service_uuid,
        stage,
        alarm_uuid,
        body_attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post,
        **kwargs
    ):
        """Attach Alarm Ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post(service_uuid, stage, alarm_uuid, body_attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):
            alarm_uuid (str):
            body_attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post (BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        kwargs['alarm_uuid'] = \
            alarm_uuid
        kwargs['body_attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post'] = \
            body_attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post
        return self.attach_alarm_ticket_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ticket_post_endpoint.call_with_http_info(**kwargs)

    def clear_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_clear_post(
        self,
        service_uuid,
        stage,
        alarm_uuid,
        **kwargs
    ):
        """Clear Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clear_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_clear_post(service_uuid, stage, alarm_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):
            alarm_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        kwargs['alarm_uuid'] = \
            alarm_uuid
        return self.clear_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_clear_post_endpoint.call_with_http_info(**kwargs)

    def get_service_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_get(
        self,
        service_uuid,
        stage,
        alarm_uuid,
        **kwargs
    ):
        """Get Service Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_get(service_uuid, stage, alarm_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):
            alarm_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        kwargs['alarm_uuid'] = \
            alarm_uuid
        return self.get_service_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_get_endpoint.call_with_http_info(**kwargs)

    def get_service_alarms_monitor_services_service_uuid_stages_stage_alarms_get(
        self,
        service_uuid,
        stage,
        **kwargs
    ):
        """Get Service Alarms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service_alarms_monitor_services_service_uuid_stages_stage_alarms_get(service_uuid, stage, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):

        Keyword Args:
            history (int): [optional] if omitted the server will use the default value of 5
            include_terminated (bool): [optional] if omitted the server will use the default value of False
            include_cleared (bool): [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        return self.get_service_alarms_monitor_services_service_uuid_stages_stage_alarms_get_endpoint.call_with_http_info(**kwargs)

    def get_service_heartbeats_monitor_services_service_uuid_stages_stage_heartbeats_get(
        self,
        service_uuid,
        stage,
        **kwargs
    ):
        """Get Service Heartbeats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service_heartbeats_monitor_services_service_uuid_stages_stage_heartbeats_get(service_uuid, stage, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):

        Keyword Args:
            history (int): [optional] if omitted the server will use the default value of 5
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        return self.get_service_heartbeats_monitor_services_service_uuid_stages_stage_heartbeats_get_endpoint.call_with_http_info(**kwargs)

    def get_service_kpis_monitor_services_service_uuid_kpis_get(
        self,
        service_uuid,
        **kwargs
    ):
        """Get Service Kpis  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service_kpis_monitor_services_service_uuid_kpis_get(service_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):

        Keyword Args:
            history (int): [optional] if omitted the server will use the default value of 5
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        return self.get_service_kpis_monitor_services_service_uuid_kpis_get_endpoint.call_with_http_info(**kwargs)

    def get_service_monitor_services_service_uuid_get(
        self,
        service_uuid,
        **kwargs
    ):
        """Get Service  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service_monitor_services_service_uuid_get(service_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):

        Keyword Args:
            heartbeats (bool): [optional] if omitted the server will use the default value of False
            heartbeat_limit (int): [optional] if omitted the server will use the default value of 5
            alarms (bool): [optional] if omitted the server will use the default value of False
            alarm_limit (int): [optional] if omitted the server will use the default value of 5
            stage (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        return self.get_service_monitor_services_service_uuid_get_endpoint.call_with_http_info(**kwargs)

    def get_service_vitals_monitor_services_service_uuid_stages_stage_vitals_get(
        self,
        service_uuid,
        stage,
        **kwargs
    ):
        """Get Service Vitals  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service_vitals_monitor_services_service_uuid_stages_stage_vitals_get(service_uuid, stage, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):

        Keyword Args:
            history (int): [optional] if omitted the server will use the default value of 5
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        return self.get_service_vitals_monitor_services_service_uuid_stages_stage_vitals_get_endpoint.call_with_http_info(**kwargs)

    def get_services_monitor_services_get(
        self,
        **kwargs
    ):
        """Get Services  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_services_monitor_services_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            heartbeats (bool): [optional] if omitted the server will use the default value of False
            heartbeat_limit (int): [optional] if omitted the server will use the default value of 5
            alarms (bool): [optional] if omitted the server will use the default value of False
            alarm_limit (int): [optional] if omitted the server will use the default value of 5
            include_hidden (bool): [optional] if omitted the server will use the default value of False
            stage (str): [optional]
            key (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_services_monitor_services_get_endpoint.call_with_http_info(**kwargs)

    def hide_service_monitor_services_service_uuid_stages_stage_hide_post(
        self,
        service_uuid,
        stage,
        **kwargs
    ):
        """Hide Service  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.hide_service_monitor_services_service_uuid_stages_stage_hide_post(service_uuid, stage, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        return self.hide_service_monitor_services_service_uuid_stages_stage_hide_post_endpoint.call_with_http_info(**kwargs)

    def ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post(
        self,
        service_uuid,
        stage,
        alarm_uuid,
        body_ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post,
        **kwargs
    ):
        """Ignore Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post(service_uuid, stage, alarm_uuid, body_ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):
            alarm_uuid (str):
            body_ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post (BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        kwargs['alarm_uuid'] = \
            alarm_uuid
        kwargs['body_ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post'] = \
            body_ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post
        return self.ignore_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_ignore_post_endpoint.call_with_http_info(**kwargs)

    def register_service_monitor_services_post(
        self,
        body_register_service_monitor_services_post,
        **kwargs
    ):
        """Register Service  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.register_service_monitor_services_post(body_register_service_monitor_services_post, async_req=True)
        >>> result = thread.get()

        Args:
            body_register_service_monitor_services_post (BodyRegisterServiceMonitorServicesPost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body_register_service_monitor_services_post'] = \
            body_register_service_monitor_services_post
        return self.register_service_monitor_services_post_endpoint.call_with_http_info(**kwargs)

    def search_alarms_monitor_services_service_uuid_alarms_get(
        self,
        service_uuid,
        **kwargs
    ):
        """Search Alarms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_alarms_monitor_services_service_uuid_alarms_get(service_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):

        Keyword Args:
            page (int): [optional] if omitted the server will use the default value of 1
            page_size (int): [optional] if omitted the server will use the default value of 25
            search (str): [optional]
            search_on (str): [optional]
            sort_on (str): [optional]
            sort_desc (bool): [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        return self.search_alarms_monitor_services_service_uuid_alarms_get_endpoint.call_with_http_info(**kwargs)

    def show_service_monitor_services_service_uuid_stages_stage_show_post(
        self,
        service_uuid,
        stage,
        **kwargs
    ):
        """Show Service  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.show_service_monitor_services_service_uuid_stages_stage_show_post(service_uuid, stage, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        return self.show_service_monitor_services_service_uuid_stages_stage_show_post_endpoint.call_with_http_info(**kwargs)

    def terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post(
        self,
        service_uuid,
        stage,
        alarm_uuid,
        body_terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post,
        **kwargs
    ):
        """Terminate Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post(service_uuid, stage, alarm_uuid, body_terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):
            alarm_uuid (str):
            body_terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post (BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        kwargs['alarm_uuid'] = \
            alarm_uuid
        kwargs['body_terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post'] = \
            body_terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post
        return self.terminate_alarm_monitor_services_service_uuid_stages_stage_alarms_alarm_uuid_terminate_post_endpoint.call_with_http_info(**kwargs)

    def trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post(
        self,
        service_uuid,
        stage,
        body_trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post,
        **kwargs
    ):
        """Trigger Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post(service_uuid, stage, body_trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post, async_req=True)
        >>> result = thread.get()

        Args:
            service_uuid (str):
            stage (str):
            body_trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post (BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_uuid'] = \
            service_uuid
        kwargs['stage'] = \
            stage
        kwargs['body_trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post'] = \
            body_trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post
        return self.trigger_alarm_monitor_services_service_uuid_stages_stage_alarms_post_endpoint.call_with_http_info(**kwargs)

