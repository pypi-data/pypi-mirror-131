"""
    eHelply SDK

    eHelply SDK  # noqa: E501

    The version of the OpenAPI document: 1.1.32
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ehelply-python-sdk.api_client import ApiClient, Endpoint as _Endpoint
from ehelply-python-sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ehelply-python-sdk.model.body_create_key_security_keys_post import BodyCreateKeySecurityKeysPost
from ehelply-python-sdk.model.body_generate_token_security_tokens_post import BodyGenerateTokenSecurityTokensPost
from ehelply-python-sdk.model.body_verify_key_security_keys_verify_post import BodyVerifyKeySecurityKeysVerifyPost
from ehelply-python-sdk.model.http_validation_error import HTTPValidationError
from ehelply-python-sdk.model.security_encryption_key_get import SecurityEncryptionKeyGet
from ehelply-python-sdk.model.security_key_get import SecurityKeyGet


class SecurityApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_encryption_key_security_encryption_categories_category_keys_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/security/encryption/categories/{category}/keys',
                'operation_id': 'create_encryption_key_security_encryption_categories_category_keys_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'category',
                    'ehelply_security_secret_key',
                ],
                'required': [
                    'category',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'category':
                        (str,),
                    'ehelply_security_secret_key':
                        (str,),
                },
                'attribute_map': {
                    'category': 'category',
                    'ehelply_security_secret_key': 'ehelply-security-secret-key',
                },
                'location_map': {
                    'category': 'path',
                    'ehelply_security_secret_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_key_security_keys_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/security/keys',
                'operation_id': 'create_key_security_keys_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body_create_key_security_keys_post',
                    'access_length',
                    'secret_length',
                ],
                'required': [
                    'body_create_key_security_keys_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body_create_key_security_keys_post':
                        (BodyCreateKeySecurityKeysPost,),
                    'access_length':
                        (int,),
                    'secret_length':
                        (int,),
                },
                'attribute_map': {
                    'access_length': 'access_length',
                    'secret_length': 'secret_length',
                },
                'location_map': {
                    'body_create_key_security_keys_post': 'body',
                    'access_length': 'query',
                    'secret_length': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_key_security_keys_key_uuid_delete_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/security/keys/{key_uuid}',
                'operation_id': 'delete_key_security_keys_key_uuid_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'key_uuid',
                ],
                'required': [
                    'key_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'key_uuid':
                        (str,),
                },
                'attribute_map': {
                    'key_uuid': 'key_uuid',
                },
                'location_map': {
                    'key_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.generate_token_security_tokens_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/sam/security/tokens',
                'operation_id': 'generate_token_security_tokens_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body_generate_token_security_tokens_post',
                ],
                'required': [
                    'body_generate_token_security_tokens_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body_generate_token_security_tokens_post':
                        (BodyGenerateTokenSecurityTokensPost,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body_generate_token_security_tokens_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_encryption_key_security_encryption_categories_category_keys_get_endpoint = _Endpoint(
            settings={
                'response_type': ([SecurityEncryptionKeyGet],),
                'auth': [],
                'endpoint_path': '/sam/security/encryption/categories/{category}/keys',
                'operation_id': 'get_encryption_key_security_encryption_categories_category_keys_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'category',
                    'ehelply_security_secret_key',
                ],
                'required': [
                    'category',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'category':
                        (str,),
                    'ehelply_security_secret_key':
                        (str,),
                },
                'attribute_map': {
                    'category': 'category',
                    'ehelply_security_secret_key': 'ehelply-security-secret-key',
                },
                'location_map': {
                    'category': 'path',
                    'ehelply_security_secret_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_key_security_keys_key_uuid_get_endpoint = _Endpoint(
            settings={
                'response_type': (SecurityKeyGet,),
                'auth': [],
                'endpoint_path': '/sam/security/keys/{key_uuid}',
                'operation_id': 'get_key_security_keys_key_uuid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'key_uuid',
                ],
                'required': [
                    'key_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'key_uuid':
                        (str,),
                },
                'attribute_map': {
                    'key_uuid': 'key_uuid',
                },
                'location_map': {
                    'key_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_keys_security_keys_get_endpoint = _Endpoint(
            settings={
                'response_type': ([SecurityKeyGet],),
                'auth': [],
                'endpoint_path': '/sam/security/keys',
                'operation_id': 'search_keys_security_keys_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.verify_key_security_keys_verify_post_endpoint = _Endpoint(
            settings={
                'response_type': (SecurityKeyGet,),
                'auth': [],
                'endpoint_path': '/sam/security/keys/verify',
                'operation_id': 'verify_key_security_keys_verify_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body_verify_key_security_keys_verify_post',
                ],
                'required': [
                    'body_verify_key_security_keys_verify_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body_verify_key_security_keys_verify_post':
                        (BodyVerifyKeySecurityKeysVerifyPost,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body_verify_key_security_keys_verify_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_encryption_key_security_encryption_categories_category_keys_post(
        self,
        category,
        **kwargs
    ):
        """Create Encryption Key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_encryption_key_security_encryption_categories_category_keys_post(category, async_req=True)
        >>> result = thread.get()

        Args:
            category (str):

        Keyword Args:
            ehelply_security_secret_key (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['category'] = \
            category
        return self.create_encryption_key_security_encryption_categories_category_keys_post_endpoint.call_with_http_info(**kwargs)

    def create_key_security_keys_post(
        self,
        body_create_key_security_keys_post,
        **kwargs
    ):
        """Create Key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_key_security_keys_post(body_create_key_security_keys_post, async_req=True)
        >>> result = thread.get()

        Args:
            body_create_key_security_keys_post (BodyCreateKeySecurityKeysPost):

        Keyword Args:
            access_length (int): [optional] if omitted the server will use the default value of 64
            secret_length (int): [optional] if omitted the server will use the default value of 64
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body_create_key_security_keys_post'] = \
            body_create_key_security_keys_post
        return self.create_key_security_keys_post_endpoint.call_with_http_info(**kwargs)

    def delete_key_security_keys_key_uuid_delete(
        self,
        key_uuid,
        **kwargs
    ):
        """Delete Key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_key_security_keys_key_uuid_delete(key_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            key_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['key_uuid'] = \
            key_uuid
        return self.delete_key_security_keys_key_uuid_delete_endpoint.call_with_http_info(**kwargs)

    def generate_token_security_tokens_post(
        self,
        body_generate_token_security_tokens_post,
        **kwargs
    ):
        """Generate Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_token_security_tokens_post(body_generate_token_security_tokens_post, async_req=True)
        >>> result = thread.get()

        Args:
            body_generate_token_security_tokens_post (BodyGenerateTokenSecurityTokensPost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body_generate_token_security_tokens_post'] = \
            body_generate_token_security_tokens_post
        return self.generate_token_security_tokens_post_endpoint.call_with_http_info(**kwargs)

    def get_encryption_key_security_encryption_categories_category_keys_get(
        self,
        category,
        **kwargs
    ):
        """Get Encryption Key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_encryption_key_security_encryption_categories_category_keys_get(category, async_req=True)
        >>> result = thread.get()

        Args:
            category (str):

        Keyword Args:
            ehelply_security_secret_key (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [SecurityEncryptionKeyGet]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['category'] = \
            category
        return self.get_encryption_key_security_encryption_categories_category_keys_get_endpoint.call_with_http_info(**kwargs)

    def get_key_security_keys_key_uuid_get(
        self,
        key_uuid,
        **kwargs
    ):
        """Get Key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_key_security_keys_key_uuid_get(key_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            key_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SecurityKeyGet
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['key_uuid'] = \
            key_uuid
        return self.get_key_security_keys_key_uuid_get_endpoint.call_with_http_info(**kwargs)

    def search_keys_security_keys_get(
        self,
        **kwargs
    ):
        """Search Keys  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_keys_security_keys_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [SecurityKeyGet]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.search_keys_security_keys_get_endpoint.call_with_http_info(**kwargs)

    def verify_key_security_keys_verify_post(
        self,
        body_verify_key_security_keys_verify_post,
        **kwargs
    ):
        """Verify Key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.verify_key_security_keys_verify_post(body_verify_key_security_keys_verify_post, async_req=True)
        >>> result = thread.get()

        Args:
            body_verify_key_security_keys_verify_post (BodyVerifyKeySecurityKeysVerifyPost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SecurityKeyGet
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body_verify_key_security_keys_verify_post'] = \
            body_verify_key_security_keys_verify_post
        return self.verify_key_security_keys_verify_post_endpoint.call_with_http_info(**kwargs)

