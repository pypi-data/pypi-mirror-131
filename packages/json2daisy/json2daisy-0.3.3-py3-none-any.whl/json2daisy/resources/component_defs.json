{
	"UserLed": {
		"map_init": "",
		"typename": "",
		"direction": "out",
		"mapping": [
			{
				"name": "{name}",
				"set": "{class_name}.som.SetLed({value});"
			}
		]
	},
	"Switch": {
		"map_init": "{name}.Init(som.GetPin({pin}), som.AudioCallbackRate(), {type}, {polarity}, {pull});",
		"typename": "daisy::Switch",
		"direction": "in",
		"pin": "a",
		"type": "daisy::Switch::TYPE_MOMENTARY",
		"polarity": "daisy::Switch::POLARITY_INVERTED",
		"pull": "daisy::Switch::PULL_UP",
		"process": "{name}.Debounce();",
		"updaterate": "{name}.SetUpdateRate(som.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}_press",
				"get": "({class_name}.{name}.Pressed()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": false
			},
			{
				"name": "{name}",
				"get": "({class_name}.{name}.RisingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_fall",
				"get": "({class_name}.{name}.FallingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_seconds",
				"get": "({class_name}.{name}.TimeHeldMs()*0.001f)",
				"range": null,
				"bool": false
			}
		]
	},
	"Switch3": {
		"map_init": "{name}.Init(som.GetPin({pin_a}), som.GetPin({pin_b}));",
		"typename": "daisy::Switch3",
		"direction": "in",
		"pin": "a,b",
		"mapping": [
			{
				"name": "{name}",
				"get": "({class_name}.{name}.Read()*0.5f+0.5f)",
				"range": [
					0,
					2
				],
				"bool": false
			}
		]
	},
	"Encoder": {
		"map_init": "{name}.Init(som.GetPin({pin_a}), som.GetPin({pin_b}), som.GetPin({pin_click}), som.AudioCallbackRate());",
		"typename": "daisy::Encoder",
		"direction": "in",
		"pin": "a,b,click",
		"process": "{name}.Debounce();",
		"updaterate": "{name}.SetUpdateRate(som.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}",
				"get": "({class_name}.{name}.Increment())",
				"range": [
					-1,
					1
				],
				"bool": false
			},
			{
				"name": "{name}_press",
				"get": "({class_name}.{name}.Pressed()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": false
			},
			{
				"name": "{name}_rise",
				"get": "({class_name}.{name}.RisingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_fall",
				"get": "({class_name}.{name}.FallingEdge()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			},
			{
				"name": "{name}_seconds",
				"get": "({class_name}.{name}.TimeHeldMs()*0.001f)",
				"range": null,
				"bool": false
			}
		]
	},
	"GateIn": {
		"map_init": "dsy_gpio_pin {name}_pin = som.GetPin({pin});\n    {name}.Init(&{name}_pin);",
		"typename": "daisy::GateIn",
		"direction": "in",
		"pin": "a",
		"mapping": [
			{
				"name": "{name}",
				"get": "({class_name}.{name}.State()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": false
			},
			{
				"name": "{name}_trig",
				"get": "({class_name}.{name}.Trig()?1.f:0.f)",
				"range": [
					0,
					1
				],
				"bool": true
			}
		]
	},
	"AnalogControl": {
		"init_single": "cfg[{i}].InitSingle(som.GetPin({pin}));",
		"map_init": "{name}.Init(som.adc.GetPtr({i}), som.AudioCallbackRate(), {flip}, {invert});",
		"typename": "daisy::AnalogControl",
		"direction": "in",
		"pin": "a",
		"flip": "false",
		"invert": "false",
		"slew": "1.0/som.AudioCallbackRate()",
		"process": "{name}.Process();",
		"updaterate": "{name}.SetSampleRate(som.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}",
				"get": "({class_name}.{name}.Value())",
				"range": [
					0,
					1
				],
				"bool": false
			}
		]
	},
	"Led": {
		"map_init": "{name}.Init(som.GetPin({pin}), {invert});\n    {name}.Set(0.0f);",
		"typename": "daisy::Led",
		"direction": "out",
		"pin": "a",
		"invert": "true",
		"postprocess": "{name}.Update();",
		"mapping": [
			{
				"name": "{name}",
				"set": "{class_name}.{name}.Set({value});"
			}
		]
	},
	"RgbLed": {
		"map_init": "{name}.Init(som.GetPin({pin_r}), som.GetPin({pin_g}), som.GetPin({pin_b}), {invert});\n    {name}.Set(0.0f, 0.0f, 0.0f);",
		"typename": "daisy::RgbLed",
		"direction": "out",
		"pin": "r,g,b",
		"invert": "true",
		"postprocess": "{name}.Update();",
		"mapping": [
			{
				"name": "{name}_red",
				"set": "{class_name}.{name}.SetRed({value});"
			},
			{
				"name": "{name}_green",
				"set": "{class_name}.{name}.SetGreen({value});"
			},
			{
				"name": "{name}_blue",
				"set": "{class_name}.{name}.SetBlue({value});"
			},
			{
				"name": "{name}",
				"set": "{class_name}.{name}.Set(clamp(-{value}, 0.f, 1.f), 0.f, clamp({value}, 0.f, 1.f));"
			},
			{
				"name": "{name}_white",
				"set": "{class_name}.{name}.Set({value},{value},{value});"
			}
		]
	},
	"GateOut": {
		"map_init": "{name}.pin  = som.GetPin({pin});\n    {name}.mode = {mode};\n    {name}.pull = {pull};\n    dsy_gpio_init(&{name});",
		"typename": "dsy_gpio",
		"direction": "out",
		"pin": "a",
		"mode": "DSY_GPIO_MODE_OUTPUT_PP",
		"pull": "DSY_GPIO_NOPULL",
		"mapping": [
			{
				"name": "{name}",
				"set": "dsy_gpio_write(&{class_name}.{name}, {value});"
			}
		]
	},
	"CVOuts": {
		"map_init": "{name}.bitdepth = {bitdepth};\n    {name}.buff_state = {buff_state};\n    {name}.mode = {mode};\n    {name}.chn = {channel};\n    som.dac.Init({name});\n    som.dac.WriteValue({channel}, 0);",
		"typename": "daisy::DacHandle::Config",
		"direction": "out",
		"pin": "",
		"bitdepth": "daisy::DacHandle::BitDepth::BITS_12",
		"buff_state": "daisy::DacHandle::BufferState::ENABLED",
		"mode": "daisy::DacHandle::Mode::POLLING",
		"channel": "daisy::DacHandle::Channel::BOTH",
		"mapping": [
			{
				"name": "{name}1",
				"set": "{class_name}.som.dac.WriteValue(daisy::DacHandle::Channel::ONE, {value} * 4095);",
				"where": "main"
			},
			{
				"name": "{name}2",
				"set": "{class_name}.som.dac.WriteValue(daisy::DacHandle::Channel::TWO, {value} * 4095);",
				"where": "main"
			}
		]
	},
	"i2c": {
		"map_init": "{name}.Init({{{peripheral}, {{som.GetPin({pin_scl}), som.GetPin({pin_sda})}}, {speed}, {mode}}});",
		"typename": "daisy::I2CHandle",
		"pin": "scl,sda",
		"peripheral": "daisy::I2CHandle::Config::Peripheral::I2C_1",
		"speed": "daisy::I2CHandle::Config::Speed::I2C_1MHZ",
		"mode": "daisy::I2CHandle::Config::Mode::I2C_MASTER",
		"mapping": []
	},
	"PCA9685": {
		"map_init": "{name}.Init({parent}, {address}, {name}_dma_buffer_a, {name}_dma_buffer_b);",
		"typename": "daisy::LedDriverPca9685<{driver_count}, true>",
		"non_class_decl": "daisy::LedDriverPca9685<{driver_count}, true>::DmaBuffer DMA_BUFFER_MEM_SECTION {name}_dma_buffer_a, {name}_dma_buffer_b;",
		"driver_count": 1,
		"address": "{0x00}",
		"parent": "",
		"pin": "",
		"loopprocess": "{name}.SwapBuffersAndTransmit();",
		"mapping": []
	},
	"PCA9685Led": {
		"map_init": "",
		"pin": "",
		"typename": "",
		"parent": "",
		"direction": "out",
		"index": 0,
		"mapping": [
			{
				"name": "{name}",
				"set": "{class_name}.{parent}.SetLed({index}, {value});"
			}
		]
	},
	"PCA9685RgbLed": {
		"map_init": "",
		"typename": "",
		"direction": "out",
		"parent": "",
		"pin": "",
		"index": {
			"red": 0,
			"green": 1,
			"blue": 2
		},
		"mapping": [
			{
				"name": "{name}_red",
				"set": "{class_name}.{parent}.SetLed({index_red}, {value});"
			},
			{
				"name": "{name}_green",
				"set": "{class_name}.{parent}.SetLed({index_green}, {value});"
			},
			{
				"name": "{name}_blue",
				"set": "{class_name}.{parent}.SetLed({index_blue}, {value});"
			},
			{
				"name": "{name}",
				"set": "{class_name}.{parent}.SetLed({index_red}, {value});\n    {class_name}.{parent}.SetLed({index_green}, {value});\n    {class_name}.{parent}.SetLed({index_blue}, {value});"
			},
			{
				"name": "{name}_white",
				"set": "{class_name}.{parent}.SetLed({index_red}, {value});\n    {class_name}.{parent}.SetLed({index_green}, {value});\n    {class_name}.{parent}.SetLed({index_blue}, {value});"
			}
		]
	},
	"CD4021": {
		"map_init": "{name}.Init({{ som.GetPin({pin_clk}), som.GetPin({pin_cs}), {{ som.GetPin({pin_data}) }} }});",
		"typename": "daisy::ShiftRegister4021<{driver_count}>",
		"non_class_decl": "uint8_t {name}_debounced[8*{driver_count}];",
		"driver_count": 1,
		"pin": "clk,cs,data",
		"postprocess": "{name}.Update();",
		"mapping": []
	},
	"CD4021Switch": {
		"map_init": "",
		"typename": "",
		"direction": "in",
		"parent": "",
		"index": 0,
		"postprocess": "{parent}_debounced[{index}] = {parent}.State({index}) | ({parent}_debounced[{index}] << 1);",
		"mapping": [
			{
				"name": "{name}",
				"get": "(json2daisy::{parent}_debounced[{index}] == 0xFE)",
				"bool": true
			},
			{
				"name": "{name}_press",
				"get": "(json2daisy::{parent}_debounced[{index}] != 0xFF)",
				"bool": false
			},
			{
				"name": "{name}_fall",
				"get": "(json2daisy::{parent}_debounced[{index}] == 0x7F)",
				"bool": true
			}
		]
	},
	"CD4051": {
		"init_single": "size_t {name}_index = {i};\n    cfg[{name}_index].InitMux(som.GetPin({pin_adc}), {mux_count}, som.GetPin({pin_sel0}), som.GetPin({pin_sel1}), som.GetPin({pin_sel2}));",
		"typename": "",
		"mux_count": 1,
		"pin": "adc,sel0,sel1,sel2",
		"mapping": []
	},
	"CD4051AnalogControl": {
		"map_init": "{name}.Init(som.adc.GetMuxPtr({parent}_index, {index}), som.AudioCallbackRate(), {flip}, {invert});",
		"parent": "",
		"index": 0,
		"typename": "daisy::AnalogControl",
		"direction": "in",
		"flip": "false",
		"invert": "false",
		"slew": "1.0/som.AudioCallbackRate()",
		"process": "{name}.Process();",
		"updaterate": "{name}.SetSampleRate(som.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}",
				"get": "({class_name}.{name}.Value())",
				"range": [
					0,
					1
				],
				"bool": false
			}
		]
	},
	"AnalogControlBipolar": {
		"init_single": "cfg[{i}].InitSingle(som.GetPin({pin}));",
		"map_init": "{name}.InitBipolarCv(som.adc.GetPtr({i}), som.AudioCallbackRate());",
		"typename": "daisy::AnalogControl",
		"direction": "in",
		"pin": "a",
		"slew": "1.0/som.AudioCallbackRate()",
		"process": "{name}.Process();",
		"updaterate": "{name}.SetSampleRate(som.AudioCallbackRate());",
		"mapping": [
			{
				"name": "{name}",
				"get": "({class_name}.{name}.Value())",
				"range": [
					0,
					1
				],
				"bool": false
			}
		]
	},
	"MotorShield": {
		"map_init": "daisy::Pca9685::Config {name}_pca_config;\n    {name}_pca_config.address = {address};\n    {name}_pca_config.periph = {periph};\n    {name}_pca_config.speed = {speed};\n    {name}_pca_config.scl = som.GetPin({pin_scl});\n    {name}_pca_config.sda = som.GetPin({pin_sda});\n    daisy::Adafruit_MotorShield::Config {name}_config;\n    {name}_config.pca9685_config = {name}_pca_config;\n    {name}_config.frequency = {frequency};\n    {name}.Init({name}_config);",
		"typename": "daisy::Adafruit_MotorShield",
		"direction": "out",
		"pin": "scl,sda",
		"address": "daisy::Pca9685::PCA9685_I2C_BASE_ADDRESS",
		"periph": "daisy::I2CHandle::Config::Peripheral::I2C_1",
		"speed": "daisy::I2CHandle::Config::Speed::I2C_400KHZ",
		"frequency": "1600",
		"mapping": [
		]
	},
	"StepperMotor": {
		"map_init": "{name} = {parent}.GetStepper({steps}, {index});\n    {name}->SetSpeed({speed});",
		"typename": "daisy::Adafruit_MotorShield::Adafruit_StepperMotor*",
		"direction": "out",
		"parent": "",
		"steps": 48,
		"index": 1,
		"speed": 60,
		"loopprocess": "{name}->Process();",
		"mapping": [
			{
				"name": "{name}",
				"set": "{class_name}.{name}->StepNonblocking({value}, daisy::Adafruit_MotorShield::FORWARD);",
				"bool": true
			},
			{
				"name": "{name}_forward",
				"set": "{class_name}.{name}->StepNonblocking({value}, daisy::Adafruit_MotorShield::FORWARD);",
				"bool": true
			},
			{
				"name": "{name}_backward",
				"set": "{class_name}.{name}->StepNonblocking({value}, daisy::Adafruit_MotorShield::BACKWARD);",
				"bool": true
			},
			{
				"name": "{name}_release",
				"set": "{class_name}.{name}->Release();",
				"bool": true
			}
		]
	},
	"DcMotor": {
		"map_init": "{name} = {parent}.GetMotor({index});\n    {name}->SetSpeedFine({speed} * 4095);",
		"typename": "daisy::Adafruit_MotorShield::Adafruit_DCMotor*",
		"direction": "out",
		"parent": "",
		"index": 1,
		"speed": 0.25,
		"mapping": [
			{
				"name": "{name}",
				"set": "{class_name}.{name}->Run(daisy::Adafruit_MotorShield::FORWARD);",
				"bool": true
			},
			{
				"name": "{name}_forward",
				"set": "{class_name}.{name}->Run(daisy::Adafruit_MotorShield::FORWARD);",
				"bool": true
			},
			{
				"name": "{name}_backward",
				"set": "{class_name}.{name}->Run(daisy::Adafruit_MotorShield::BACKWARD);",
				"bool": true
			},
			{
				"name": "{name}_stop",
				"set": "{class_name}.{name}->FullOff();",
				"bool": true
			}
		]
	},
	"Bme280": {
		"map_init": "daisy::Bme280I2CTransport::Config {name}_config;\n    {name}_config.periph = {periph};\n    {name}_config.speed = {speed};\n    {name}_config.scl = som.GetPin({pin_scl});\n    {name}_config.sda = som.GetPin({pin_sda});\n    {name}_config.address = {address};\n    daisy::Bme280I2C::Config {name}_config_main;\n    {name}_config_main.transport_config = {name}_config;\n    {name}.Init({name}_config_main);",
		"typename": "daisy::Bme280I2C",
		"direction": "in",
		"pin": "scl,sda",
		"address": "daisy::Pca9685::PCA9685_I2C_BASE_ADDRESS",
		"periph": "daisy::I2CHandle::Config::Peripheral::I2C_1",
		"speed": "daisy::I2CHandle::Config::Speed::I2C_400KHZ",
		"pressure": 1013,
		"mapping": [
			{
				"name": "{name}",
				"get": "{class_name}.{name}.ReadTemperature()",
				"where": "main"
			},
			{
				"name": "{name}_temp",
				"get": "{class_name}.{name}.ReadTemperature()",
				"where": "main"
			},
			{
				"name": "{name}_hum",
				"get": "{class_name}.{name}.ReadHumidity()",
				"where": "main"
			},
			{
				"name": "{name}_press",
				"get": "{class_name}.{name}.ReadPressure()",
				"where": "main"
			},
			{
				"name": "{name}_alt",
				"get": "{class_name}.{name}.ReadAltitude({pressure})",
				"where": "main"
			}
		]
	},
	"HallSensor": {
		"map_init": "daisy::HallSensor::Config {name}_config;\n    {name}_config.periph = {periph};\n    {name}_config.pin = som.GetPin({pin});\n    {name}.Init({name}_config);",
		"typename":  "daisy::HallSensor",
		"direction": "in",
		"pin": 14,
		"periph": "daisy::HallSensor::Config::Peripheral::TIM_4",
		"mapping": [
			{
				"name": "{name}",
				"get": "{class_name}.{name}.GetCount()"
			}
		]
	},
	"Tlv493d": {
		"map_init": "daisy::Tlv493dI2CTransport::Config {name}_config;\n    {name}_config.periph = {periph};\n    {name}_config.speed = {speed};\n    {name}_config.scl = som.GetPin({pin_scl});\n    {name}_config.sda = som.GetPin({pin_sda});\n    daisy::Tlv493dI2C::Config {name}_main_conf;\n    {name}_main_conf.transport_config = {name}_config;\n    {name}_main_conf.address = {address};\n    {name}.Init({name}_main_conf);",
		"typename": "daisy::Tlv493dI2C",
		"direction": "in",
		"pin": "scl,sda",
		"address": "TLV493D_ADDRESS1",
		"periph": "daisy::I2CHandle::Config::Peripheral::I2C_1",
		"speed": "daisy::I2CHandle::Config::Speed::I2C_400KHZ",
		"mapping": [
			{
				"name": "{name}",
				"get": "{class_name}.{name}.GetAmount()",
				"where": "main"
			},
			{
				"name": "{name}_x",
				"get": "{class_name}.{name}.GetX()",
				"where": "main"
			},
			{
				"name": "{name}_y",
				"get": "{class_name}.{name}.GetY()",
				"where": "main"
			},
			{
				"name": "{name}_z",
				"get": "{class_name}.{name}.GetZ()",
				"where": "main"
			},
			{
				"name": "{name}_amount",
				"get": "{class_name}.{name}.GetAmount()",
				"where": "main"
			},
			{
				"name": "{name}_azimuth",
				"get": "{class_name}.{name}.GetAzimuth()",
				"where": "main"
			},
			{
				"name": "{name}_polar",
				"get": "{class_name}.{name}.GetPolar()",
				"where": "main"
			}
		]
	},
	"Mpr121": {
		"map_init": "daisy::Mpr121I2CTransport::Config {name}_config;\n    {name}_config.periph = {periph};\n    {name}_config.speed = {speed};\n    {name}_config.scl = som.GetPin({pin_scl});\n    {name}_config.sda = som.GetPin({pin_sda});\n    {name}_config.dev_addr = {address};\n    daisy::Mpr121I2C::Config {name}_main_conf;\n    {name}_main_conf.transport_config = {name}_config;\n    {name}_main_conf.touch_threshold = {touch_threshold};\n    {name}_main_conf.release_threshold = {release_threshold};\n    {name}.Init({name}_main_conf);",
		"typename": "daisy::Mpr121I2C",
		"direction": "in",
		"pin": "scl,sda",
		"address": "MPR121_I2CADDR_DEFAULT",
		"periph": "daisy::I2CHandle::Config::Peripheral::I2C_1",
		"speed": "daisy::I2CHandle::Config::Speed::I2C_400KHZ",
		"touch_threshold": "MPR121_TOUCH_THRESHOLD_DEFAULT",
		"release_threshold": "MPR121_RELEASE_THRESHOLD_DEFAULT",
		"mapping": [
			{
				"name": "{name}",
				"get": "(({class_name}.{name}.Touched() & 0x001) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch0",
				"get": "(({class_name}.{name}.Touched() & 0x001) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch1",
				"get": "(({class_name}.{name}.Touched() & 0x002) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch2",
				"get": "(({class_name}.{name}.Touched() & 0x004) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch3",
				"get": "(({class_name}.{name}.Touched() & 0x008) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch4",
				"get": "(({class_name}.{name}.Touched() & 0x010) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch5",
				"get": "(({class_name}.{name}.Touched() & 0x020) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch6",
				"get": "(({class_name}.{name}.Touched() & 0x040) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch7",
				"get": "(({class_name}.{name}.Touched() & 0x080) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch8",
				"get": "(({class_name}.{name}.Touched() & 0x100) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch9",
				"get": "(({class_name}.{name}.Touched() & 0x200) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch10",
				"get": "(({class_name}.{name}.Touched() & 0x400) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch11",
				"get": "(({class_name}.{name}.Touched() & 0x800) ? 1.0f : 0.f)",
				"where": "main"
			},
			{
				"name": "{name}_ch0_raw",
				"get": "{class_name}.{name}.FilteredData(0)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch1_raw",
				"get": "{class_name}.{name}.FilteredData(1)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch2_raw",
				"get": "{class_name}.{name}.FilteredData(2)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch3_raw",
				"get": "{class_name}.{name}.FilteredData(3)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch4_raw",
				"get": "{class_name}.{name}.FilteredData(4)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch5_raw",
				"get": "{class_name}.{name}.FilteredData(5)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch6_raw",
				"get": "{class_name}.{name}.FilteredData(6)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch7_raw",
				"get": "{class_name}.{name}.FilteredData(7)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch8_raw",
				"get": "{class_name}.{name}.FilteredData(8)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch9_raw",
				"get": "{class_name}.{name}.FilteredData(9)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch10_raw",
				"get": "{class_name}.{name}.FilteredData(10)",
				"where": "main",
				"range": [0, 1023]
			},
			{
				"name": "{name}_ch11_raw",
				"get": "{class_name}.{name}.FilteredData(11)",
				"where": "main",
				"range": [0, 1023]
			}
		]
	},
	"Apds9960": {
		"map_init": "daisy::Apds9960I2CTransport::Config {name}_config;\n    {name}_config.periph = {periph};\n    {name}_config.speed = {speed};\n    {name}_config.scl = som.GetPin({pin_scl});\n    {name}_config.sda = som.GetPin({pin_sda});\n    daisy::Apds9960I2C::Config {name}_main_conf;\n    {name}_main_conf.transport_config = {name}_config;\n    {name}.Init({name}_main_conf);",
		"typename": "daisy::Apds9960I2C",
		"direction": "in",
		"pin": "scl,sda",
		"periph": "daisy::I2CHandle::Config::Peripheral::I2C_1",
		"speed": "daisy::I2CHandle::Config::Speed::I2C_400KHZ",
		"mapping": [
			{
				"name": "{name}",
				"get": "{name}.ReadGesture()",
				"where": "main"
			},
			{
				"name": "{name}_gest",
				"get": "{name}.ReadGesture()",
				"where": "main"
			},
			{
				"name": "{name}_prox",
				"get": "{name}.ReadProximity()",
				"where": "main"
			}
		]
	},
	"Bmp390": {
		"map_init": "daisy::Bmp390I2CTransport::Config {name}_config;\n    {name}_config.periph = {periph};\n    {name}_config.speed = {speed};\n    {name}_config.scl = som.GetPin({pin_scl});\n    {name}_config.sda = som.GetPin({pin_sda});\n    daisy::Bmp390I2C::Config {name}_config_main;\n    {name}_config_main.transport_config = {name}_config;\n   {name}.Init({name}_config_main);",
		"typename": "daisy::Bmp390I2C",
		"direction": "in",
		"pin": "scl,sda",
		"periph": "daisy::I2CHandle::Config::Peripheral::I2C_1",
		"speed": "daisy::I2CHandle::Config::Speed::I2C_400KHZ",
		"pressure": 1013,
		"mapping": [
			{
				"name": "{name}",
				"get": "{class_name}.{name}.ReadTemperature()",
				"where": "main"
			},
			{
				"name": "{name}_temp",
				"get": "{class_name}.{name}.ReadTemperature()",
				"where": "main"
			},
			{
				"name": "{name}_press",
				"get": "{class_name}.{name}.ReadPressure()",
				"where": "main"
			},
			{
				"name": "{name}_alt",
				"get": "{class_name}.{name}.ReadAltitude({pressure})",
				"where": "main"
			}
		]
	}
}
