# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/blocks/preprocessing.ipynb (unless otherwise specified).

__all__ = ['OneHotEncoder']

# Cell
import pandas as pd
import sklearn.preprocessing
from ..core.block_types import PandasComponent
from sklearn.utils.validation import check_is_fitted
from sklearn.exceptions import NotFittedError

# Cell
class OneHotEncoder (PandasComponent):
    def __init__ (self,
                  categories='auto',
                  handle_unknown='ignore',
                  dtype=int,
                  **kwargs):
        super().__init__ (**kwargs)
        self.categories = categories
        self.handle_unknown = handle_unknown
        self.one_hot_encoder = sklearn.preprocessing.OneHotEncoder(categories=categories,
                                                                    handle_unknown=handle_unknown,
                                                                    sparse=False)
        self.dtype = dtype

    def _fit (self, X, y=None):
        self.one_hot_encoder.fit (X)
        return self

    def _apply (self, df):
        try:
            check_is_fitted (self.one_hot_encoder)
        except NotFittedError:
            if self.categories != 'auto':
                self.one_hot_encoder.fit(df)
            else:
                raise NotFittedError('OneHotEncoder must be fitted first')
        X = self.one_hot_encoder.transform(df)
        if self.dtype is int or self.dtype == 'int':
            X = X.astype(int)
        df = pd.DataFrame (data=X,
                           columns=self.one_hot_encoder.get_feature_names(input_features=df.columns),
                           index=df.index)
        return df