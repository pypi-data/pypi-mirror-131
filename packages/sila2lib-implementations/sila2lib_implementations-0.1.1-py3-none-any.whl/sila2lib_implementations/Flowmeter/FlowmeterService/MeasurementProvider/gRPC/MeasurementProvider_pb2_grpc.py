# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import MeasurementProvider_pb2 as MeasurementProvider__pb2


class MeasurementProviderStub(object):
    """Feature: Measurement Provider

    Used to acquire general status of the current flow of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTemperature = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetTemperature',
                request_serializer=MeasurementProvider__pb2.GetTemperature_Parameters.SerializeToString,
                response_deserializer=MeasurementProvider__pb2.GetTemperature_Responses.FromString,
                )
        self.GetPressure = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetPressure',
                request_serializer=MeasurementProvider__pb2.GetPressure_Parameters.SerializeToString,
                response_deserializer=MeasurementProvider__pb2.GetPressure_Responses.FromString,
                )
        self.GetTime = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetTime',
                request_serializer=MeasurementProvider__pb2.GetTime_Parameters.SerializeToString,
                response_deserializer=MeasurementProvider__pb2.GetTime_Responses.FromString,
                )
        self.GetCalibratedVolume = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetCalibratedVolume',
                request_serializer=MeasurementProvider__pb2.GetCalibratedVolume_Parameters.SerializeToString,
                response_deserializer=MeasurementProvider__pb2.GetCalibratedVolume_Responses.FromString,
                )
        self.GetSensorNumber = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetSensorNumber',
                request_serializer=MeasurementProvider__pb2.GetSensorNumber_Parameters.SerializeToString,
                response_deserializer=MeasurementProvider__pb2.GetSensorNumber_Responses.FromString,
                )
        self.GetNormalVolumeFlow = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetNormalVolumeFlow',
                request_serializer=MeasurementProvider__pb2.GetNormalVolumeFlow_Parameters.SerializeToString,
                response_deserializer=MeasurementProvider__pb2.GetNormalVolumeFlow_Responses.FromString,
                )
        self.GetVolumeFlow = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetVolumeFlow',
                request_serializer=MeasurementProvider__pb2.GetVolumeFlow_Parameters.SerializeToString,
                response_deserializer=MeasurementProvider__pb2.GetVolumeFlow_Responses.FromString,
                )
        self.GetDeltaPressure = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetDeltaPressure',
                request_serializer=MeasurementProvider__pb2.GetDeltaPressure_Parameters.SerializeToString,
                response_deserializer=MeasurementProvider__pb2.GetDeltaPressure_Responses.FromString,
                )
        self.GetMassFlow = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetMassFlow',
                request_serializer=MeasurementProvider__pb2.GetMassFlow_Parameters.SerializeToString,
                response_deserializer=MeasurementProvider__pb2.GetMassFlow_Responses.FromString,
                )
        self.GetMass = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetMass',
                request_serializer=MeasurementProvider__pb2.GetMass_Parameters.SerializeToString,
                response_deserializer=MeasurementProvider__pb2.GetMass_Responses.FromString,
                )


class MeasurementProviderServicer(object):
    """Feature: Measurement Provider

    Used to acquire general status of the current flow of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    def GetTemperature(self, request, context):
        """GetTemperature
        Absolute temperature in  degree Celsius
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPressure(self, request, context):
        """Get pressure
        Absolute pressure in millibar
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTime(self, request, context):
        """Get time

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCalibratedVolume(self, request, context):
        """Get calibrated volume
        Calibrated volume
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSensorNumber(self, request, context):
        """Get sensor number
        Pointer to sensor number in calibration tube FPP
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNormalVolumeFlow(self, request, context):
        """Get normal volume flow
        Volume flow referenced to normal conditions (0 Celsius degree;  1013.25HPa=1atm) in liters/min
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVolumeFlow(self, request, context):
        """Get volume flow
        Volume flow at actual conditions in liters per min
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeltaPressure(self, request, context):
        """Get delta pressure
        Relative pressure between atmosphere and sensor in millibar
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMassFlow(self, request, context):
        """Get mass flow
        real mass flow in Kg pro min
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMass(self, request, context):
        """Get mass
        Net mass in g
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeasurementProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTemperature,
                    request_deserializer=MeasurementProvider__pb2.GetTemperature_Parameters.FromString,
                    response_serializer=MeasurementProvider__pb2.GetTemperature_Responses.SerializeToString,
            ),
            'GetPressure': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPressure,
                    request_deserializer=MeasurementProvider__pb2.GetPressure_Parameters.FromString,
                    response_serializer=MeasurementProvider__pb2.GetPressure_Responses.SerializeToString,
            ),
            'GetTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTime,
                    request_deserializer=MeasurementProvider__pb2.GetTime_Parameters.FromString,
                    response_serializer=MeasurementProvider__pb2.GetTime_Responses.SerializeToString,
            ),
            'GetCalibratedVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCalibratedVolume,
                    request_deserializer=MeasurementProvider__pb2.GetCalibratedVolume_Parameters.FromString,
                    response_serializer=MeasurementProvider__pb2.GetCalibratedVolume_Responses.SerializeToString,
            ),
            'GetSensorNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSensorNumber,
                    request_deserializer=MeasurementProvider__pb2.GetSensorNumber_Parameters.FromString,
                    response_serializer=MeasurementProvider__pb2.GetSensorNumber_Responses.SerializeToString,
            ),
            'GetNormalVolumeFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNormalVolumeFlow,
                    request_deserializer=MeasurementProvider__pb2.GetNormalVolumeFlow_Parameters.FromString,
                    response_serializer=MeasurementProvider__pb2.GetNormalVolumeFlow_Responses.SerializeToString,
            ),
            'GetVolumeFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVolumeFlow,
                    request_deserializer=MeasurementProvider__pb2.GetVolumeFlow_Parameters.FromString,
                    response_serializer=MeasurementProvider__pb2.GetVolumeFlow_Responses.SerializeToString,
            ),
            'GetDeltaPressure': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeltaPressure,
                    request_deserializer=MeasurementProvider__pb2.GetDeltaPressure_Parameters.FromString,
                    response_serializer=MeasurementProvider__pb2.GetDeltaPressure_Responses.SerializeToString,
            ),
            'GetMassFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMassFlow,
                    request_deserializer=MeasurementProvider__pb2.GetMassFlow_Parameters.FromString,
                    response_serializer=MeasurementProvider__pb2.GetMassFlow_Responses.SerializeToString,
            ),
            'GetMass': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMass,
                    request_deserializer=MeasurementProvider__pb2.GetMass_Parameters.FromString,
                    response_serializer=MeasurementProvider__pb2.GetMass_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MeasurementProvider(object):
    """Feature: Measurement Provider

    Used to acquire general status of the current flow of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    @staticmethod
    def GetTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetTemperature',
            MeasurementProvider__pb2.GetTemperature_Parameters.SerializeToString,
            MeasurementProvider__pb2.GetTemperature_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPressure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetPressure',
            MeasurementProvider__pb2.GetPressure_Parameters.SerializeToString,
            MeasurementProvider__pb2.GetPressure_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetTime',
            MeasurementProvider__pb2.GetTime_Parameters.SerializeToString,
            MeasurementProvider__pb2.GetTime_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCalibratedVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetCalibratedVolume',
            MeasurementProvider__pb2.GetCalibratedVolume_Parameters.SerializeToString,
            MeasurementProvider__pb2.GetCalibratedVolume_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSensorNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetSensorNumber',
            MeasurementProvider__pb2.GetSensorNumber_Parameters.SerializeToString,
            MeasurementProvider__pb2.GetSensorNumber_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNormalVolumeFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetNormalVolumeFlow',
            MeasurementProvider__pb2.GetNormalVolumeFlow_Parameters.SerializeToString,
            MeasurementProvider__pb2.GetNormalVolumeFlow_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVolumeFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetVolumeFlow',
            MeasurementProvider__pb2.GetVolumeFlow_Parameters.SerializeToString,
            MeasurementProvider__pb2.GetVolumeFlow_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeltaPressure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetDeltaPressure',
            MeasurementProvider__pb2.GetDeltaPressure_Parameters.SerializeToString,
            MeasurementProvider__pb2.GetDeltaPressure_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMassFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetMassFlow',
            MeasurementProvider__pb2.GetMassFlow_Parameters.SerializeToString,
            MeasurementProvider__pb2.GetMassFlow_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementprovider.v1.MeasurementProvider/GetMass',
            MeasurementProvider__pb2.GetMass_Parameters.SerializeToString,
            MeasurementProvider__pb2.GetMass_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
