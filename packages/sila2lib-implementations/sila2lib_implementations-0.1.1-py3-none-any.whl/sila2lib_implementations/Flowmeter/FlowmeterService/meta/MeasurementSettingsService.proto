// This file is automatically generated by sila2lib.proto_builder.proto_builder version 0.2.0
// :generation date: 2021-03-19 14:54:01
//
// ---- PLEASE DO NOT MODIFY MANUALLY !! ---

syntax = "proto3";
import "SiLAFramework.proto";
package sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1;

// Feature: Measurement Settings Service
//   
//                   Used to acquire and modify general status and parameters of the flowmeter.
//           By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
//   02.12.2020
//   
service MeasurementSettingsService {
    // Get piston operation mode
    //   Piston prover operation mode and its status information
    rpc GetPistonOperationMode(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetPistonOperationMode_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetPistonOperationMode_Responses) {}
    // Set piston operation mode
    //   Set the new piston prover operation mode
    rpc SetPistonOperationMode(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetPistonOperationMode_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetPistonOperationMode_Responses) {}
    // Get time out
    //   Maximum admitted duration time for specific procedure (in 0,1seconds; 100 milliseconds)
    rpc GetTimeOut(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetTimeOut_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetTimeOut_Responses) {}
    // Set time out
    //   
    //               Set the new maximum admitted duration time for specific procedure (in 0,1seconds; 100 milliseconds)
    //   
    rpc SetTimeOut(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetTimeOut_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetTimeOut_Responses) {}
    // Get frequency
    //   Piston frequency in Hz
    rpc GetFrequency(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetFrequency_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetFrequency_Responses) {}
    // Set frequency
    //   Set the new piston frequency in Hz
    rpc SetFrequency(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetFrequency_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetFrequency_Responses) {}
    // Get density actual
    //    reference density of selected fluid in Kg pro m3
    rpc GetDensityActual(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetDensityActual_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetDensityActual_Responses) {}
    // Set densityActual
    //   Set the new reference density of the selected fluid in Kg prom3
    rpc SetDensityActual(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetDensityActual_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetDensityActual_Responses) {}
    // Get pressure inlet
    //   
    //               Pressure inlet (upstream) of fluid in bar, for the first fluid-Nr. only in millibar
    //   
    rpc GetPressureInlet(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetPressureInlet_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetPressureInlet_Responses) {}
    // Set pressure inlet
    //   Set the new pressure inlet (upstream) of fluid in bar (first fluid only)
    rpc SetPressureInlet(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetPressureInlet_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetPressureInlet_Responses) {}
    // Get pressure outlet
    //   
    //               Pressure outlet (downstream) of fluid in bar, for the first fluid-Nr. only. in millibar
    //   
    rpc GetPressureOutlet(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetPressureOutlet_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetPressureOutlet_Responses) {}
    // Set pressure outlet
    //   
    //               Set the new pressure outlet (downstream) of fluid in bar (first fluid only) in millibar
    //   
    rpc SetPressureOutlet(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetPressureOutlet_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetPressureOutlet_Responses) {}
    // Get fluid temperature
    //   temperature of fluid through instrument (for first fluid only) in degree Celsius
    rpc GetFluidTemperature(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetFluidTemperature_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetFluidTemperature_Responses) {}
    // Set fluid temperature
    //   
    //               Set the new temperature of fluid through instrument (for first fluid only) in Celsius degree
    //   
    rpc SetFluidTemperature(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetFluidTemperature_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetFluidTemperature_Responses) {}
    // Get thermal conductivity
    //   
    //               Thermal conductivity at sensor conditions at Watt/(m*K). Value is equal or bigger than 0
    //   
    rpc GetThermalConductivity(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetThermalConductivity_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetThermalConductivity_Responses) {}
    // SetThermalConductivity
    //   Set the new thermal conductivity in sensor conditions in Watt/(m*K)
    rpc SetThermalConductivity(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetThermalConductivity_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetThermalConductivity_Responses) {}
    // Get standard mass flow
    //   
    //               Standard mass flow in l/min air (20°C, 1atm, 1.01325bar) or g/h H2O equivalent. Value bigger than 0
    //   
    rpc GetStandardMassFlow(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetStandardMassFlow_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetStandardMassFlow_Responses) {}
    // Set standard mass flow
    //   
    //               Set the new standard mass flow in l/min air (20°C, 1atm, 1.01325bar) or g/h H2O equivalent. Value bigger
    //   than 0
    //   
    rpc SetStandardMassFlow(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetStandardMassFlow_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetStandardMassFlow_Responses) {}
    // Get orifice diameter
    //   Orifice diameter in mm
    rpc GetOrificeDiameter(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetOrificeDiameter_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetOrificeDiameter_Responses) {}
    // Set orifice diameter
    //   Set new orifice diameter in mm
    rpc SetOrificeDiameter(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetOrificeDiameter_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetOrificeDiameter_Responses) {}
    // Get barometer pressure
    //    barometer atmospheric pressure in millibar
    rpc GetBarometerPressure(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetBarometerPressure_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetBarometerPressure_Responses) {}
    // Set barometer pressure
    //   set current barometer atmospheric pressure in millibar
    rpc SetBarometerPressure(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetBarometerPressure_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetBarometerPressure_Responses) {}
    // Get number vanes
    //   Current number of vanes used in rotor
    rpc GetNumberVanes(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetNumberVanes_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.GetNumberVanes_Responses) {}
    // Set number vanes
    //   Set number of vanes used in rotor
    rpc SetNumberVanes(sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetNumberVanes_Parameters) returns (sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.SetNumberVanes_Responses) {}
    
    
}

// ----------------- Data Type definitions -----------------


// ------ Command Parameter and Response definitions -------
message GetPistonOperationMode_Parameters {
    
}

message GetPistonOperationMode_Responses {
    sila2.org.silastandard.String CurrentPistonOperationMode = 1;
}

message SetPistonOperationMode_Parameters {
    sila2.org.silastandard.String SetPistonOperationMode = 1;
}

message SetPistonOperationMode_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetTimeOut_Parameters {
    
}

message GetTimeOut_Responses {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer CurrentTimeOut = 1;
}

message SetTimeOut_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer SetTimeOut = 1;
}

message SetTimeOut_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetFrequency_Parameters {
    
}

message GetFrequency_Responses {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real CurrentFrequency = 1;
}

message SetFrequency_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real SetFrequency = 1;
}

message SetFrequency_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetDensityActual_Parameters {
    
}

message GetDensityActual_Responses {
    sila2.org.silastandard.String CurrentDensity = 1;
}

message SetDensityActual_Parameters {
    sila2.org.silastandard.String SetDensityActual = 1;
}

message SetDensityActual_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetPressureInlet_Parameters {
    
}

message GetPressureInlet_Responses {
    sila2.org.silastandard.Real CurrentPressureInlet = 1;
}

message SetPressureInlet_Parameters {
    sila2.org.silastandard.Real SetPressureInlet = 1;
}

message SetPressureInlet_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetPressureOutlet_Parameters {
    
}

message GetPressureOutlet_Responses {
    sila2.org.silastandard.Real CurrentPressureInlet = 1;
}

message SetPressureOutlet_Parameters {
    sila2.org.silastandard.Real SetPressureOutlet = 1;
}

message SetPressureOutlet_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetFluidTemperature_Parameters {
    
}

message GetFluidTemperature_Responses {
    sila2.org.silastandard.Real CurrentFluidTemperature = 1;
}

message SetFluidTemperature_Parameters {
    sila2.org.silastandard.Real SetFluidTemperature = 1;
}

message SetFluidTemperature_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetThermalConductivity_Parameters {
    
}

message GetThermalConductivity_Responses {
    sila2.org.silastandard.Real CurrentThermalConductivity = 1;
}

message SetThermalConductivity_Parameters {
    sila2.org.silastandard.Real SetThermalConductivity = 1;
}

message SetThermalConductivity_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetStandardMassFlow_Parameters {
    
}

message GetStandardMassFlow_Responses {
    sila2.org.silastandard.Real CurrentStandardMassFlow = 1;
}

message SetStandardMassFlow_Parameters {
    sila2.org.silastandard.Real SetStandardFlow = 1;
}

message SetStandardMassFlow_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetOrificeDiameter_Parameters {
    
}

message GetOrificeDiameter_Responses {
    sila2.org.silastandard.String CurrentOrificeDiameter = 1;
}

message SetOrificeDiameter_Parameters {
    sila2.org.silastandard.String SetOrificeDiameter = 1;
}

message SetOrificeDiameter_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetBarometerPressure_Parameters {
    
}

message GetBarometerPressure_Responses {
    sila2.org.silastandard.Real CurrentBarometerPressure = 1;
}

message SetBarometerPressure_Parameters {
    sila2.org.silastandard.Real SetBarometerPressure = 1;
}

message SetBarometerPressure_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetNumberVanes_Parameters {
    
}

message GetNumberVanes_Responses {
    sila2.org.silastandard.String CurrentNumberVanes = 1;
}

message SetNumberVanes_Parameters {
    sila2.org.silastandard.String SetNumberVanes = 1;
}

message SetNumberVanes_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}


// ----------------- Metadata Definitions ------------------
