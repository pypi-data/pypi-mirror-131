# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import CalibrationService_pb2 as CalibrationService__pb2


class CalibrationServiceStub(object):
    """Feature: Calibration Service

    Delivers full information of the calibration system and allows complete overwriting of it.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCalibrationCertificate = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetCalibrationCertificate',
                request_serializer=CalibrationService__pb2.GetCalibrationCertificate_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetCalibrationCertificate_Responses.FromString,
                )
        self.SetCalibrationCertificate = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetCalibrationCertificate',
                request_serializer=CalibrationService__pb2.SetCalibrationCertificate_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetCalibrationCertificate_Responses.FromString,
                )
        self.GetCalibrationDate = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetCalibrationDate',
                request_serializer=CalibrationService__pb2.GetCalibrationDate_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetCalibrationDate_Responses.FromString,
                )
        self.SetCalibrationDate = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetCalibrationDate',
                request_serializer=CalibrationService__pb2.SetCalibrationDate_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetCalibrationDate_Responses.FromString,
                )
        self.GetServiceNumber = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetServiceNumber',
                request_serializer=CalibrationService__pb2.GetServiceNumber_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetServiceNumber_Responses.FromString,
                )
        self.SetServiceNumber = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetServiceNumber',
                request_serializer=CalibrationService__pb2.SetServiceNumber_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetServiceNumber_Responses.FromString,
                )
        self.GetServiceDate = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetServiceDate',
                request_serializer=CalibrationService__pb2.GetServiceDate_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetServiceDate_Responses.FromString,
                )
        self.SetServiceDate = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetServiceDate',
                request_serializer=CalibrationService__pb2.SetServiceDate_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetServiceDate_Responses.FromString,
                )
        self.GetSensorCalibrationTemperature = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetSensorCalibrationTemperature',
                request_serializer=CalibrationService__pb2.GetSensorCalibrationTemperature_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetSensorCalibrationTemperature_Responses.FromString,
                )
        self.SetSensorCalibrationTemperature = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetSensorCalibrationTemperature',
                request_serializer=CalibrationService__pb2.SetSensorCalibrationTemperature_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetSensorCalibrationTemperature_Responses.FromString,
                )


class CalibrationServiceServicer(object):
    """Feature: Calibration Service

    Delivers full information of the calibration system and allows complete overwriting of it.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    def GetCalibrationCertificate(self, request, context):
        """Get calibration certificate
        Number of calibration certificate (last basic calibration)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCalibrationCertificate(self, request, context):
        """Set calibration certificate
        Set new calibration certificate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCalibrationDate(self, request, context):
        """Get Calibration date
        Date of last (basic) calibration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCalibrationDate(self, request, context):
        """Set calibration date
        Set new calibration date
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceNumber(self, request, context):
        """Get Service number
        Service number for repair/re-building/re-calibration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetServiceNumber(self, request, context):
        """Set service number
        Set new service number for repair/re-building/re-calibration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceDate(self, request, context):
        """Get service date
        Date of last maintenance service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetServiceDate(self, request, context):
        """Set service date
        Set new date of last maintenance service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSensorCalibrationTemperature(self, request, context):
        """Get Sensor calibration temperature
        Sensor temperature from the last calibration in degree Celsius
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSensorCalibrationTemperature(self, request, context):
        """Set sensor calibration temperature
        Set sensor calibration temperature in degree Celsius
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalibrationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCalibrationCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCalibrationCertificate,
                    request_deserializer=CalibrationService__pb2.GetCalibrationCertificate_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetCalibrationCertificate_Responses.SerializeToString,
            ),
            'SetCalibrationCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCalibrationCertificate,
                    request_deserializer=CalibrationService__pb2.SetCalibrationCertificate_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetCalibrationCertificate_Responses.SerializeToString,
            ),
            'GetCalibrationDate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCalibrationDate,
                    request_deserializer=CalibrationService__pb2.GetCalibrationDate_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetCalibrationDate_Responses.SerializeToString,
            ),
            'SetCalibrationDate': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCalibrationDate,
                    request_deserializer=CalibrationService__pb2.SetCalibrationDate_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetCalibrationDate_Responses.SerializeToString,
            ),
            'GetServiceNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceNumber,
                    request_deserializer=CalibrationService__pb2.GetServiceNumber_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetServiceNumber_Responses.SerializeToString,
            ),
            'SetServiceNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.SetServiceNumber,
                    request_deserializer=CalibrationService__pb2.SetServiceNumber_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetServiceNumber_Responses.SerializeToString,
            ),
            'GetServiceDate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceDate,
                    request_deserializer=CalibrationService__pb2.GetServiceDate_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetServiceDate_Responses.SerializeToString,
            ),
            'SetServiceDate': grpc.unary_unary_rpc_method_handler(
                    servicer.SetServiceDate,
                    request_deserializer=CalibrationService__pb2.SetServiceDate_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetServiceDate_Responses.SerializeToString,
            ),
            'GetSensorCalibrationTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSensorCalibrationTemperature,
                    request_deserializer=CalibrationService__pb2.GetSensorCalibrationTemperature_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetSensorCalibrationTemperature_Responses.SerializeToString,
            ),
            'SetSensorCalibrationTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSensorCalibrationTemperature,
                    request_deserializer=CalibrationService__pb2.SetSensorCalibrationTemperature_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetSensorCalibrationTemperature_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CalibrationService(object):
    """Feature: Calibration Service

    Delivers full information of the calibration system and allows complete overwriting of it.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    @staticmethod
    def GetCalibrationCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetCalibrationCertificate',
            CalibrationService__pb2.GetCalibrationCertificate_Parameters.SerializeToString,
            CalibrationService__pb2.GetCalibrationCertificate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCalibrationCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetCalibrationCertificate',
            CalibrationService__pb2.SetCalibrationCertificate_Parameters.SerializeToString,
            CalibrationService__pb2.SetCalibrationCertificate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCalibrationDate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetCalibrationDate',
            CalibrationService__pb2.GetCalibrationDate_Parameters.SerializeToString,
            CalibrationService__pb2.GetCalibrationDate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCalibrationDate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetCalibrationDate',
            CalibrationService__pb2.SetCalibrationDate_Parameters.SerializeToString,
            CalibrationService__pb2.SetCalibrationDate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetServiceNumber',
            CalibrationService__pb2.GetServiceNumber_Parameters.SerializeToString,
            CalibrationService__pb2.GetServiceNumber_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetServiceNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetServiceNumber',
            CalibrationService__pb2.SetServiceNumber_Parameters.SerializeToString,
            CalibrationService__pb2.SetServiceNumber_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceDate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetServiceDate',
            CalibrationService__pb2.GetServiceDate_Parameters.SerializeToString,
            CalibrationService__pb2.GetServiceDate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetServiceDate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetServiceDate',
            CalibrationService__pb2.SetServiceDate_Parameters.SerializeToString,
            CalibrationService__pb2.SetServiceDate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSensorCalibrationTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetSensorCalibrationTemperature',
            CalibrationService__pb2.GetSensorCalibrationTemperature_Parameters.SerializeToString,
            CalibrationService__pb2.GetSensorCalibrationTemperature_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSensorCalibrationTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetSensorCalibrationTemperature',
            CalibrationService__pb2.SetSensorCalibrationTemperature_Parameters.SerializeToString,
            CalibrationService__pb2.SetSensorCalibrationTemperature_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
