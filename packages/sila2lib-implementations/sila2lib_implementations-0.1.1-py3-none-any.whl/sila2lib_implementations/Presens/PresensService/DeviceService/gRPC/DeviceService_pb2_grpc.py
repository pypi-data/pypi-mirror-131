# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import DeviceService_pb2 as DeviceService__pb2
import sila2lib.framework.SiLAFramework_pb2 as SiLAFramework__pb2


class DeviceServiceStub(object):
    """Feature: Device Service

    Allows full control of the stirrer speed and power. Starts and stops the stirrer of the bioREACTOR48.
    By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 14.02.2020

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLog = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetLog',
                request_serializer=DeviceService__pb2.GetLog_Parameters.SerializeToString,
                response_deserializer=SiLAFramework__pb2.CommandConfirmation.FromString,
                )
        self.GetLog_Info = channel.unary_stream(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetLog_Info',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=SiLAFramework__pb2.ExecutionInfo.FromString,
                )
        self.GetLog_Result = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetLog_Result',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=DeviceService__pb2.GetLog_Responses.FromString,
                )
        self.GetReport = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetReport',
                request_serializer=DeviceService__pb2.GetReport_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetReport_Responses.FromString,
                )
        self.GetTComp = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetTComp',
                request_serializer=DeviceService__pb2.GetTComp_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetTComp_Responses.FromString,
                )
        self.SetTComp = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SetTComp',
                request_serializer=DeviceService__pb2.SetTComp_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.SetTComp_Responses.FromString,
                )
        self.GetDynAveraging = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetDynAveraging',
                request_serializer=DeviceService__pb2.GetDynAveraging_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetDynAveraging_Responses.FromString,
                )
        self.SetDynAveraging = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SetDynAveraging',
                request_serializer=DeviceService__pb2.SetDynAveraging_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.SetDynAveraging_Responses.FromString,
                )
        self.SwitchOffDevice = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SwitchOffDevice',
                request_serializer=DeviceService__pb2.SwitchOffDevice_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.SwitchOffDevice_Responses.FromString,
                )
        self.Subscribe_CurrentStatus = channel.unary_stream(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/Subscribe_CurrentStatus',
                request_serializer=DeviceService__pb2.Subscribe_CurrentStatus_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.Subscribe_CurrentStatus_Responses.FromString,
                )


class DeviceServiceServicer(object):
    """Feature: Device Service

    Allows full control of the stirrer speed and power. Starts and stops the stirrer of the bioREACTOR48.
    By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 14.02.2020

    """

    def GetLog(self, request, context):
        """Get Log
        Get the current status of the device from the state machine of the SiLA server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLog_Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLog_Result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReport(self, request, context):
        """Get Report
        Get a full device report.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTComp(self, request, context):
        """Get Temperature Compensation
        Get the temperature compensation value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTComp(self, request, context):
        """Set Temperature Compensation
        Set the temperature compensation value. Values must be between 0-60 degrees Celsius. Default = 20.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDynAveraging(self, request, context):
        """Get Dynamic Averaging
        Get the dynamic averaging value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDynAveraging(self, request, context):
        """Set Dynamic Averaging
        Set the dynamic averaging value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwitchOffDevice(self, request, context):
        """Switch Off Device
        Switch off the device to save power.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_CurrentStatus(self, request, context):
        """Current Status
        Get the current status of the device from the internal state machine of the SiLA server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLog,
                    request_deserializer=DeviceService__pb2.GetLog_Parameters.FromString,
                    response_serializer=SiLAFramework__pb2.CommandConfirmation.SerializeToString,
            ),
            'GetLog_Info': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLog_Info,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=SiLAFramework__pb2.ExecutionInfo.SerializeToString,
            ),
            'GetLog_Result': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLog_Result,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=DeviceService__pb2.GetLog_Responses.SerializeToString,
            ),
            'GetReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReport,
                    request_deserializer=DeviceService__pb2.GetReport_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetReport_Responses.SerializeToString,
            ),
            'GetTComp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTComp,
                    request_deserializer=DeviceService__pb2.GetTComp_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetTComp_Responses.SerializeToString,
            ),
            'SetTComp': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTComp,
                    request_deserializer=DeviceService__pb2.SetTComp_Parameters.FromString,
                    response_serializer=DeviceService__pb2.SetTComp_Responses.SerializeToString,
            ),
            'GetDynAveraging': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDynAveraging,
                    request_deserializer=DeviceService__pb2.GetDynAveraging_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetDynAveraging_Responses.SerializeToString,
            ),
            'SetDynAveraging': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDynAveraging,
                    request_deserializer=DeviceService__pb2.SetDynAveraging_Parameters.FromString,
                    response_serializer=DeviceService__pb2.SetDynAveraging_Responses.SerializeToString,
            ),
            'SwitchOffDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.SwitchOffDevice,
                    request_deserializer=DeviceService__pb2.SwitchOffDevice_Parameters.FromString,
                    response_serializer=DeviceService__pb2.SwitchOffDevice_Responses.SerializeToString,
            ),
            'Subscribe_CurrentStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_CurrentStatus,
                    request_deserializer=DeviceService__pb2.Subscribe_CurrentStatus_Parameters.FromString,
                    response_serializer=DeviceService__pb2.Subscribe_CurrentStatus_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeviceService(object):
    """Feature: Device Service

    Allows full control of the stirrer speed and power. Starts and stops the stirrer of the bioREACTOR48.
    By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 14.02.2020

    """

    @staticmethod
    def GetLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetLog',
            DeviceService__pb2.GetLog_Parameters.SerializeToString,
            SiLAFramework__pb2.CommandConfirmation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLog_Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetLog_Info',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            SiLAFramework__pb2.ExecutionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLog_Result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetLog_Result',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            DeviceService__pb2.GetLog_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetReport',
            DeviceService__pb2.GetReport_Parameters.SerializeToString,
            DeviceService__pb2.GetReport_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTComp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetTComp',
            DeviceService__pb2.GetTComp_Parameters.SerializeToString,
            DeviceService__pb2.GetTComp_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTComp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SetTComp',
            DeviceService__pb2.SetTComp_Parameters.SerializeToString,
            DeviceService__pb2.SetTComp_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDynAveraging(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetDynAveraging',
            DeviceService__pb2.GetDynAveraging_Parameters.SerializeToString,
            DeviceService__pb2.GetDynAveraging_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDynAveraging(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SetDynAveraging',
            DeviceService__pb2.SetDynAveraging_Parameters.SerializeToString,
            DeviceService__pb2.SetDynAveraging_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SwitchOffDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SwitchOffDevice',
            DeviceService__pb2.SwitchOffDevice_Parameters.SerializeToString,
            DeviceService__pb2.SwitchOffDevice_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_CurrentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/Subscribe_CurrentStatus',
            DeviceService__pb2.Subscribe_CurrentStatus_Parameters.SerializeToString,
            DeviceService__pb2.Subscribe_CurrentStatus_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
