# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import CalibrationService_pb2 as CalibrationService__pb2


class CalibrationServiceStub(object):
    """Feature: Calibration Service

    Calibrate the sensor bars by adjusting the temperature compensation and the dynamic averaging value.
    By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 14.02.2020

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetO2CalLow = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetO2CalLow',
                request_serializer=CalibrationService__pb2.GetO2CalLow_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetO2CalLow_Responses.FromString,
                )
        self.SetO2CalLow = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetO2CalLow',
                request_serializer=CalibrationService__pb2.SetO2CalLow_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetO2CalLow_Responses.FromString,
                )
        self.GetO2CalHigh = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetO2CalHigh',
                request_serializer=CalibrationService__pb2.GetO2CalHigh_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetO2CalHigh_Responses.FromString,
                )
        self.SetO2CalHigh = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetO2CalHigh',
                request_serializer=CalibrationService__pb2.SetO2CalHigh_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetO2CalHigh_Responses.FromString,
                )
        self.GetO2CalTemp = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetO2CalTemp',
                request_serializer=CalibrationService__pb2.GetO2CalTemp_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetO2CalTemp_Responses.FromString,
                )
        self.SetO2CalTemp = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetO2CalTemp',
                request_serializer=CalibrationService__pb2.SetO2CalTemp_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetO2CalTemp_Responses.FromString,
                )
        self.GetPHImax = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetPHImax',
                request_serializer=CalibrationService__pb2.GetPHImax_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetPHImax_Responses.FromString,
                )
        self.SetPHImax = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetPHImax',
                request_serializer=CalibrationService__pb2.SetPHImax_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetPHImax_Responses.FromString,
                )
        self.GetPHImin = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetPHImin',
                request_serializer=CalibrationService__pb2.GetPHImin_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetPHImin_Responses.FromString,
                )
        self.SetPHImin = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetPHImin',
                request_serializer=CalibrationService__pb2.SetPHImin_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetPHImin_Responses.FromString,
                )
        self.GetPHpH0 = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetPHpH0',
                request_serializer=CalibrationService__pb2.GetPHpH0_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetPHpH0_Responses.FromString,
                )
        self.SetPHpH0 = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetPHpH0',
                request_serializer=CalibrationService__pb2.SetPHpH0_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetPHpH0_Responses.FromString,
                )
        self.GetPHdpH = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetPHdpH',
                request_serializer=CalibrationService__pb2.GetPHdpH_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetPHdpH_Responses.FromString,
                )
        self.SetPHdpH = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetPHdpH',
                request_serializer=CalibrationService__pb2.SetPHdpH_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetPHdpH_Responses.FromString,
                )
        self.GetPHCalTemp = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetPHCalTemp',
                request_serializer=CalibrationService__pb2.GetPHCalTemp_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.GetPHCalTemp_Responses.FromString,
                )
        self.SetPHCalTemp = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetPHCalTemp',
                request_serializer=CalibrationService__pb2.SetPHCalTemp_Parameters.SerializeToString,
                response_deserializer=CalibrationService__pb2.SetPHCalTemp_Responses.FromString,
                )


class CalibrationServiceServicer(object):
    """Feature: Calibration Service

    Calibrate the sensor bars by adjusting the temperature compensation and the dynamic averaging value.
    By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 14.02.2020

    """

    def GetO2CalLow(self, request, context):
        """Get O2 Calibration Low
        Get the O2 calibration point value at 0% dissolved oxygen.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetO2CalLow(self, request, context):
        """Set O2 Calibration Low
        Set the O2 calibration point value at 0% dissolved oxygen. Default = 57.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetO2CalHigh(self, request, context):
        """Get O2 Calibration High
        Get the O2 calibration point value at 100% dissolved oxygen. Default = 27.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetO2CalHigh(self, request, context):
        """Set O2 Calibration High
        Set the O2 calibration point value at 100% dissolved oxygen. Default = 27.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetO2CalTemp(self, request, context):
        """Get O2 Calibration Temperature
        Get the value of the oxygen sensor calibration temperature in degrees Celsius. Default = 20.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetO2CalTemp(self, request, context):
        """Set O2 Calibration Temperature
        Set the value of the oxygen calibration temperature in degree Celsius. Default = 20.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPHImax(self, request, context):
        """Get phi max
        Get the given value of the first calibration point (phi max) of the pH sensor. Default = 0.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPHImax(self, request, context):
        """Set phi max
        Set the value of the first calibration point (phi max) of the pH sensor. Default = 0.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPHImin(self, request, context):
        """Get phi min
        Get the given value of the second calibration point (phi min) of the pH sensor. Default = -.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPHImin(self, request, context):
        """Set phi min
        Set the value of the second calibration point (phi min) of the pH sensor. Default = -.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPHpH0(self, request, context):
        """Get PH pH0
        Get the given value of the third calibration point (pH0) of the pH sensor. Default = 0.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPHpH0(self, request, context):
        """Set PH pH0
        Set the value of the third calibration point (pH0) of the pH sensor. Default = 0.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPHdpH(self, request, context):
        """Get PH dpH
        Get the given value of the fourth calibration point (dpH) of the pH sensor. Default = 0.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPHdpH(self, request, context):
        """Set PH dpH
        Set the value of the fourth calibration point (dpH) of the pH sensor. Default = 0.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPHCalTemp(self, request, context):
        """Get PH Calibration Temperature
        Get the value of the pH sensor calibration temperature in degree Celsius. Default = 20.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPHCalTemp(self, request, context):
        """Set PH Calibration Temperature
        Set the value of the pH calibration temperature in degree Celsius. Default = 20.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalibrationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetO2CalLow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetO2CalLow,
                    request_deserializer=CalibrationService__pb2.GetO2CalLow_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetO2CalLow_Responses.SerializeToString,
            ),
            'SetO2CalLow': grpc.unary_unary_rpc_method_handler(
                    servicer.SetO2CalLow,
                    request_deserializer=CalibrationService__pb2.SetO2CalLow_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetO2CalLow_Responses.SerializeToString,
            ),
            'GetO2CalHigh': grpc.unary_unary_rpc_method_handler(
                    servicer.GetO2CalHigh,
                    request_deserializer=CalibrationService__pb2.GetO2CalHigh_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetO2CalHigh_Responses.SerializeToString,
            ),
            'SetO2CalHigh': grpc.unary_unary_rpc_method_handler(
                    servicer.SetO2CalHigh,
                    request_deserializer=CalibrationService__pb2.SetO2CalHigh_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetO2CalHigh_Responses.SerializeToString,
            ),
            'GetO2CalTemp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetO2CalTemp,
                    request_deserializer=CalibrationService__pb2.GetO2CalTemp_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetO2CalTemp_Responses.SerializeToString,
            ),
            'SetO2CalTemp': grpc.unary_unary_rpc_method_handler(
                    servicer.SetO2CalTemp,
                    request_deserializer=CalibrationService__pb2.SetO2CalTemp_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetO2CalTemp_Responses.SerializeToString,
            ),
            'GetPHImax': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPHImax,
                    request_deserializer=CalibrationService__pb2.GetPHImax_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetPHImax_Responses.SerializeToString,
            ),
            'SetPHImax': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPHImax,
                    request_deserializer=CalibrationService__pb2.SetPHImax_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetPHImax_Responses.SerializeToString,
            ),
            'GetPHImin': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPHImin,
                    request_deserializer=CalibrationService__pb2.GetPHImin_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetPHImin_Responses.SerializeToString,
            ),
            'SetPHImin': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPHImin,
                    request_deserializer=CalibrationService__pb2.SetPHImin_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetPHImin_Responses.SerializeToString,
            ),
            'GetPHpH0': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPHpH0,
                    request_deserializer=CalibrationService__pb2.GetPHpH0_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetPHpH0_Responses.SerializeToString,
            ),
            'SetPHpH0': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPHpH0,
                    request_deserializer=CalibrationService__pb2.SetPHpH0_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetPHpH0_Responses.SerializeToString,
            ),
            'GetPHdpH': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPHdpH,
                    request_deserializer=CalibrationService__pb2.GetPHdpH_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetPHdpH_Responses.SerializeToString,
            ),
            'SetPHdpH': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPHdpH,
                    request_deserializer=CalibrationService__pb2.SetPHdpH_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetPHdpH_Responses.SerializeToString,
            ),
            'GetPHCalTemp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPHCalTemp,
                    request_deserializer=CalibrationService__pb2.GetPHCalTemp_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.GetPHCalTemp_Responses.SerializeToString,
            ),
            'SetPHCalTemp': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPHCalTemp,
                    request_deserializer=CalibrationService__pb2.SetPHCalTemp_Parameters.FromString,
                    response_serializer=CalibrationService__pb2.SetPHCalTemp_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CalibrationService(object):
    """Feature: Calibration Service

    Calibrate the sensor bars by adjusting the temperature compensation and the dynamic averaging value.
    By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 14.02.2020

    """

    @staticmethod
    def GetO2CalLow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetO2CalLow',
            CalibrationService__pb2.GetO2CalLow_Parameters.SerializeToString,
            CalibrationService__pb2.GetO2CalLow_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetO2CalLow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetO2CalLow',
            CalibrationService__pb2.SetO2CalLow_Parameters.SerializeToString,
            CalibrationService__pb2.SetO2CalLow_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetO2CalHigh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetO2CalHigh',
            CalibrationService__pb2.GetO2CalHigh_Parameters.SerializeToString,
            CalibrationService__pb2.GetO2CalHigh_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetO2CalHigh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetO2CalHigh',
            CalibrationService__pb2.SetO2CalHigh_Parameters.SerializeToString,
            CalibrationService__pb2.SetO2CalHigh_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetO2CalTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetO2CalTemp',
            CalibrationService__pb2.GetO2CalTemp_Parameters.SerializeToString,
            CalibrationService__pb2.GetO2CalTemp_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetO2CalTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetO2CalTemp',
            CalibrationService__pb2.SetO2CalTemp_Parameters.SerializeToString,
            CalibrationService__pb2.SetO2CalTemp_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPHImax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetPHImax',
            CalibrationService__pb2.GetPHImax_Parameters.SerializeToString,
            CalibrationService__pb2.GetPHImax_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPHImax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetPHImax',
            CalibrationService__pb2.SetPHImax_Parameters.SerializeToString,
            CalibrationService__pb2.SetPHImax_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPHImin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetPHImin',
            CalibrationService__pb2.GetPHImin_Parameters.SerializeToString,
            CalibrationService__pb2.GetPHImin_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPHImin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetPHImin',
            CalibrationService__pb2.SetPHImin_Parameters.SerializeToString,
            CalibrationService__pb2.SetPHImin_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPHpH0(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetPHpH0',
            CalibrationService__pb2.GetPHpH0_Parameters.SerializeToString,
            CalibrationService__pb2.GetPHpH0_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPHpH0(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetPHpH0',
            CalibrationService__pb2.SetPHpH0_Parameters.SerializeToString,
            CalibrationService__pb2.SetPHpH0_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPHdpH(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetPHdpH',
            CalibrationService__pb2.GetPHdpH_Parameters.SerializeToString,
            CalibrationService__pb2.GetPHdpH_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPHdpH(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetPHdpH',
            CalibrationService__pb2.SetPHdpH_Parameters.SerializeToString,
            CalibrationService__pb2.SetPHdpH_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPHCalTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/GetPHCalTemp',
            CalibrationService__pb2.GetPHCalTemp_Parameters.SerializeToString,
            CalibrationService__pb2.GetPHCalTemp_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPHCalTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.calibrationservice.v1.CalibrationService/SetPHCalTemp',
            CalibrationService__pb2.SetPHCalTemp_Parameters.SerializeToString,
            CalibrationService__pb2.SetPHCalTemp_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
