# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import DeviceController_pb2 as DeviceController__pb2


class DeviceControllerStub(object):
  """Feature: Device Controller

  Allows full control of the stirrer speed and power. Starts and stops the stirrer of the bioREACTOR48.
  By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 14.02.2020

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetReport = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.devicecontroller.v1.DeviceController/GetReport',
        request_serializer=DeviceController__pb2.GetReport_Parameters.SerializeToString,
        response_deserializer=DeviceController__pb2.GetReport_Responses.FromString,
        )
    self.GetTComp = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.devicecontroller.v1.DeviceController/GetTComp',
        request_serializer=DeviceController__pb2.GetTComp_Parameters.SerializeToString,
        response_deserializer=DeviceController__pb2.GetTComp_Responses.FromString,
        )
    self.SetTComp = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.devicecontroller.v1.DeviceController/SetTComp',
        request_serializer=DeviceController__pb2.SetTComp_Parameters.SerializeToString,
        response_deserializer=DeviceController__pb2.SetTComp_Responses.FromString,
        )
    self.GetDynAveraging = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.devicecontroller.v1.DeviceController/GetDynAveraging',
        request_serializer=DeviceController__pb2.GetDynAveraging_Parameters.SerializeToString,
        response_deserializer=DeviceController__pb2.GetDynAveraging_Responses.FromString,
        )
    self.SetDynAveraging = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.devicecontroller.v1.DeviceController/SetDynAveraging',
        request_serializer=DeviceController__pb2.SetDynAveraging_Parameters.SerializeToString,
        response_deserializer=DeviceController__pb2.SetDynAveraging_Responses.FromString,
        )
    self.SwitchOffDevice = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.devicecontroller.v1.DeviceController/SwitchOffDevice',
        request_serializer=DeviceController__pb2.SwitchOffDevice_Parameters.SerializeToString,
        response_deserializer=DeviceController__pb2.SwitchOffDevice_Responses.FromString,
        )


class DeviceControllerServicer(object):
  """Feature: Device Controller

  Allows full control of the stirrer speed and power. Starts and stops the stirrer of the bioREACTOR48.
  By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 14.02.2020

  """

  def GetReport(self, request, context):
    """Get Report
    Get a full device report.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTComp(self, request, context):
    """Get Temperature Compensation
    Get the temperature compensation value.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetTComp(self, request, context):
    """Set Temperature Compensation
    Set the temperature compensation value. Values must be between 0-60 degrees Celsius. Default = 20.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetDynAveraging(self, request, context):
    """Get Dynamic Averaging
    Get the dynamic averaging value.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetDynAveraging(self, request, context):
    """Set Dynamic Averaging
    Set the dynamic averaging value.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SwitchOffDevice(self, request, context):
    """Switch Off Device
    Switch off the device to save power.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DeviceControllerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetReport': grpc.unary_unary_rpc_method_handler(
          servicer.GetReport,
          request_deserializer=DeviceController__pb2.GetReport_Parameters.FromString,
          response_serializer=DeviceController__pb2.GetReport_Responses.SerializeToString,
      ),
      'GetTComp': grpc.unary_unary_rpc_method_handler(
          servicer.GetTComp,
          request_deserializer=DeviceController__pb2.GetTComp_Parameters.FromString,
          response_serializer=DeviceController__pb2.GetTComp_Responses.SerializeToString,
      ),
      'SetTComp': grpc.unary_unary_rpc_method_handler(
          servicer.SetTComp,
          request_deserializer=DeviceController__pb2.SetTComp_Parameters.FromString,
          response_serializer=DeviceController__pb2.SetTComp_Responses.SerializeToString,
      ),
      'GetDynAveraging': grpc.unary_unary_rpc_method_handler(
          servicer.GetDynAveraging,
          request_deserializer=DeviceController__pb2.GetDynAveraging_Parameters.FromString,
          response_serializer=DeviceController__pb2.GetDynAveraging_Responses.SerializeToString,
      ),
      'SetDynAveraging': grpc.unary_unary_rpc_method_handler(
          servicer.SetDynAveraging,
          request_deserializer=DeviceController__pb2.SetDynAveraging_Parameters.FromString,
          response_serializer=DeviceController__pb2.SetDynAveraging_Responses.SerializeToString,
      ),
      'SwitchOffDevice': grpc.unary_unary_rpc_method_handler(
          servicer.SwitchOffDevice,
          request_deserializer=DeviceController__pb2.SwitchOffDevice_Parameters.FromString,
          response_serializer=DeviceController__pb2.SwitchOffDevice_Responses.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sila2.biovt.mw.tum.de.examples.devicecontroller.v1.DeviceController', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
