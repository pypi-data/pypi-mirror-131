# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import ReactorServicer_pb2 as ReactorServicer__pb2


class ReactorServicerStub(object):
  """Feature: Reactor Servicer

  Control a DASGIP reactor module. Enables read and write operations for various parameters, including reactor
  sensor, controller, and alarm.
  By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 20.05.2019

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetVInitial = channel.unary_unary(
        '/sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer/GetVInitial',
        request_serializer=ReactorServicer__pb2.GetVInitial_Parameters.SerializeToString,
        response_deserializer=ReactorServicer__pb2.GetVInitial_Responses.FromString,
        )
    self.SetVInitial = channel.unary_unary(
        '/sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer/SetVInitial',
        request_serializer=ReactorServicer__pb2.SetVInitial_Parameters.SerializeToString,
        response_deserializer=ReactorServicer__pb2.SetVInitial_Responses.FromString,
        )
    self.GetVLiquid = channel.unary_unary(
        '/sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer/GetVLiquid',
        request_serializer=ReactorServicer__pb2.GetVLiquid_Parameters.SerializeToString,
        response_deserializer=ReactorServicer__pb2.GetVLiquid_Responses.FromString,
        )
    self.SetVLiquid = channel.unary_unary(
        '/sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer/SetVLiquid',
        request_serializer=ReactorServicer__pb2.SetVLiquid_Parameters.SerializeToString,
        response_deserializer=ReactorServicer__pb2.SetVLiquid_Responses.FromString,
        )
    self.GetVMax = channel.unary_unary(
        '/sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer/GetVMax',
        request_serializer=ReactorServicer__pb2.GetVMax_Parameters.SerializeToString,
        response_deserializer=ReactorServicer__pb2.GetVMax_Responses.FromString,
        )
    self.SetVMax = channel.unary_unary(
        '/sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer/SetVMax',
        request_serializer=ReactorServicer__pb2.SetVMax_Parameters.SerializeToString,
        response_deserializer=ReactorServicer__pb2.SetVMax_Responses.FromString,
        )
    self.GetVMin = channel.unary_unary(
        '/sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer/GetVMin',
        request_serializer=ReactorServicer__pb2.GetVMin_Parameters.SerializeToString,
        response_deserializer=ReactorServicer__pb2.GetVMin_Responses.FromString,
        )
    self.SetVMin = channel.unary_unary(
        '/sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer/SetVMin',
        request_serializer=ReactorServicer__pb2.SetVMin_Parameters.SerializeToString,
        response_deserializer=ReactorServicer__pb2.SetVMin_Responses.FromString,
        )
    self.GetVTotal = channel.unary_unary(
        '/sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer/GetVTotal',
        request_serializer=ReactorServicer__pb2.GetVTotal_Parameters.SerializeToString,
        response_deserializer=ReactorServicer__pb2.GetVTotal_Responses.FromString,
        )
    self.SetVTotal = channel.unary_unary(
        '/sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer/SetVTotal',
        request_serializer=ReactorServicer__pb2.SetVTotal_Parameters.SerializeToString,
        response_deserializer=ReactorServicer__pb2.SetVTotal_Responses.FromString,
        )


class ReactorServicerServicer(object):
  """Feature: Reactor Servicer

  Control a DASGIP reactor module. Enables read and write operations for various parameters, including reactor
  sensor, controller, and alarm.
  By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 20.05.2019

  """

  def GetVInitial(self, request, context):
    """Get VInitial
    Get initial liquid volume value. Initial liquid volume (initial working volume).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetVInitial(self, request, context):
    """Set VInitial

    Set the reactor initial liquid volume value. Initial liquid volume (initial working volume).

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetVLiquid(self, request, context):
    """Get VLiquid
    Get actual liquid volume value. Actual liquid volume (working volume).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetVLiquid(self, request, context):
    """Set VLiquid

    Set the reactor actual liquid volume value. Actual liquid volume (working volume).

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetVMax(self, request, context):
    """Get VMax
    Get max liquid volume value. Max allowed liquid volume.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetVMax(self, request, context):
    """Set VMax

    Set the reactor max liquid volume value. Max allowed liquid volume.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetVMin(self, request, context):
    """Get VMin
    Get min liquid volume value. Min allowed liquid volume.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetVMin(self, request, context):
    """Set VMin

    Set the reactor min liquid volume value. Min allowed liquid volume.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetVTotal(self, request, context):
    """Get VTotal
    Get total liquid volume value. Total vessel volume.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetVTotal(self, request, context):
    """Set VTotal

    Set the reactor total liquid volume value. Total vessel volume.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ReactorServicerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetVInitial': grpc.unary_unary_rpc_method_handler(
          servicer.GetVInitial,
          request_deserializer=ReactorServicer__pb2.GetVInitial_Parameters.FromString,
          response_serializer=ReactorServicer__pb2.GetVInitial_Responses.SerializeToString,
      ),
      'SetVInitial': grpc.unary_unary_rpc_method_handler(
          servicer.SetVInitial,
          request_deserializer=ReactorServicer__pb2.SetVInitial_Parameters.FromString,
          response_serializer=ReactorServicer__pb2.SetVInitial_Responses.SerializeToString,
      ),
      'GetVLiquid': grpc.unary_unary_rpc_method_handler(
          servicer.GetVLiquid,
          request_deserializer=ReactorServicer__pb2.GetVLiquid_Parameters.FromString,
          response_serializer=ReactorServicer__pb2.GetVLiquid_Responses.SerializeToString,
      ),
      'SetVLiquid': grpc.unary_unary_rpc_method_handler(
          servicer.SetVLiquid,
          request_deserializer=ReactorServicer__pb2.SetVLiquid_Parameters.FromString,
          response_serializer=ReactorServicer__pb2.SetVLiquid_Responses.SerializeToString,
      ),
      'GetVMax': grpc.unary_unary_rpc_method_handler(
          servicer.GetVMax,
          request_deserializer=ReactorServicer__pb2.GetVMax_Parameters.FromString,
          response_serializer=ReactorServicer__pb2.GetVMax_Responses.SerializeToString,
      ),
      'SetVMax': grpc.unary_unary_rpc_method_handler(
          servicer.SetVMax,
          request_deserializer=ReactorServicer__pb2.SetVMax_Parameters.FromString,
          response_serializer=ReactorServicer__pb2.SetVMax_Responses.SerializeToString,
      ),
      'GetVMin': grpc.unary_unary_rpc_method_handler(
          servicer.GetVMin,
          request_deserializer=ReactorServicer__pb2.GetVMin_Parameters.FromString,
          response_serializer=ReactorServicer__pb2.GetVMin_Responses.SerializeToString,
      ),
      'SetVMin': grpc.unary_unary_rpc_method_handler(
          servicer.SetVMin,
          request_deserializer=ReactorServicer__pb2.SetVMin_Parameters.FromString,
          response_serializer=ReactorServicer__pb2.SetVMin_Responses.SerializeToString,
      ),
      'GetVTotal': grpc.unary_unary_rpc_method_handler(
          servicer.GetVTotal,
          request_deserializer=ReactorServicer__pb2.GetVTotal_Parameters.FromString,
          response_serializer=ReactorServicer__pb2.GetVTotal_Responses.SerializeToString,
      ),
      'SetVTotal': grpc.unary_unary_rpc_method_handler(
          servicer.SetVTotal,
          request_deserializer=ReactorServicer__pb2.SetVTotal_Parameters.FromString,
          response_serializer=ReactorServicer__pb2.SetVTotal_Responses.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sila2.org.silastandard.examples.reactorservicer.v1.ReactorServicer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
