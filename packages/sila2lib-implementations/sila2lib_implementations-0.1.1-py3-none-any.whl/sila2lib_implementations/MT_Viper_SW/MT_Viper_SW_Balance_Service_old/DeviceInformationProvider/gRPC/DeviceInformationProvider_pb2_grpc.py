# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import DeviceInformationProvider_pb2 as DeviceInformationProvider__pb2


class DeviceInformationProviderStub(object):
    """Feature: Device Information Provider

    General device information regarding firmware and hardware can be retrieved and changed within this feature.
    By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 07.04.2021

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Reset = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Reset',
                request_serializer=DeviceInformationProvider__pb2.Reset_Parameters.SerializeToString,
                response_deserializer=DeviceInformationProvider__pb2.Reset_Responses.FromString,
                )
        self.Get_ImplementedCommands = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_ImplementedCommands',
                request_serializer=DeviceInformationProvider__pb2.Get_ImplementedCommands_Parameters.SerializeToString,
                response_deserializer=DeviceInformationProvider__pb2.Get_ImplementedCommands_Responses.FromString,
                )
        self.Get_DeviceType = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_DeviceType',
                request_serializer=DeviceInformationProvider__pb2.Get_DeviceType_Parameters.SerializeToString,
                response_deserializer=DeviceInformationProvider__pb2.Get_DeviceType_Responses.FromString,
                )
        self.Get_WeighingCapacity = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_WeighingCapacity',
                request_serializer=DeviceInformationProvider__pb2.Get_WeighingCapacity_Parameters.SerializeToString,
                response_deserializer=DeviceInformationProvider__pb2.Get_WeighingCapacity_Responses.FromString,
                )
        self.Get_FirmwareVersion = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_FirmwareVersion',
                request_serializer=DeviceInformationProvider__pb2.Get_FirmwareVersion_Parameters.SerializeToString,
                response_deserializer=DeviceInformationProvider__pb2.Get_FirmwareVersion_Responses.FromString,
                )
        self.Get_TypeDefinitionNumber = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_TypeDefinitionNumber',
                request_serializer=DeviceInformationProvider__pb2.Get_TypeDefinitionNumber_Parameters.SerializeToString,
                response_deserializer=DeviceInformationProvider__pb2.Get_TypeDefinitionNumber_Responses.FromString,
                )
        self.Get_SerialNumber = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_SerialNumber',
                request_serializer=DeviceInformationProvider__pb2.Get_SerialNumber_Parameters.SerializeToString,
                response_deserializer=DeviceInformationProvider__pb2.Get_SerialNumber_Responses.FromString,
                )


class DeviceInformationProviderServicer(object):
    """Feature: Device Information Provider

    General device information regarding firmware and hardware can be retrieved and changed within this feature.
    By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 07.04.2021

    """

    def Reset(self, request, context):
        """Reset
        Get the current status of the device from the state machine of the SiLA server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_ImplementedCommands(self, request, context):
        """Implemented Commands
        Lists all commands implemented in the present software version. All commands (MT-SICS) ordered according to level in
        alphabetical order.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_DeviceType(self, request, context):
        """Device Type
        Query device type.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_WeighingCapacity(self, request, context):
        """Weighing Capacity
        Query weighing capacity. The maximum allowed balance capacity in g.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_FirmwareVersion(self, request, context):
        """Firmware Version
        Provides the software version number
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_TypeDefinitionNumber(self, request, context):
        """Type Definition Number
        Provides the type definition number
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_SerialNumber(self, request, context):
        """Serial Number
        Query the serial number of the balance terminal. The serial number agrees with that on the model plate and is different
        for every MT balance. If no terminal is present, the SN of the bridge is issued instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceInformationProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=DeviceInformationProvider__pb2.Reset_Parameters.FromString,
                    response_serializer=DeviceInformationProvider__pb2.Reset_Responses.SerializeToString,
            ),
            'Get_ImplementedCommands': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_ImplementedCommands,
                    request_deserializer=DeviceInformationProvider__pb2.Get_ImplementedCommands_Parameters.FromString,
                    response_serializer=DeviceInformationProvider__pb2.Get_ImplementedCommands_Responses.SerializeToString,
            ),
            'Get_DeviceType': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_DeviceType,
                    request_deserializer=DeviceInformationProvider__pb2.Get_DeviceType_Parameters.FromString,
                    response_serializer=DeviceInformationProvider__pb2.Get_DeviceType_Responses.SerializeToString,
            ),
            'Get_WeighingCapacity': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_WeighingCapacity,
                    request_deserializer=DeviceInformationProvider__pb2.Get_WeighingCapacity_Parameters.FromString,
                    response_serializer=DeviceInformationProvider__pb2.Get_WeighingCapacity_Responses.SerializeToString,
            ),
            'Get_FirmwareVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_FirmwareVersion,
                    request_deserializer=DeviceInformationProvider__pb2.Get_FirmwareVersion_Parameters.FromString,
                    response_serializer=DeviceInformationProvider__pb2.Get_FirmwareVersion_Responses.SerializeToString,
            ),
            'Get_TypeDefinitionNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_TypeDefinitionNumber,
                    request_deserializer=DeviceInformationProvider__pb2.Get_TypeDefinitionNumber_Parameters.FromString,
                    response_serializer=DeviceInformationProvider__pb2.Get_TypeDefinitionNumber_Responses.SerializeToString,
            ),
            'Get_SerialNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_SerialNumber,
                    request_deserializer=DeviceInformationProvider__pb2.Get_SerialNumber_Parameters.FromString,
                    response_serializer=DeviceInformationProvider__pb2.Get_SerialNumber_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeviceInformationProvider(object):
    """Feature: Device Information Provider

    General device information regarding firmware and hardware can be retrieved and changed within this feature.
    By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 07.04.2021

    """

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Reset',
            DeviceInformationProvider__pb2.Reset_Parameters.SerializeToString,
            DeviceInformationProvider__pb2.Reset_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_ImplementedCommands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_ImplementedCommands',
            DeviceInformationProvider__pb2.Get_ImplementedCommands_Parameters.SerializeToString,
            DeviceInformationProvider__pb2.Get_ImplementedCommands_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_DeviceType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_DeviceType',
            DeviceInformationProvider__pb2.Get_DeviceType_Parameters.SerializeToString,
            DeviceInformationProvider__pb2.Get_DeviceType_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_WeighingCapacity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_WeighingCapacity',
            DeviceInformationProvider__pb2.Get_WeighingCapacity_Parameters.SerializeToString,
            DeviceInformationProvider__pb2.Get_WeighingCapacity_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_FirmwareVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_FirmwareVersion',
            DeviceInformationProvider__pb2.Get_FirmwareVersion_Parameters.SerializeToString,
            DeviceInformationProvider__pb2.Get_FirmwareVersion_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_TypeDefinitionNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_TypeDefinitionNumber',
            DeviceInformationProvider__pb2.Get_TypeDefinitionNumber_Parameters.SerializeToString,
            DeviceInformationProvider__pb2.Get_TypeDefinitionNumber_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_SerialNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceinformationprovider.v1.DeviceInformationProvider/Get_SerialNumber',
            DeviceInformationProvider__pb2.Get_SerialNumber_Parameters.SerializeToString,
            DeviceInformationProvider__pb2.Get_SerialNumber_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
