# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import TemperatureControlServicer_pb2 as TemperatureControlServicer__pb2


class TemperatureControlServicerStub(object):
  """Feature: Temperature Control Servicer

  Set and retrieve information regarding the temperature setpoints and current temperature readings of the
  LAUDA LOOP 250 thermostat. Setpoint thresholds may be defined within the range of the upper and lower temperature limits
  THi and TLo.
  By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 20.05.2019

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetPointTemperature = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.temperaturecontrolservicer.v1.TemperatureControlServicer/SetPointTemperature',
        request_serializer=TemperatureControlServicer__pb2.SetPointTemperature_Parameters.SerializeToString,
        response_deserializer=TemperatureControlServicer__pb2.SetPointTemperature_Responses.FromString,
        )
    self.SetUpperLimTemperature = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.temperaturecontrolservicer.v1.TemperatureControlServicer/SetUpperLimTemperature',
        request_serializer=TemperatureControlServicer__pb2.SetUpperLimTemperature_Parameters.SerializeToString,
        response_deserializer=TemperatureControlServicer__pb2.SetUpperLimTemperature_Responses.FromString,
        )
    self.SetLowerLimTemperature = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.temperaturecontrolservicer.v1.TemperatureControlServicer/SetLowerLimTemperature',
        request_serializer=TemperatureControlServicer__pb2.SetLowerLimTemperature_Parameters.SerializeToString,
        response_deserializer=TemperatureControlServicer__pb2.SetLowerLimTemperature_Responses.FromString,
        )
    self.GetFeedLineTemperature = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.temperaturecontrolservicer.v1.TemperatureControlServicer/GetFeedLineTemperature',
        request_serializer=TemperatureControlServicer__pb2.GetFeedLineTemperature_Parameters.SerializeToString,
        response_deserializer=TemperatureControlServicer__pb2.GetFeedLineTemperature_Responses.FromString,
        )
    self.GetSetpointTemperature = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.temperaturecontrolservicer.v1.TemperatureControlServicer/GetSetpointTemperature',
        request_serializer=TemperatureControlServicer__pb2.GetSetpointTemperature_Parameters.SerializeToString,
        response_deserializer=TemperatureControlServicer__pb2.GetSetpointTemperature_Responses.FromString,
        )
    self.GetUpperLimTemperature = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.temperaturecontrolservicer.v1.TemperatureControlServicer/GetUpperLimTemperature',
        request_serializer=TemperatureControlServicer__pb2.GetUpperLimTemperature_Parameters.SerializeToString,
        response_deserializer=TemperatureControlServicer__pb2.GetUpperLimTemperature_Responses.FromString,
        )
    self.GetLowerLimTemperature = channel.unary_unary(
        '/sila2.biovt.mw.tum.de.examples.temperaturecontrolservicer.v1.TemperatureControlServicer/GetLowerLimTemperature',
        request_serializer=TemperatureControlServicer__pb2.GetLowerLimTemperature_Parameters.SerializeToString,
        response_deserializer=TemperatureControlServicer__pb2.GetLowerLimTemperature_Responses.FromString,
        )


class TemperatureControlServicerServicer(object):
  """Feature: Temperature Control Servicer

  Set and retrieve information regarding the temperature setpoints and current temperature readings of the
  LAUDA LOOP 250 thermostat. Setpoint thresholds may be defined within the range of the upper and lower temperature limits
  THi and TLo.
  By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 20.05.2019

  """

  def SetPointTemperature(self, request, context):
    """Set Temperature value
    Set the desired temperature of the thermostat
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetUpperLimTemperature(self, request, context):
    """Set Upper Lim Temperature Value

    Set the upper limit of the feed line temperature of the thermostat, Tih.
    The temperature limits restrict the input range of the temperature setpoint, Tset.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetLowerLimTemperature(self, request, context):
    """Set Lower Lim Temperature Value

    Set the lower limit of the feed line temperature of the thermostat, Til.
    The temperature limits restrict the input range of the temperature setpoint, Tset.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetFeedLineTemperature(self, request, context):
    """Get Feed Line Temperature
    Get Feed Line Temperature of the Thermostat.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSetpointTemperature(self, request, context):
    """Get Setpoint Temperature value
    Get the desired setpoint temperature of the thermostat
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetUpperLimTemperature(self, request, context):
    """Get Upper Lim Temperature
    Get upper limit temperature.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLowerLimTemperature(self, request, context):
    """Get Lower Lim Temperature
    Get lower limit temperature.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TemperatureControlServicerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetPointTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.SetPointTemperature,
          request_deserializer=TemperatureControlServicer__pb2.SetPointTemperature_Parameters.FromString,
          response_serializer=TemperatureControlServicer__pb2.SetPointTemperature_Responses.SerializeToString,
      ),
      'SetUpperLimTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.SetUpperLimTemperature,
          request_deserializer=TemperatureControlServicer__pb2.SetUpperLimTemperature_Parameters.FromString,
          response_serializer=TemperatureControlServicer__pb2.SetUpperLimTemperature_Responses.SerializeToString,
      ),
      'SetLowerLimTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.SetLowerLimTemperature,
          request_deserializer=TemperatureControlServicer__pb2.SetLowerLimTemperature_Parameters.FromString,
          response_serializer=TemperatureControlServicer__pb2.SetLowerLimTemperature_Responses.SerializeToString,
      ),
      'GetFeedLineTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.GetFeedLineTemperature,
          request_deserializer=TemperatureControlServicer__pb2.GetFeedLineTemperature_Parameters.FromString,
          response_serializer=TemperatureControlServicer__pb2.GetFeedLineTemperature_Responses.SerializeToString,
      ),
      'GetSetpointTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.GetSetpointTemperature,
          request_deserializer=TemperatureControlServicer__pb2.GetSetpointTemperature_Parameters.FromString,
          response_serializer=TemperatureControlServicer__pb2.GetSetpointTemperature_Responses.SerializeToString,
      ),
      'GetUpperLimTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.GetUpperLimTemperature,
          request_deserializer=TemperatureControlServicer__pb2.GetUpperLimTemperature_Parameters.FromString,
          response_serializer=TemperatureControlServicer__pb2.GetUpperLimTemperature_Responses.SerializeToString,
      ),
      'GetLowerLimTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.GetLowerLimTemperature,
          request_deserializer=TemperatureControlServicer__pb2.GetLowerLimTemperature_Parameters.FromString,
          response_serializer=TemperatureControlServicer__pb2.GetLowerLimTemperature_Responses.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sila2.biovt.mw.tum.de.examples.temperaturecontrolservicer.v1.TemperatureControlServicer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
