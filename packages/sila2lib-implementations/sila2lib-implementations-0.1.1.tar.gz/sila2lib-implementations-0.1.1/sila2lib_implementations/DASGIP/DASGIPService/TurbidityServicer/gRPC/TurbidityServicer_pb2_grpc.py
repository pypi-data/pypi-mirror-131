# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import TurbidityServicer_pb2 as TurbidityServicer__pb2


class TurbidityServicerStub(object):
  """Feature: Turbidity Servicer

  Control a DASGIP turbidity module. Enables read and write operations for various parameters, including turbidity
  sensor, controller, and alarm.
  By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 20.05.2019

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetAUPV = channel.unary_unary(
        '/sila2.org.silastandard.examples.turbidityservicer.v1.TurbidityServicer/GetAUPV',
        request_serializer=TurbidityServicer__pb2.GetAUPV_Parameters.SerializeToString,
        response_deserializer=TurbidityServicer__pb2.GetAUPV_Responses.FromString,
        )
    self.GetCXPV = channel.unary_unary(
        '/sila2.org.silastandard.examples.turbidityservicer.v1.TurbidityServicer/GetCXPV',
        request_serializer=TurbidityServicer__pb2.GetCXPV_Parameters.SerializeToString,
        response_deserializer=TurbidityServicer__pb2.GetCXPV_Responses.FromString,
        )
    self.GetType = channel.unary_unary(
        '/sila2.org.silastandard.examples.turbidityservicer.v1.TurbidityServicer/GetType',
        request_serializer=TurbidityServicer__pb2.GetType_Parameters.SerializeToString,
        response_deserializer=TurbidityServicer__pb2.GetType_Responses.FromString,
        )
    self.GetAvailable = channel.unary_unary(
        '/sila2.org.silastandard.examples.turbidityservicer.v1.TurbidityServicer/GetAvailable',
        request_serializer=TurbidityServicer__pb2.GetAvailable_Parameters.SerializeToString,
        response_deserializer=TurbidityServicer__pb2.GetAvailable_Responses.FromString,
        )
    self.GetName = channel.unary_unary(
        '/sila2.org.silastandard.examples.turbidityservicer.v1.TurbidityServicer/GetName',
        request_serializer=TurbidityServicer__pb2.GetName_Parameters.SerializeToString,
        response_deserializer=TurbidityServicer__pb2.GetName_Responses.FromString,
        )
    self.GetVersion = channel.unary_unary(
        '/sila2.org.silastandard.examples.turbidityservicer.v1.TurbidityServicer/GetVersion',
        request_serializer=TurbidityServicer__pb2.GetVersion_Parameters.SerializeToString,
        response_deserializer=TurbidityServicer__pb2.GetVersion_Responses.FromString,
        )


class TurbidityServicerServicer(object):
  """Feature: Turbidity Servicer

  Control a DASGIP turbidity module. Enables read and write operations for various parameters, including turbidity
  sensor, controller, and alarm.
  By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 20.05.2019

  """

  def GetAUPV(self, request, context):
    """Get AU PV
    Get present value in absorption unit. Turbidity signal in absorption units.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCXPV(self, request, context):
    """Get CX PV
    Get calculated turbidity present value. Calculated turbidity signal, i.e. OD600, CDW or others.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetType(self, request, context):
    """Get Function Type
    Get function type.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAvailable(self, request, context):
    """Get Function Availability
    Get function availability.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetName(self, request, context):
    """Get Function Name
    Get function name.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetVersion(self, request, context):
    """Get Function Version
    Get function model version number.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TurbidityServicerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetAUPV': grpc.unary_unary_rpc_method_handler(
          servicer.GetAUPV,
          request_deserializer=TurbidityServicer__pb2.GetAUPV_Parameters.FromString,
          response_serializer=TurbidityServicer__pb2.GetAUPV_Responses.SerializeToString,
      ),
      'GetCXPV': grpc.unary_unary_rpc_method_handler(
          servicer.GetCXPV,
          request_deserializer=TurbidityServicer__pb2.GetCXPV_Parameters.FromString,
          response_serializer=TurbidityServicer__pb2.GetCXPV_Responses.SerializeToString,
      ),
      'GetType': grpc.unary_unary_rpc_method_handler(
          servicer.GetType,
          request_deserializer=TurbidityServicer__pb2.GetType_Parameters.FromString,
          response_serializer=TurbidityServicer__pb2.GetType_Responses.SerializeToString,
      ),
      'GetAvailable': grpc.unary_unary_rpc_method_handler(
          servicer.GetAvailable,
          request_deserializer=TurbidityServicer__pb2.GetAvailable_Parameters.FromString,
          response_serializer=TurbidityServicer__pb2.GetAvailable_Responses.SerializeToString,
      ),
      'GetName': grpc.unary_unary_rpc_method_handler(
          servicer.GetName,
          request_deserializer=TurbidityServicer__pb2.GetName_Parameters.FromString,
          response_serializer=TurbidityServicer__pb2.GetName_Responses.SerializeToString,
      ),
      'GetVersion': grpc.unary_unary_rpc_method_handler(
          servicer.GetVersion,
          request_deserializer=TurbidityServicer__pb2.GetVersion_Parameters.FromString,
          response_serializer=TurbidityServicer__pb2.GetVersion_Responses.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sila2.org.silastandard.examples.turbidityservicer.v1.TurbidityServicer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
