// This file is automatically generated by sila2lib.proto_builder.proto_builder version 0.2.0
// :generation date: 2020-04-16 12:19:12
//
// ---- PLEASE DO NOT MODIFY MANUALLY !! ---

syntax = "proto3";
import "SiLAFramework.proto";
package sila2.org.silastandard.examples.pressureservicer.v1;

// Feature: Pressure Servicer
//   
//           Control a DASGIP pressure module. Enables read and write operations for various parameters, including pressure
//   sensor and controller.
//           By Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 20.05.2019
//   
service PressureServicer {
    // Get PV
    //   Get present value
    rpc GetPV(sila2.org.silastandard.examples.pressureservicer.v1.GetPV_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetPV_Responses) {}
    // Set Manual Setpoint
    //   
    //           Set the manual pressure setpoint.
    //   
    rpc SetSPM(sila2.org.silastandard.examples.pressureservicer.v1.SetSPM_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetSPM_Responses) {}
    // Set External Setpoint
    //   
    //           Set the external pressure setpoint.
    //   
    rpc SetSPE(sila2.org.silastandard.examples.pressureservicer.v1.SetSPE_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetSPE_Responses) {}
    // Get SP
    //   Get setpoint value
    rpc GetSP(sila2.org.silastandard.examples.pressureservicer.v1.GetSP_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetSP_Responses) {}
    // Get SPA
    //   Get automatic setpoint value
    rpc GetSPA(sila2.org.silastandard.examples.pressureservicer.v1.GetSPA_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetSPA_Responses) {}
    // Get SPM
    //   Get manual setpoint value
    rpc GetSPM(sila2.org.silastandard.examples.pressureservicer.v1.GetSPM_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetSPM_Responses) {}
    // Get SPE
    //   Get external setpoint value
    rpc GetSPE(sila2.org.silastandard.examples.pressureservicer.v1.GetSPE_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetSPE_Responses) {}
    // Get SPR
    //   Get remote setpoint value
    rpc GetSPR(sila2.org.silastandard.examples.pressureservicer.v1.GetSPR_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetSPR_Responses) {}
    // Get Access Mode
    //   Get access mode value. Controller access (Local, Remote).
    rpc GetAccess(sila2.org.silastandard.examples.pressureservicer.v1.GetAccess_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetAccess_Responses) {}
    // Set Controller Command
    //   
    //           Set the controller command. Controller command (Nothing, Stop, Start).
    //   
    rpc SetCmd(sila2.org.silastandard.examples.pressureservicer.v1.SetCmd_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetCmd_Responses) {}
    // Get Controller Command
    //   Get the controller command. Controller command (Nothing, Stop, Start).
    rpc GetCmd(sila2.org.silastandard.examples.pressureservicer.v1.GetCmd_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetCmd_Responses) {}
    // Set Controller Mode
    //   
    //           Set the controller mode. Controller mode (Manual, Automatic).
    //   
    rpc SetMode(sila2.org.silastandard.examples.pressureservicer.v1.SetMode_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetMode_Responses) {}
    // Get Controller Mode
    //   Get the controller mode. Controller mode (Manual, Automatic).
    rpc GetMode(sila2.org.silastandard.examples.pressureservicer.v1.GetMode_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetMode_Responses) {}
    // Set SetpointSelect
    //   
    //           Set the selected setpoint that should be used. Setpoint selection (Local, Manual, Internal, Script, External).
    //   
    rpc SetSetpointSelect(sila2.org.silastandard.examples.pressureservicer.v1.SetSetpointSelect_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetSetpointSelect_Responses) {}
    // Get SetpointSelect
    //   Get the setpoint selection. Controller state (Off, On, Error).
    rpc GetSetpointSelect(sila2.org.silastandard.examples.pressureservicer.v1.GetSetpointSelect_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetSetpointSelect_Responses) {}
    // Get State
    //   Get controller state. Controller state (Off, On, Error).
    rpc GetState(sila2.org.silastandard.examples.pressureservicer.v1.GetState_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetState_Responses) {}
    // Get Function Type
    //   Get function type.
    rpc GetType(sila2.org.silastandard.examples.pressureservicer.v1.GetType_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetType_Responses) {}
    // Get Function Availability
    //   Get function availability.
    rpc GetAvailable(sila2.org.silastandard.examples.pressureservicer.v1.GetAvailable_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetAvailable_Responses) {}
    // Get Function Name
    //   Get function name.
    rpc GetName(sila2.org.silastandard.examples.pressureservicer.v1.GetName_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetName_Responses) {}
    // Get Function Version
    //   Get function model version number.
    rpc GetVersion(sila2.org.silastandard.examples.pressureservicer.v1.GetVersion_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetVersion_Responses) {}
    // Set Sensor Offset
    //   
    //           Set the sensor offset value that should be used. Sensor offset calibration parameter.
    //   
    rpc SetSensorOffset(sila2.org.silastandard.examples.pressureservicer.v1.SetSensorOffset_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetSensorOffset_Responses) {}
    // Get Sensor Offset
    //   Get the sensor offset value that is used. Sensor offset calibration parameter.
    rpc GetSensorOffset(sila2.org.silastandard.examples.pressureservicer.v1.GetSensorOffset_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetSensorOffset_Responses) {}
    // Get Sensor PVRaw
    //   Get the sensor present raw value. Actual process raw value.
    rpc GetSensorPVRaw(sila2.org.silastandard.examples.pressureservicer.v1.GetSensorPVRaw_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetSensorPVRaw_Responses) {}
    // Set Sensor Compensation
    //   
    //           Set the sensor compensation value. Sensor temperature compensation parameter.
    //   
    rpc SetSensorCompensation(sila2.org.silastandard.examples.pressureservicer.v1.SetSensorCompensation_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetSensorCompensation_Responses) {}
    // Get Sensor Compensation
    //   Get the sensor compensation value. Sensor temperature compensation parameter.
    rpc GetSensorCompensation(sila2.org.silastandard.examples.pressureservicer.v1.GetSensorCompensation_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetSensorCompensation_Responses) {}
    // Set Controller DB
    //   
    //           Set the controller deadband value. PID controller: deadband (set to zero to disable).
    //   
    rpc SetControllerDB(sila2.org.silastandard.examples.pressureservicer.v1.SetControllerDB_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetControllerDB_Responses) {}
    // Get Controller DB
    //   Get the controller deadband value. PID controller: deadband (set to zero to disable).
    rpc GetControllerDB(sila2.org.silastandard.examples.pressureservicer.v1.GetControllerDB_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetControllerDB_Responses) {}
    // Get Controller Out
    //   Get the controller output value. PID controller: actual output value.
    rpc GetControllerOut(sila2.org.silastandard.examples.pressureservicer.v1.GetControllerOut_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetControllerOut_Responses) {}
    // Set Controller P
    //   
    //           Set the controller proportional parameter value. PID controller: proportional parameter.
    //   
    rpc SetControllerP(sila2.org.silastandard.examples.pressureservicer.v1.SetControllerP_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetControllerP_Responses) {}
    // Get Controller P
    //   Get the controller proportional parameter value. PID controller: proportional parameter.
    rpc GetControllerP(sila2.org.silastandard.examples.pressureservicer.v1.GetControllerP_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetControllerP_Responses) {}
    // Set Controller Td
    //   
    //           Set the controller differentiator time constant. PID controller: differentiator time constant (set to zero to
    //   disable).
    //   
    rpc SetControllerTd(sila2.org.silastandard.examples.pressureservicer.v1.SetControllerTd_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetControllerTd_Responses) {}
    // Get Controller Td
    //   Get the controller differentiator time constant. PID controller: differentiator time constant (set to zero to disable).
    rpc GetControllerTd(sila2.org.silastandard.examples.pressureservicer.v1.GetControllerTd_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetControllerTd_Responses) {}
    // Set Controller Ti
    //   
    //           Set the controller integrator time constant. PID controller: integrator time constant (set to zero to disable).
    //   
    rpc SetControllerTi(sila2.org.silastandard.examples.pressureservicer.v1.SetControllerTi_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetControllerTi_Responses) {}
    // Get Controller Ti
    //   Get the controller integrator time constant. PID controller: integrator time constant (set to zero to disable).
    rpc GetControllerTi(sila2.org.silastandard.examples.pressureservicer.v1.GetControllerTi_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetControllerTi_Responses) {}
    // Set Controller Min
    //   
    //           Set the controller minimal output value. PID controller: minimal output value.
    //   
    rpc SetControllerMin(sila2.org.silastandard.examples.pressureservicer.v1.SetControllerMin_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetControllerMin_Responses) {}
    // Get Controller Min
    //   Get the controller minimal output value. PID controller: minimal output value.
    rpc GetControllerMin(sila2.org.silastandard.examples.pressureservicer.v1.GetControllerMin_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetControllerMin_Responses) {}
    // Set Controller Max
    //   
    //           Set the controller maximal output value. PID controller: maximal output value.
    //   
    rpc SetControllerMax(sila2.org.silastandard.examples.pressureservicer.v1.SetControllerMax_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.SetControllerMax_Responses) {}
    // Get Controller Max
    //   Get the controller maximal output value. PID controller: maximal output value.
    rpc GetControllerMax(sila2.org.silastandard.examples.pressureservicer.v1.GetControllerMax_Parameters) returns (sila2.org.silastandard.examples.pressureservicer.v1.GetControllerMax_Responses) {}
    
    
}

// ----------------- Data Type definitions -----------------


// ------ Command Parameter and Response definitions -------
message GetPV_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetPV_Responses {
    sila2.org.silastandard.Real CurrentPV = 1;
}

message SetSPM_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real SPM = 2;
}

message SetSPM_Responses {
    sila2.org.silastandard.Real SPMSet = 1;
}

message SetSPE_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real SPE = 2;
}

message SetSPE_Responses {
    sila2.org.silastandard.Real SPESet = 1;
}

message GetSP_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetSP_Responses {
    sila2.org.silastandard.Real CurrentSP = 1;
}

message GetSPA_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetSPA_Responses {
    sila2.org.silastandard.Real CurrentSPA = 1;
}

message GetSPM_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetSPM_Responses {
    sila2.org.silastandard.Real CurrentSPM = 1;
}

message GetSPE_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetSPE_Responses {
    sila2.org.silastandard.Real CurrentSPE = 1;
}

message GetSPR_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetSPR_Responses {
    sila2.org.silastandard.Real CurrentSPR = 1;
}

message GetAccess_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetAccess_Responses {
    sila2.org.silastandard.Integer CurrentAccess = 1;
}

message SetCmd_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Cmd = 2;
}

message SetCmd_Responses {
    sila2.org.silastandard.Integer CmdSet = 1;
}

message GetCmd_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetCmd_Responses {
    sila2.org.silastandard.Integer CurrentCmd = 1;
}

message SetMode_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Mode = 2;
}

message SetMode_Responses {
    sila2.org.silastandard.Integer ModeSet = 1;
}

message GetMode_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetMode_Responses {
    sila2.org.silastandard.Integer CurrentMode = 1;
}

message SetSetpointSelect_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer SetpointSelect = 2;
}

message SetSetpointSelect_Responses {
    sila2.org.silastandard.Integer SetpointSelectSet = 1;
}

message GetSetpointSelect_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetSetpointSelect_Responses {
    sila2.org.silastandard.Integer CurrentSetpointSelect = 1;
}

message GetState_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetState_Responses {
    sila2.org.silastandard.Integer CurrentState = 1;
}

message GetType_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetType_Responses {
    sila2.org.silastandard.String CurrentType = 1;
}

message GetAvailable_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetAvailable_Responses {
    sila2.org.silastandard.Integer CurrentAvailable = 1;
}

message GetName_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetName_Responses {
    sila2.org.silastandard.String CurrentName = 1;
}

message GetVersion_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetVersion_Responses {
    sila2.org.silastandard.String CurrentVersion = 1;
}

message SetSensorOffset_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real SensorOffset = 2;
}

message SetSensorOffset_Responses {
    sila2.org.silastandard.Real SensorOffsetSet = 1;
}

message GetSensorOffset_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetSensorOffset_Responses {
    sila2.org.silastandard.Real CurrentSensorOffset = 1;
}

message GetSensorPVRaw_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetSensorPVRaw_Responses {
    sila2.org.silastandard.Real CurrentSensorPVRaw = 1;
}

message SetSensorCompensation_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real SensorCompensation = 2;
}

message SetSensorCompensation_Responses {
    sila2.org.silastandard.Real SensorCompensationSet = 1;
}

message GetSensorCompensation_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetSensorCompensation_Responses {
    sila2.org.silastandard.Real CurrentSensorCompensation = 1;
}

message SetControllerDB_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real ControllerDB = 2;
}

message SetControllerDB_Responses {
    sila2.org.silastandard.Real ControllerDBSet = 1;
}

message GetControllerDB_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetControllerDB_Responses {
    sila2.org.silastandard.Real CurrentControllerDB = 1;
}

message GetControllerOut_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetControllerOut_Responses {
    sila2.org.silastandard.Real CurrentControllerOut = 1;
}

message SetControllerP_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real ControllerP = 2;
}

message SetControllerP_Responses {
    sila2.org.silastandard.Real ControllerPSet = 1;
}

message GetControllerP_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetControllerP_Responses {
    sila2.org.silastandard.Real CurrentControllerP = 1;
}

message SetControllerTd_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real ControllerTd = 2;
}

message SetControllerTd_Responses {
    sila2.org.silastandard.Real ControllerTdSet = 1;
}

message GetControllerTd_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetControllerTd_Responses {
    sila2.org.silastandard.Real CurrentControllerTd = 1;
}

message SetControllerTi_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real ControllerTi = 2;
}

message SetControllerTi_Responses {
    sila2.org.silastandard.Real ControllerTiSet = 1;
}

message GetControllerTi_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetControllerTi_Responses {
    sila2.org.silastandard.Real CurrentControllerTi = 1;
}

message SetControllerMin_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real ControllerMin = 2;
}

message SetControllerMin_Responses {
    sila2.org.silastandard.Real ControllerMinSet = 1;
}

message GetControllerMin_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetControllerMin_Responses {
    sila2.org.silastandard.Real CurrentControllerMin = 1;
}

message SetControllerMax_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real ControllerMax = 2;
}

message SetControllerMax_Responses {
    sila2.org.silastandard.Real ControllerMaxSet = 1;
}

message GetControllerMax_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer UnitID = 1;
}

message GetControllerMax_Responses {
    sila2.org.silastandard.Real CurrentControllerMax = 1;
}


// ----------------- Metadata Definitions ------------------
