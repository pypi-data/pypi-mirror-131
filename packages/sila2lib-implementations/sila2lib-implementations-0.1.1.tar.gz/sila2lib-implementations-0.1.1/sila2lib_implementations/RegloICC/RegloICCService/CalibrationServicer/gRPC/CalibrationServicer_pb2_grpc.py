# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import CalibrationServicer_pb2 as CalibrationServicer__pb2


class CalibrationServicerStub(object):
  """Feature: Calibration Servicer

  Set and retrieve the control parameter values for calibration of the Reglo ICC pump.
  By Valeryia Sidarava, Institute of Biochemical Engineering, Technical University of Munich, 31.07.2019,
  Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 15.04.2020.

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StartCalibration = channel.unary_unary(
        '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/StartCalibration',
        request_serializer=CalibrationServicer__pb2.StartCalibration_Parameters.SerializeToString,
        response_deserializer=CalibrationServicer__pb2.StartCalibration_Responses.FromString,
        )
    self.CancelCalibration = channel.unary_unary(
        '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/CancelCalibration',
        request_serializer=CalibrationServicer__pb2.CancelCalibration_Parameters.SerializeToString,
        response_deserializer=CalibrationServicer__pb2.CancelCalibration_Responses.FromString,
        )
    self.SetTargetVolume = channel.unary_unary(
        '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetTargetVolume',
        request_serializer=CalibrationServicer__pb2.SetTargetVolume_Parameters.SerializeToString,
        response_deserializer=CalibrationServicer__pb2.SetTargetVolume_Responses.FromString,
        )
    self.SetActualVolume = channel.unary_unary(
        '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetActualVolume',
        request_serializer=CalibrationServicer__pb2.SetActualVolume_Parameters.SerializeToString,
        response_deserializer=CalibrationServicer__pb2.SetActualVolume_Responses.FromString,
        )
    self.GetTargetVolume = channel.unary_unary(
        '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetTargetVolume',
        request_serializer=CalibrationServicer__pb2.GetTargetVolume_Parameters.SerializeToString,
        response_deserializer=CalibrationServicer__pb2.GetTargetVolume_Responses.FromString,
        )
    self.SetDirectionCalibration = channel.unary_unary(
        '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetDirectionCalibration',
        request_serializer=CalibrationServicer__pb2.SetDirectionCalibration_Parameters.SerializeToString,
        response_deserializer=CalibrationServicer__pb2.SetDirectionCalibration_Responses.FromString,
        )
    self.GetDirectionCalibration = channel.unary_unary(
        '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetDirectionCalibration',
        request_serializer=CalibrationServicer__pb2.GetDirectionCalibration_Parameters.SerializeToString,
        response_deserializer=CalibrationServicer__pb2.GetDirectionCalibration_Responses.FromString,
        )
    self.SetCalibrationTime = channel.unary_unary(
        '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetCalibrationTime',
        request_serializer=CalibrationServicer__pb2.SetCalibrationTime_Parameters.SerializeToString,
        response_deserializer=CalibrationServicer__pb2.SetCalibrationTime_Responses.FromString,
        )
    self.GetCalibrationTime = channel.unary_unary(
        '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetCalibrationTime',
        request_serializer=CalibrationServicer__pb2.GetCalibrationTime_Parameters.SerializeToString,
        response_deserializer=CalibrationServicer__pb2.GetCalibrationTime_Responses.FromString,
        )
    self.GetRunTimeCalibration = channel.unary_unary(
        '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetRunTimeCalibration',
        request_serializer=CalibrationServicer__pb2.GetRunTimeCalibration_Parameters.SerializeToString,
        response_deserializer=CalibrationServicer__pb2.GetRunTimeCalibration_Responses.FromString,
        )


class CalibrationServicerServicer(object):
  """Feature: Calibration Servicer

  Set and retrieve the control parameter values for calibration of the Reglo ICC pump.
  By Valeryia Sidarava, Institute of Biochemical Engineering, Technical University of Munich, 31.07.2019,
  Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 15.04.2020.

  """

  def StartCalibration(self, request, context):
    """Start Calibration on a Channel

    Starts calibration on a channel.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CancelCalibration(self, request, context):
    """Cancel Calibration on a Channel

    Cancels calibration on a channel.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetTargetVolume(self, request, context):
    """Set Target Volume Value

    Set target volume to pump for calibrating in mL.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetActualVolume(self, request, context):
    """Set Actual Volume Value

    Set the actual volume measured during calibration in mL.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTargetVolume(self, request, context):
    """Get Target Volume
    Get target volume to pump for calibrating in mL.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetDirectionCalibration(self, request, context):
    """Set Direction Flow for Calibration

    Set direction flow for calibration J or K using DIRECTION format.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetDirectionCalibration(self, request, context):
    """Get Direction Flow for Calibration

    Get direction flow for calibration (J or K).

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetCalibrationTime(self, request, context):
    """Set Calibration Time

    Set the current calibration time using Time Type 2 format.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCalibrationTime(self, request, context):
    """Get Calibration Time

    Get the current calibration time.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetRunTimeCalibration(self, request, context):
    """Get Run Time since last Calibration

    Get channel run time since last calibration.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CalibrationServicerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StartCalibration': grpc.unary_unary_rpc_method_handler(
          servicer.StartCalibration,
          request_deserializer=CalibrationServicer__pb2.StartCalibration_Parameters.FromString,
          response_serializer=CalibrationServicer__pb2.StartCalibration_Responses.SerializeToString,
      ),
      'CancelCalibration': grpc.unary_unary_rpc_method_handler(
          servicer.CancelCalibration,
          request_deserializer=CalibrationServicer__pb2.CancelCalibration_Parameters.FromString,
          response_serializer=CalibrationServicer__pb2.CancelCalibration_Responses.SerializeToString,
      ),
      'SetTargetVolume': grpc.unary_unary_rpc_method_handler(
          servicer.SetTargetVolume,
          request_deserializer=CalibrationServicer__pb2.SetTargetVolume_Parameters.FromString,
          response_serializer=CalibrationServicer__pb2.SetTargetVolume_Responses.SerializeToString,
      ),
      'SetActualVolume': grpc.unary_unary_rpc_method_handler(
          servicer.SetActualVolume,
          request_deserializer=CalibrationServicer__pb2.SetActualVolume_Parameters.FromString,
          response_serializer=CalibrationServicer__pb2.SetActualVolume_Responses.SerializeToString,
      ),
      'GetTargetVolume': grpc.unary_unary_rpc_method_handler(
          servicer.GetTargetVolume,
          request_deserializer=CalibrationServicer__pb2.GetTargetVolume_Parameters.FromString,
          response_serializer=CalibrationServicer__pb2.GetTargetVolume_Responses.SerializeToString,
      ),
      'SetDirectionCalibration': grpc.unary_unary_rpc_method_handler(
          servicer.SetDirectionCalibration,
          request_deserializer=CalibrationServicer__pb2.SetDirectionCalibration_Parameters.FromString,
          response_serializer=CalibrationServicer__pb2.SetDirectionCalibration_Responses.SerializeToString,
      ),
      'GetDirectionCalibration': grpc.unary_unary_rpc_method_handler(
          servicer.GetDirectionCalibration,
          request_deserializer=CalibrationServicer__pb2.GetDirectionCalibration_Parameters.FromString,
          response_serializer=CalibrationServicer__pb2.GetDirectionCalibration_Responses.SerializeToString,
      ),
      'SetCalibrationTime': grpc.unary_unary_rpc_method_handler(
          servicer.SetCalibrationTime,
          request_deserializer=CalibrationServicer__pb2.SetCalibrationTime_Parameters.FromString,
          response_serializer=CalibrationServicer__pb2.SetCalibrationTime_Responses.SerializeToString,
      ),
      'GetCalibrationTime': grpc.unary_unary_rpc_method_handler(
          servicer.GetCalibrationTime,
          request_deserializer=CalibrationServicer__pb2.GetCalibrationTime_Parameters.FromString,
          response_serializer=CalibrationServicer__pb2.GetCalibrationTime_Responses.SerializeToString,
      ),
      'GetRunTimeCalibration': grpc.unary_unary_rpc_method_handler(
          servicer.GetRunTimeCalibration,
          request_deserializer=CalibrationServicer__pb2.GetRunTimeCalibration_Parameters.FromString,
          response_serializer=CalibrationServicer__pb2.GetRunTimeCalibration_Responses.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
