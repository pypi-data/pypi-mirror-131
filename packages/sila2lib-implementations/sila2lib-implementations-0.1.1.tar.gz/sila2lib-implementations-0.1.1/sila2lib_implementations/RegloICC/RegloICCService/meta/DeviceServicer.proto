// This file is automatically generated by sila2lib.proto_builder.proto_builder version 0.2.0
// :generation date: 2020-04-16 12:19:57
//
// ---- PLEASE DO NOT MODIFY MANUALLY !! ---

syntax = "proto3";
import "SiLAFramework.proto";
package sila2.org.silastandard.examples.deviceservicer.v1;

// Feature: Device Servicer
//   
//           General device software and hardware information can be retrieved and changed within this function.
//           By Valeryia Sidarava, Institute of Biochemical Engineering, Technical University of Munich, 31.07.2019 and
//           Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 15.04.2020
//   
service DeviceServicer {
    // Get Log
    //   Get the current status of the device from the state machine of the SiLA server.
    rpc GetLog(sila2.org.silastandard.examples.deviceservicer.v1.GetLog_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc GetLog_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc GetLog_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetLog_Responses) {}
    // Set Pump Address
    //   
    //             Set the address of the pump (1-8).
    //   
    rpc SetPumpAddress(sila2.org.silastandard.examples.deviceservicer.v1.SetPumpAddress_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetPumpAddress_Responses) {}
    // Set Language
    //   
    //             Set the language of the pump.
    //   
    rpc SetLanguage(sila2.org.silastandard.examples.deviceservicer.v1.SetLanguage_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetLanguage_Responses) {}
    // Get Language
    //   Get The language of the pump. 0=English / 1=French / 2=Spanish / 3=German.
    rpc GetLanguage(sila2.org.silastandard.examples.deviceservicer.v1.GetLanguage_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetLanguage_Responses) {}
    // Get Pump Status
    //   Get pump status. +=running, -=stopped/standby.
    rpc GetPumpStatus(sila2.org.silastandard.examples.deviceservicer.v1.GetPumpStatus_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetPumpStatus_Responses) {}
    // Get Version Type
    //   Get pump information. Response is string of model description (variable length), software version (3 digits) and pump
    //   head model type code (3 digits).
    rpc GetVersionType(sila2.org.silastandard.examples.deviceservicer.v1.GetVersionType_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetVersionType_Responses) {}
    // Current Version Software
    //   Get pump software version. Response is string.
    rpc CurrentVersionSoftware(sila2.org.silastandard.examples.deviceservicer.v1.CurrentVersionSoftware_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.CurrentVersionSoftware_Responses) {}
    // Get Serial Number
    //   Get pump serial number.
    rpc GetSerialNumber(sila2.org.silastandard.examples.deviceservicer.v1.GetSerialNumber_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetSerialNumber_Responses) {}
    // Set Channel Addressing
    //   
    //             Set whether (1) or not (0) channel addressing is enabled.
    //   
    rpc SetChannelAddressing(sila2.org.silastandard.examples.deviceservicer.v1.SetChannelAddressing_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetChannelAddressing_Responses) {}
    // Get Channel Addressing
    //   Get information whether (1) or not (0) channel addressing is enabled.
    rpc GetChannelAddressing(sila2.org.silastandard.examples.deviceservicer.v1.GetChannelAddressing_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetChannelAddressing_Responses) {}
    // Set Event Messages
    //   
    //             Set whether (1) or not (0) event messages are enabled.
    //   
    rpc SetEventMessages(sila2.org.silastandard.examples.deviceservicer.v1.SetEventMessages_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetEventMessages_Responses) {}
    // Get Event Messages
    //   Get information whether (1) or not (0) event messages are enabled.
    rpc GetEventMessages(sila2.org.silastandard.examples.deviceservicer.v1.GetEventMessages_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetEventMessages_Responses) {}
    // Get Serial Protocol
    //   Get an integer representing the version of the serial protocol.
    rpc GetSerialProtocol(sila2.org.silastandard.examples.deviceservicer.v1.GetSerialProtocol_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetSerialProtocol_Responses) {}
    // Set Pump Name
    //   
    //                 Set pump name for display under remote control string.
    //   
    rpc SetPumpName(sila2.org.silastandard.examples.deviceservicer.v1.SetPumpName_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetPumpName_Responses) {}
    // Get ChannelNumber
    //   Get number of pump channels.
    rpc GetChannelNumber(sila2.org.silastandard.examples.deviceservicer.v1.GetChannelNumber_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetChannelNumber_Responses) {}
    // Set Channel Number
    //   
    //               Set number of pump channels.
    //   
    rpc SetChannelNumber(sila2.org.silastandard.examples.deviceservicer.v1.SetChannelNumber_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetChannelNumber_Responses) {}
    // Get Revolutions
    //   Get total number of revolutions.
    rpc GetRevolutions(sila2.org.silastandard.examples.deviceservicer.v1.GetRevolutions_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetRevolutions_Responses) {}
    // Get Channel Total Volume
    //   Get channel total volume pumped since last reset, mL.
    rpc GetChannelTotalVolume(sila2.org.silastandard.examples.deviceservicer.v1.GetChannelTotalVolume_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetChannelTotalVolume_Responses) {}
    // Get Total Time
    //   Get total time pumped for a channel since last reset, mL.
    rpc GetTotalTime(sila2.org.silastandard.examples.deviceservicer.v1.GetTotalTime_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetTotalTime_Responses) {}
    // Get Head Model
    //   Get pump head model type code indicating the ID number of the pump head. The first two digits encode the number of
    //   channels on the head, and the second 2 digits represent the number of rollers.
    rpc GetHeadModel(sila2.org.silastandard.examples.deviceservicer.v1.GetHeadModel_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetHeadModel_Responses) {}
    // Set Head Model
    //   
    //             Set pump head model type code up to 4 digits indicating the ID number of the pump head. The first two digits
    //   encode the number of channels on the head, and the second 2 digits represent the number of rollers
    //   
    rpc SetHeadModel(sila2.org.silastandard.examples.deviceservicer.v1.SetHeadModel_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetHeadModel_Responses) {}
    // Set User Interface
    //   
    //           Set control from the pump user interface
    //   
    rpc SetUserInterface(sila2.org.silastandard.examples.deviceservicer.v1.SetUserInterface_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetUserInterface_Responses) {}
    // Set Disable Interface
    //   
    //         Disable pump user interface
    //   
    rpc SetDisableInterface(sila2.org.silastandard.examples.deviceservicer.v1.SetDisableInterface_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetDisableInterface_Responses) {}
    // Set Display Numbers
    //   
    //         Write numbers to the pump to display while under external control - string (less than 17 characters)
    //   
    rpc SetDisplayNumbers(sila2.org.silastandard.examples.deviceservicer.v1.SetDisplayNumbers_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetDisplayNumbers_Responses) {}
    // Set Display Letters
    //   
    //         Write letters to the pump to display while under external control - string (less than 17 characters)
    //   
    rpc SetDisplayLetters(sila2.org.silastandard.examples.deviceservicer.v1.SetDisplayLetters_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetDisplayLetters_Responses) {}
    // Get Time Setting
    //   Get current setting for pump time in 1/10 seconds.
    rpc GetTimeSetting(sila2.org.silastandard.examples.deviceservicer.v1.GetTimeSetting_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetTimeSetting_Responses) {}
    // Set Time Setting
    //   
    //         Set current setting for pump time in 1/10 seconds.
    //   
    rpc SetTimeSetting(sila2.org.silastandard.examples.deviceservicer.v1.SetTimeSetting_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetTimeSetting_Responses) {}
    // Set Run Time in Minutes
    //   
    //         Set current run time setting for dispensing in minutes (0-999)
    //   
    rpc SetRunTimeM(sila2.org.silastandard.examples.deviceservicer.v1.SetRunTimeM_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetRunTimeM_Responses) {}
    // Set Run Time in Hours
    //   
    //         Set current run time setting for dispensing in hours (0-999)
    //   
    rpc SetRunTimeH(sila2.org.silastandard.examples.deviceservicer.v1.SetRunTimeH_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetRunTimeH_Responses) {}
    // Get Roller Steps low order
    //   Get current setting for volume to pump in low order roller steps. The total number of roller steps
    //           which are dispensed during an operation is computed as [ u*65536 + U].
    rpc GetRollerStepsLow(sila2.org.silastandard.examples.deviceservicer.v1.GetRollerStepsLow_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetRollerStepsLow_Responses) {}
    // Set Roller Steps low order
    //   
    //         Set current setting for volume to pump in roller steps (0 - 65536).
    //   
    rpc SetRollerStepsLow(sila2.org.silastandard.examples.deviceservicer.v1.SetRollerStepsLow_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetRollerStepsLow_Responses) {}
    // Get Roller Steps high order 
    //   Get current setting for volume to pump in high order roller steps. The total number of roller steps
    //           which are dispensed during an operation is computed as [ u*65536 + U].
    rpc GetRollerStepsHigh(sila2.org.silastandard.examples.deviceservicer.v1.GetRollerStepsHigh_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetRollerStepsHigh_Responses) {}
    // Set Roller Steps High order
    //   
    //         Set current setting for volume to pump in roller steps (greater than 65536).
    //   
    rpc SetRollerStepsHigh(sila2.org.silastandard.examples.deviceservicer.v1.SetRollerStepsHigh_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetRollerStepsHigh_Responses) {}
    // Get Roller Step Volume 
    //   Get the pump's current setting for roller step volume (RSV) based on the current calibration,
    //           tubing diameter and roller count in nL. If no calibration has been performed, the default volume is returned
    rpc GetRSV(sila2.org.silastandard.examples.deviceservicer.v1.GetRSV_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetRSV_Responses) {}
    // Set Roller Step Volume
    //   
    //         Set the calibrated roller step volume (RSV) in nL to use for this pump/channel.
    //         The value is used as calibration value and is overwritten by subsequent calibrations and reset by changing tubing
    //   diameter.
    //   
    rpc SetRSV(sila2.org.silastandard.examples.deviceservicer.v1.SetRSV_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetRSV_Responses) {}
    // Set Roller Step Volume Reset
    //   
    //         Reset the pump to discard calibration data, use default roller step volume
    //   
    rpc SetRSVReset(sila2.org.silastandard.examples.deviceservicer.v1.SetRSVReset_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetRSVReset_Responses) {}
    // Reset Roller Step Volume Table
    //   
    //         Reset roller step value table to default
    //   
    rpc ResetRSVTable(sila2.org.silastandard.examples.deviceservicer.v1.ResetRSVTable_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.ResetRSVTable_Responses) {}
    // Set Non-Factory Roller Step Volume
    //   
    //         Change factory roller step volume for a particular roller count and tubing size using roller count (6,8,12);
    //          index of the tubing diameter; RSV
    //   
    rpc SetNonFactoryRSV(sila2.org.silastandard.examples.deviceservicer.v1.SetNonFactoryRSV_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetNonFactoryRSV_Responses) {}
    // Get Pause Time 
    //   Get current setting for pause time in 1/10 seconds
    rpc GetPauseTime(sila2.org.silastandard.examples.deviceservicer.v1.GetPauseTime_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetPauseTime_Responses) {}
    // Set Pause Time
    //   
    //         Set current setting for pause time in 1/10 seconds
    //   
    rpc SetPauseTime(sila2.org.silastandard.examples.deviceservicer.v1.SetPauseTime_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetPauseTime_Responses) {}
    // Set Pause Time in Minutes
    //   
    //         Set current setting for pause time in minutes (0-999)
    //   
    rpc SetPauseTimeM(sila2.org.silastandard.examples.deviceservicer.v1.SetPauseTimeM_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetPauseTimeM_Responses) {}
    // Set Pause Time in Hours
    //   
    //         Set current setting for pause time in hours (0-999)
    //   
    rpc SetPauseTimeH(sila2.org.silastandard.examples.deviceservicer.v1.SetPauseTimeH_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetPauseTimeH_Responses) {}
    // Get Total Volume
    //   Get total volume dispensed since the last reset in uL, mL or L.
    rpc GetTotalVolume(sila2.org.silastandard.examples.deviceservicer.v1.GetTotalVolume_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetTotalVolume_Responses) {}
    // Save Settings
    //   Saves the current pump settings values to memory.
    rpc SaveSettings(sila2.org.silastandard.examples.deviceservicer.v1.SaveSettings_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SaveSettings_Responses) {}
    // Save Set Roller Step
    //   Saves set roller step settings.
    rpc SaveSetRoller(sila2.org.silastandard.examples.deviceservicer.v1.SaveSetRoller_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SaveSetRoller_Responses) {}
    // Get Foot Switch Status
    //   Get the current status of the foot switch:   - open  /  + grounded.
    rpc GetFootSwitchStatus(sila2.org.silastandard.examples.deviceservicer.v1.GetFootSwitchStatus_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetFootSwitchStatus_Responses) {}
    // Set Rollers Number
    //   
    //         Set number of rollers for channel
    //   
    rpc SetRollersNumber(sila2.org.silastandard.examples.deviceservicer.v1.SetRollersNumber_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetRollersNumber_Responses) {}
    // Get Rollers Number
    //   Get number of rollers for channel
    rpc GetRollersNumber(sila2.org.silastandard.examples.deviceservicer.v1.GetRollersNumber_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetRollersNumber_Responses) {}
    // Set Pump Serial Number
    //   
    //         Set pump serial number string.
    //   
    rpc SetPumpSerialNumber(sila2.org.silastandard.examples.deviceservicer.v1.SetPumpSerialNumber_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetPumpSerialNumber_Responses) {}
    // Current Status
    //   Get the current status of the device from the internal state machine of the SiLA server.
    rpc Subscribe_CurrentStatus(sila2.org.silastandard.examples.deviceservicer.v1.Subscribe_CurrentStatus_Parameters) returns (stream sila2.org.silastandard.examples.deviceservicer.v1.Subscribe_CurrentStatus_Responses) {}
    
}

// ----------------- Data Type definitions -----------------


// ------ Command Parameter and Response definitions -------
message GetLog_Parameters {
    
}

message GetLog_Responses {
    sila2.org.silastandard.String CurrentLogLevel = 1;
    sila2.org.silastandard.Timestamp CurrentLogTimestamp = 2;
    sila2.org.silastandard.String CurrentLogMessage = 3;
}

message SetPumpAddress_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message SetPumpAddress_Responses {
    sila2.org.silastandard.String PumpAddressSet = 1;
}

message SetLanguage_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Language = 2;
}

message SetLanguage_Responses {
    sila2.org.silastandard.String LanguageSet = 1;
}

message GetLanguage_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message GetLanguage_Responses {
    sila2.org.silastandard.Integer CurrentLanguage = 1;
}

message GetPumpStatus_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message GetPumpStatus_Responses {
    sila2.org.silastandard.String CurrentPumpStatus = 1;
}

message GetVersionType_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message GetVersionType_Responses {
    sila2.org.silastandard.String CurrentVersionType = 1;
}

message CurrentVersionSoftware_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message CurrentVersionSoftware_Responses {
    sila2.org.silastandard.String CurrentVersionSoftware = 1;
}

message GetSerialNumber_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message GetSerialNumber_Responses {
    sila2.org.silastandard.String SerialNumber = 1;
}

message SetChannelAddressing_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Boolean ChannelAddressing = 2;
}

message SetChannelAddressing_Responses {
    sila2.org.silastandard.String ChannelAddressingSet = 1;
}

message GetChannelAddressing_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message GetChannelAddressing_Responses {
    sila2.org.silastandard.Boolean ChannelAddressing = 1;
}

message SetEventMessages_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Boolean EventMessages = 2;
}

message SetEventMessages_Responses {
    sila2.org.silastandard.String EventMessagesSet = 1;
}

message GetEventMessages_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message GetEventMessages_Responses {
    sila2.org.silastandard.Boolean EventMessages = 1;
}

message GetSerialProtocol_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message GetSerialProtocol_Responses {
    sila2.org.silastandard.Integer SerialProtocol = 1;
}

message SetPumpName_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String PumpName = 2;
}

message SetPumpName_Responses {
    sila2.org.silastandard.String PumpNameSet = 1;
}

message GetChannelNumber_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message GetChannelNumber_Responses {
    sila2.org.silastandard.Integer ChannelNumber = 1;
}

message SetChannelNumber_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer ChannelNumber = 2;
}

message SetChannelNumber_Responses {
    sila2.org.silastandard.String ChannelNumberSet = 1;
}

message GetRevolutions_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
}

message GetRevolutions_Responses {
    sila2.org.silastandard.Integer Revolutions = 1;
}

message GetChannelTotalVolume_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real Channel = 1;
}

message GetChannelTotalVolume_Responses {
    sila2.org.silastandard.Real ChannelTotalVolume = 1;
}

message GetTotalTime_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
}

message GetTotalTime_Responses {
    sila2.org.silastandard.Integer TotalTime = 1;
}

message GetHeadModel_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
}

message GetHeadModel_Responses {
    sila2.org.silastandard.String HeadModel = 1;
}

message SetHeadModel_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String HeadModel = 2;
}

message SetHeadModel_Responses {
    sila2.org.silastandard.String HeadModelSet = 1;
}

message SetUserInterface_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String UserInterface = 1;
}

message SetUserInterface_Responses {
    sila2.org.silastandard.String UserInterfaceSet = 1;
}

message SetDisableInterface_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String DisableInterface = 1;
}

message SetDisableInterface_Responses {
    sila2.org.silastandard.String DisableInterfaceSet = 1;
}

message SetDisplayNumbers_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String DisplayNumbers = 2;
}

message SetDisplayNumbers_Responses {
    sila2.org.silastandard.String DisplayNumbersSet = 1;
}

message SetDisplayLetters_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String Address = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String DisplayLetters = 2;
}

message SetDisplayLetters_Responses {
    sila2.org.silastandard.String DisplayLettersSet = 1;
}

message GetTimeSetting_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
}

message GetTimeSetting_Responses {
    sila2.org.silastandard.Real TimeSetting = 1;
}

message SetTimeSetting_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real TimeSetting = 2;
}

message SetTimeSetting_Responses {
    sila2.org.silastandard.String TimeSettingSet = 1;
}

message SetRunTimeM_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer RunTimeM = 2;
}

message SetRunTimeM_Responses {
    sila2.org.silastandard.String RunTimeMSet = 1;
}

message SetRunTimeH_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer RunTimeM = 2;
}

message SetRunTimeH_Responses {
    sila2.org.silastandard.String RunTimeHSet = 1;
}

message GetRollerStepsLow_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
}

message GetRollerStepsLow_Responses {
    sila2.org.silastandard.Integer RollerStepsLow = 1;
}

message SetRollerStepsLow_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer RollerStepsLow = 2;
}

message SetRollerStepsLow_Responses {
    sila2.org.silastandard.String RollerStepsLowSet = 1;
}

message GetRollerStepsHigh_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
}

message GetRollerStepsHigh_Responses {
    sila2.org.silastandard.Integer RollerStepsHigh = 1;
}

message SetRollerStepsHigh_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer RollerSteps = 2;
}

message SetRollerStepsHigh_Responses {
    sila2.org.silastandard.String RollerStepsHighSet = 1;
}

message GetRSV_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
}

message GetRSV_Responses {
    sila2.org.silastandard.Real RSV = 1;
}

message SetRSV_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real RSV = 2;
}

message SetRSV_Responses {
    sila2.org.silastandard.String RSVSet = 1;
}

message SetRSVReset_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String RSVReset = 1;
}

message SetRSVReset_Responses {
    sila2.org.silastandard.String RSVResetSet = 1;
}

message ResetRSVTable_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String RSVTableReset = 1;
}

message ResetRSVTable_Responses {
    sila2.org.silastandard.String ResetRSVTableSet = 1;
}

message SetNonFactoryRSV_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer RollerCount = 2;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String TubingID = 3;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real NonFactoryRSV = 4;
}

message SetNonFactoryRSV_Responses {
    sila2.org.silastandard.String SetNonFactoryRSVSet = 1;
}

message GetPauseTime_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
}

message GetPauseTime_Responses {
    sila2.org.silastandard.Real PauseTime = 1;
}

message SetPauseTime_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Real PauseTime = 2;
}

message SetPauseTime_Responses {
    sila2.org.silastandard.String PauseTimeSet = 1;
}

message SetPauseTimeM_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer PauseTimeM = 2;
}

message SetPauseTimeM_Responses {
    sila2.org.silastandard.String PauseTimeMSet = 1;
}

message SetPauseTimeH_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer PauseTimeM = 2;
}

message SetPauseTimeH_Responses {
    sila2.org.silastandard.String PauseTimeHSet = 1;
}

message GetTotalVolume_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
}

message GetTotalVolume_Responses {
    sila2.org.silastandard.Real CurrentTotalVolume = 1;
}

message SaveSettings_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer PumpAddress = 1;
}

message SaveSettings_Responses {
    sila2.org.silastandard.String Save = 1;
}

message SaveSetRoller_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer PumpAddress = 1;
}

message SaveSetRoller_Responses {
    sila2.org.silastandard.String Save = 1;
}

message GetFootSwitchStatus_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer PumpAddress = 1;
}

message GetFootSwitchStatus_Responses {
    sila2.org.silastandard.String FootSwitchStatus = 1;
}

message SetRollersNumber_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer RollersNumber = 2;
}

message SetRollersNumber_Responses {
    sila2.org.silastandard.String RollersNumber = 1;
}

message GetRollersNumber_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Channel = 1;
}

message GetRollersNumber_Responses {
    sila2.org.silastandard.Integer RollersNumber = 1;
}

message SetPumpSerialNumber_Parameters {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.Integer Address = 1;
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String PumpSerialNumber = 2;
}

message SetPumpSerialNumber_Responses {
    sila2.org.silastandard.String PumpSerialNumberSet = 1;
}
message Subscribe_CurrentStatus_Parameters {
    // Empty message
}

message Subscribe_CurrentStatus_Responses {
    sila2.org.silastandard.String CurrentStatus = 1;
}

// ----------------- Metadata Definitions ------------------
