# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import DeviceService_pb2 as DeviceService__pb2


class DeviceServiceStub(object):
    """Feature: Device Service

    Allows full control of the device features of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetValveOutput = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetValveOutput',
                request_serializer=DeviceService__pb2.GetValveOutput_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetValveOutput_Responses.FromString,
                )
        self.GetCapacity100 = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetCapacity100',
                request_serializer=DeviceService__pb2.GetCapacity100_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetCapacity100_Responses.FromString,
                )
        self.GetCapacityUnit = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetCapacityUnit',
                request_serializer=DeviceService__pb2.GetCapacityUnit_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetCapacityUnit_Responses.FromString,
                )
        self.GetSerialNumber = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetSerialNumber',
                request_serializer=DeviceService__pb2.GetSerialNumber_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetSerialNumber_Responses.FromString,
                )
        self.GetPrimaryNodeAddress = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetPrimaryNodeAddress',
                request_serializer=DeviceService__pb2.GetPrimaryNodeAddress_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetPrimaryNodeAddress_Responses.FromString,
                )
        self.GetFirmwareVersion = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetFirmwareVersion',
                request_serializer=DeviceService__pb2.GetFirmwareVersion_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetFirmwareVersion_Responses.FromString,
                )
        self.GetCommunicationProtocol = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetCommunicationProtocol',
                request_serializer=DeviceService__pb2.GetCommunicationProtocol_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetCommunicationProtocol_Responses.FromString,
                )
        self.SetCommunicationProtocolBinary = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SetCommunicationProtocolBinary',
                request_serializer=DeviceService__pb2.SetCommunicationProtocolBinary_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.SetCommunicationProtocolBinary_Responses.FromString,
                )
        self.SetCommunicationProtocolAscii = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SetCommunicationProtocolAscii',
                request_serializer=DeviceService__pb2.SetCommunicationProtocolAscii_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.SetCommunicationProtocolAscii_Responses.FromString,
                )
        self.GetSerialPort = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetSerialPort',
                request_serializer=DeviceService__pb2.GetSerialPort_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.GetSerialPort_Responses.FromString,
                )
        self.SetSerialPort = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SetSerialPort',
                request_serializer=DeviceService__pb2.SetSerialPort_Parameters.SerializeToString,
                response_deserializer=DeviceService__pb2.SetSerialPort_Responses.FromString,
                )


class DeviceServiceServicer(object):
    """Feature: Device Service

    Allows full control of the device features of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    def GetValveOutput(self, request, context):
        """Get valve output

        It represents the controller output signal for control valve operation. It goes from 0 to 300mAdc.
        In reality it reaches until 250mAdc

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCapacity100(self, request, context):
        """Get capacity 100

        This parameter sets the maximum readout/control value (100%) for the current fluid in readout units
        corresponding to Capacity Unit.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCapacityUnit(self, request, context):
        """Get capacity unit

        This parameter defines the units in which is the measured value and set value are represented.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSerialNumber(self, request, context):
        """Get serial number
        Serial number of the device and software version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrimaryNodeAddress(self, request, context):
        """Get primary node address 
        Primary node address: network parameter Flow-Bus
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFirmwareVersion(self, request, context):
        """Get firmware version
        revision number of the firmware
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommunicationProtocol(self, request, context):
        """Get communication protocol

        Current communication protocol between the program adn the device.
        2 possible options: "binary" and "ascii"
        Binary is the default protocol

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCommunicationProtocolBinary(self, request, context):
        """Set communication protocol binary

        it sets the protocol communication to binary

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCommunicationProtocolAscii(self, request, context):
        """Set communication protocol ascii

        it sets the protocol communication to ascii

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSerialPort(self, request, context):
        """Get serial port
        Current devices serial port. "50001" is the predefined value
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSerialPort(self, request, context):
        """Set serial port

        Sets devices new serial port

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetValveOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.GetValveOutput,
                    request_deserializer=DeviceService__pb2.GetValveOutput_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetValveOutput_Responses.SerializeToString,
            ),
            'GetCapacity100': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCapacity100,
                    request_deserializer=DeviceService__pb2.GetCapacity100_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetCapacity100_Responses.SerializeToString,
            ),
            'GetCapacityUnit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCapacityUnit,
                    request_deserializer=DeviceService__pb2.GetCapacityUnit_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetCapacityUnit_Responses.SerializeToString,
            ),
            'GetSerialNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSerialNumber,
                    request_deserializer=DeviceService__pb2.GetSerialNumber_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetSerialNumber_Responses.SerializeToString,
            ),
            'GetPrimaryNodeAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrimaryNodeAddress,
                    request_deserializer=DeviceService__pb2.GetPrimaryNodeAddress_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetPrimaryNodeAddress_Responses.SerializeToString,
            ),
            'GetFirmwareVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFirmwareVersion,
                    request_deserializer=DeviceService__pb2.GetFirmwareVersion_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetFirmwareVersion_Responses.SerializeToString,
            ),
            'GetCommunicationProtocol': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommunicationProtocol,
                    request_deserializer=DeviceService__pb2.GetCommunicationProtocol_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetCommunicationProtocol_Responses.SerializeToString,
            ),
            'SetCommunicationProtocolBinary': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCommunicationProtocolBinary,
                    request_deserializer=DeviceService__pb2.SetCommunicationProtocolBinary_Parameters.FromString,
                    response_serializer=DeviceService__pb2.SetCommunicationProtocolBinary_Responses.SerializeToString,
            ),
            'SetCommunicationProtocolAscii': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCommunicationProtocolAscii,
                    request_deserializer=DeviceService__pb2.SetCommunicationProtocolAscii_Parameters.FromString,
                    response_serializer=DeviceService__pb2.SetCommunicationProtocolAscii_Responses.SerializeToString,
            ),
            'GetSerialPort': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSerialPort,
                    request_deserializer=DeviceService__pb2.GetSerialPort_Parameters.FromString,
                    response_serializer=DeviceService__pb2.GetSerialPort_Responses.SerializeToString,
            ),
            'SetSerialPort': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSerialPort,
                    request_deserializer=DeviceService__pb2.SetSerialPort_Parameters.FromString,
                    response_serializer=DeviceService__pb2.SetSerialPort_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeviceService(object):
    """Feature: Device Service

    Allows full control of the device features of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    @staticmethod
    def GetValveOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetValveOutput',
            DeviceService__pb2.GetValveOutput_Parameters.SerializeToString,
            DeviceService__pb2.GetValveOutput_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCapacity100(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetCapacity100',
            DeviceService__pb2.GetCapacity100_Parameters.SerializeToString,
            DeviceService__pb2.GetCapacity100_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCapacityUnit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetCapacityUnit',
            DeviceService__pb2.GetCapacityUnit_Parameters.SerializeToString,
            DeviceService__pb2.GetCapacityUnit_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSerialNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetSerialNumber',
            DeviceService__pb2.GetSerialNumber_Parameters.SerializeToString,
            DeviceService__pb2.GetSerialNumber_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrimaryNodeAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetPrimaryNodeAddress',
            DeviceService__pb2.GetPrimaryNodeAddress_Parameters.SerializeToString,
            DeviceService__pb2.GetPrimaryNodeAddress_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFirmwareVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetFirmwareVersion',
            DeviceService__pb2.GetFirmwareVersion_Parameters.SerializeToString,
            DeviceService__pb2.GetFirmwareVersion_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCommunicationProtocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetCommunicationProtocol',
            DeviceService__pb2.GetCommunicationProtocol_Parameters.SerializeToString,
            DeviceService__pb2.GetCommunicationProtocol_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCommunicationProtocolBinary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SetCommunicationProtocolBinary',
            DeviceService__pb2.SetCommunicationProtocolBinary_Parameters.SerializeToString,
            DeviceService__pb2.SetCommunicationProtocolBinary_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCommunicationProtocolAscii(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SetCommunicationProtocolAscii',
            DeviceService__pb2.SetCommunicationProtocolAscii_Parameters.SerializeToString,
            DeviceService__pb2.SetCommunicationProtocolAscii_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSerialPort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/GetSerialPort',
            DeviceService__pb2.GetSerialPort_Parameters.SerializeToString,
            DeviceService__pb2.GetSerialPort_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSerialPort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.deviceservice.v1.DeviceService/SetSerialPort',
            DeviceService__pb2.SetSerialPort_Parameters.SerializeToString,
            DeviceService__pb2.SetSerialPort_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
