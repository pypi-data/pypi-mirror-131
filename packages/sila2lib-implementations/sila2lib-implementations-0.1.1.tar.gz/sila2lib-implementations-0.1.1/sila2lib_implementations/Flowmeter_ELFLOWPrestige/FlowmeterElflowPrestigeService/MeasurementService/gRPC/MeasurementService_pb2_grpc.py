# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import MeasurementService_pb2 as MeasurementService__pb2


class MeasurementServiceStub(object):
    """Feature: Measurement Service

    Allows full control of the available fluid features of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMeasuredValue = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/GetMeasuredValue',
                request_serializer=MeasurementService__pb2.GetMeasuredValue_Parameters.SerializeToString,
                response_deserializer=MeasurementService__pb2.GetMeasuredValue_Responses.FromString,
                )
        self.GetSetpointValue = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/GetSetpointValue',
                request_serializer=MeasurementService__pb2.GetSetpointValue_Parameters.SerializeToString,
                response_deserializer=MeasurementService__pb2.GetSetpointValue_Responses.FromString,
                )
        self.SetSetpointValue = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/SetSetpointValue',
                request_serializer=MeasurementService__pb2.SetSetpointValue_Parameters.SerializeToString,
                response_deserializer=MeasurementService__pb2.SetSetpointValue_Responses.FromString,
                )
        self.GetFluidNumber = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/GetFluidNumber',
                request_serializer=MeasurementService__pb2.GetFluidNumber_Parameters.SerializeToString,
                response_deserializer=MeasurementService__pb2.GetFluidNumber_Responses.FromString,
                )
        self.SetFluidNumber = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/SetFluidNumber',
                request_serializer=MeasurementService__pb2.SetFluidNumber_Parameters.SerializeToString,
                response_deserializer=MeasurementService__pb2.SetFluidNumber_Responses.FromString,
                )
        self.GetFluidName = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/GetFluidName',
                request_serializer=MeasurementService__pb2.GetFluidName_Parameters.SerializeToString,
                response_deserializer=MeasurementService__pb2.GetFluidName_Responses.FromString,
                )


class MeasurementServiceServicer(object):
    """Feature: Measurement Service

    Allows full control of the available fluid features of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    def GetMeasuredValue(self, request, context):
        """Get measured value
        It shows the measured value in the capacity unit for which the instrument is set.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSetpointValue(self, request, context):
        """Get setpoint value

        It shows the current setpoint value in the capacity unit for which the instrument is set.
        Range in Percentage. From 0.0 to 100.0 percent

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSetpointValue(self, request, context):
        """Set setpoint value

        It sets the new setpoint value in the capacity unit for which the instrument is set.
        Range in Percentage. From 0.0 to 100.0 percent

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFluidNumber(self, request, context):
        """Get fluid number
        Current fluid ID-Nr.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFluidNumber(self, request, context):
        """Set Fluid Number
        Set a number of the fluid to work with
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFluidName(self, request, context):
        """Get fluid name
        The name of the current fluid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeasurementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMeasuredValue': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMeasuredValue,
                    request_deserializer=MeasurementService__pb2.GetMeasuredValue_Parameters.FromString,
                    response_serializer=MeasurementService__pb2.GetMeasuredValue_Responses.SerializeToString,
            ),
            'GetSetpointValue': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSetpointValue,
                    request_deserializer=MeasurementService__pb2.GetSetpointValue_Parameters.FromString,
                    response_serializer=MeasurementService__pb2.GetSetpointValue_Responses.SerializeToString,
            ),
            'SetSetpointValue': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSetpointValue,
                    request_deserializer=MeasurementService__pb2.SetSetpointValue_Parameters.FromString,
                    response_serializer=MeasurementService__pb2.SetSetpointValue_Responses.SerializeToString,
            ),
            'GetFluidNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFluidNumber,
                    request_deserializer=MeasurementService__pb2.GetFluidNumber_Parameters.FromString,
                    response_serializer=MeasurementService__pb2.GetFluidNumber_Responses.SerializeToString,
            ),
            'SetFluidNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFluidNumber,
                    request_deserializer=MeasurementService__pb2.SetFluidNumber_Parameters.FromString,
                    response_serializer=MeasurementService__pb2.SetFluidNumber_Responses.SerializeToString,
            ),
            'GetFluidName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFluidName,
                    request_deserializer=MeasurementService__pb2.GetFluidName_Parameters.FromString,
                    response_serializer=MeasurementService__pb2.GetFluidName_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MeasurementService(object):
    """Feature: Measurement Service

    Allows full control of the available fluid features of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    @staticmethod
    def GetMeasuredValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/GetMeasuredValue',
            MeasurementService__pb2.GetMeasuredValue_Parameters.SerializeToString,
            MeasurementService__pb2.GetMeasuredValue_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSetpointValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/GetSetpointValue',
            MeasurementService__pb2.GetSetpointValue_Parameters.SerializeToString,
            MeasurementService__pb2.GetSetpointValue_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSetpointValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/SetSetpointValue',
            MeasurementService__pb2.SetSetpointValue_Parameters.SerializeToString,
            MeasurementService__pb2.SetSetpointValue_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFluidNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/GetFluidNumber',
            MeasurementService__pb2.GetFluidNumber_Parameters.SerializeToString,
            MeasurementService__pb2.GetFluidNumber_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetFluidNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/SetFluidNumber',
            MeasurementService__pb2.SetFluidNumber_Parameters.SerializeToString,
            MeasurementService__pb2.SetFluidNumber_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFluidName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementservice.v1.MeasurementService/GetFluidName',
            MeasurementService__pb2.GetFluidName_Parameters.SerializeToString,
            MeasurementService__pb2.GetFluidName_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
