// This file is automatically generated by sila2lib.proto_builder.proto_builder version 0.2.0
// :generation date: 2021-03-16 13:39:59
//
// ---- PLEASE DO NOT MODIFY MANUALLY !! ---

syntax = "proto3";
import "SiLAFramework.proto";
package sila2.org.silastandard.examples.deviceservicer.v1;

// Feature: Device Servicer
//   
//           General device software and hardware information can be retrieved and changed within this function (Reglo DC
//   (digital control) pump).
//           Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 15.03.2021
//   
service DeviceServicer {
    // Get Log
    //   Get the current status of the device from the state machine of the SiLA server.
    rpc GetLog(sila2.org.silastandard.examples.deviceservicer.v1.GetLog_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc GetLog_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc GetLog_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetLog_Responses) {}
    // Set Pump Address
    //   
    //             Set the address of the pump (1-8).
    //   
    rpc SetPumpAddress(sila2.org.silastandard.examples.deviceservicer.v1.SetPumpAddress_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetPumpAddress_Responses) {}
    // Get Pump Status
    //   Get pump status. +=running, -=stopped/standby.
    rpc GetPumpStatus(sila2.org.silastandard.examples.deviceservicer.v1.GetPumpStatus_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetPumpStatus_Responses) {}
    // Get Version Type
    //   Get pump information. Response is string of model description (variable length), software version (3 digits) and pump
    //   head model type code (3 digits).
    rpc GetVersionType(sila2.org.silastandard.examples.deviceservicer.v1.GetVersionType_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetVersionType_Responses) {}
    // Current Version Software
    //   Get pump software version. Response is string.
    rpc GetVersionSoftware(sila2.org.silastandard.examples.deviceservicer.v1.GetVersionSoftware_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetVersionSoftware_Responses) {}
    // Get Pump ID
    //   Get pump head identification number.
    rpc GetPumpID(sila2.org.silastandard.examples.deviceservicer.v1.GetPumpID_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetPumpID_Responses) {}
    // Set Pump ID
    //   Set pump head identification number.
    rpc SetPumpID(sila2.org.silastandard.examples.deviceservicer.v1.SetPumpID_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetPumpID_Responses) {}
    // Reset To Default
    //   
    //           Resets all user configurable data to default values.
    //   
    rpc ResetToDefault(sila2.org.silastandard.examples.deviceservicer.v1.ResetToDefault_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.ResetToDefault_Responses) {}
    // Get Total Volume
    //   Get total volume pumped since last reset, in muL, mL, or L.
    rpc GetTotalVolume(sila2.org.silastandard.examples.deviceservicer.v1.GetTotalVolume_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.GetTotalVolume_Responses) {}
    // Reset Total Volume
    //   Reset the total dispensed volume since the last reset.
    rpc ResetTotalVolume(sila2.org.silastandard.examples.deviceservicer.v1.ResetTotalVolume_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.ResetTotalVolume_Responses) {}
    // Unlock Control Panel
    //   
    //           Switch control panel to manual operation.
    //   
    rpc UnlockControlPanel(sila2.org.silastandard.examples.deviceservicer.v1.UnlockControlPanel_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.UnlockControlPanel_Responses) {}
    // Lock Control Panel
    //   
    //         Set control panel to inactive (Input via control keys is not possible).
    //   
    rpc LockControlPanel(sila2.org.silastandard.examples.deviceservicer.v1.LockControlPanel_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.LockControlPanel_Responses) {}
    // Set Display Numbers
    //   
    //         Write numbers to the pump to display while under external control - float of length 5 including +/- and decimal
    //   points.
    //   
    rpc SetDisplayNumbers(sila2.org.silastandard.examples.deviceservicer.v1.SetDisplayNumbers_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetDisplayNumbers_Responses) {}
    // Set Display Letters
    //   
    //             Write letters to the pump to display while under external control - string of length 4.
    //   
    rpc SetDisplayLetters(sila2.org.silastandard.examples.deviceservicer.v1.SetDisplayLetters_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetDisplayLetters_Responses) {}
    // Set Pump ID
    //   Set pump head identification number.
    rpc SetCommunicationPort(sila2.org.silastandard.examples.deviceservicer.v1.SetCommunicationPort_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.SetCommunicationPort_Responses) {}
    // Connect Device
    //   Sets up a serial connection with the device using the specified connection details.
    rpc ConnectDevice(sila2.org.silastandard.examples.deviceservicer.v1.ConnectDevice_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.ConnectDevice_Responses) {}
    // Reset Overload
    //   Reset the device command input buffer overload.
    rpc ResetOverload(sila2.org.silastandard.examples.deviceservicer.v1.ResetOverload_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.ResetOverload_Responses) {}
    // Current Status
    //   Get the current status of the device from the internal state machine of the SiLA server.
    rpc Subscribe_CurrentStatus(sila2.org.silastandard.examples.deviceservicer.v1.Subscribe_CurrentStatus_Parameters) returns (stream sila2.org.silastandard.examples.deviceservicer.v1.Subscribe_CurrentStatus_Responses) {}
    // Port Name
    //   The name of the serial port.
    rpc Get_PortName(sila2.org.silastandard.examples.deviceservicer.v1.Get_PortName_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.Get_PortName_Responses) {}
    // Baud Rate
    //   The baud rate of the serial port connection.
    rpc Get_BaudRate(sila2.org.silastandard.examples.deviceservicer.v1.Get_BaudRate_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.Get_BaudRate_Responses) {}
    // Parity
    //    Enable parity checking. Possible values: NONE, EVEN, ODD, MARK, SPACE. Default is NONE
    rpc Get_Parity(sila2.org.silastandard.examples.deviceservicer.v1.Get_Parity_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.Get_Parity_Responses) {}
    // Stop Bits
    //    Number of stop bits. Possible values: ONE, ONE_POINT_FIVE, TWO. Default is ONE
    rpc Get_StopBits(sila2.org.silastandard.examples.deviceservicer.v1.Get_StopBits_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.Get_StopBits_Responses) {}
    // Timeout
    //   Set a read timeout value. Default is 1.
    rpc Get_Timeout(sila2.org.silastandard.examples.deviceservicer.v1.Get_Timeout_Parameters) returns (sila2.org.silastandard.examples.deviceservicer.v1.Get_Timeout_Responses) {}
    
}

// ----------------- Data Type definitions -----------------


// ------ Command Parameter and Response definitions -------
message GetLog_Parameters {
    
}

message GetLog_Responses {
    sila2.org.silastandard.String CurrentLogLevel = 1;
    sila2.org.silastandard.Timestamp CurrentLogTimestamp = 2;
    sila2.org.silastandard.String CurrentLogMessage = 3;
}

message SetPumpAddress_Parameters {
    sila2.org.silastandard.Integer Address = 1;
}

message SetPumpAddress_Responses {
    sila2.org.silastandard.String PumpAddressSet = 1;
}

message GetPumpStatus_Parameters {
    
}

message GetPumpStatus_Responses {
    sila2.org.silastandard.String CurrentPumpStatus = 1;
}

message GetVersionType_Parameters {
    
}

message GetVersionType_Responses {
    sila2.org.silastandard.String CurrentVersionType = 1;
}

message GetVersionSoftware_Parameters {
    
}

message GetVersionSoftware_Responses {
    sila2.org.silastandard.String CurrentVersionSoftware = 1;
}

message GetPumpID_Parameters {
    
}

message GetPumpID_Responses {
    sila2.org.silastandard.String ID = 1;
}

message SetPumpID_Parameters {
    sila2.org.silastandard.Integer PumpID = 1;
}

message SetPumpID_Responses {
    sila2.org.silastandard.String ID = 1;
}

message ResetToDefault_Parameters {
    sila2.org.silastandard.String Reset = 1;
}

message ResetToDefault_Responses {
    sila2.org.silastandard.String ResetStatus = 1;
}

message GetTotalVolume_Parameters {
    
}

message GetTotalVolume_Responses {
    sila2.org.silastandard.Real TotalVolume = 1;
}

message ResetTotalVolume_Parameters {
    
}

message ResetTotalVolume_Responses {
    sila2.org.silastandard.String ResetResponse = 1;
}

message UnlockControlPanel_Parameters {
    
}

message UnlockControlPanel_Responses {
    sila2.org.silastandard.String ControlPanelUnlocked = 1;
}

message LockControlPanel_Parameters {
    
}

message LockControlPanel_Responses {
    sila2.org.silastandard.String ControlPanelLocked = 1;
}

message SetDisplayNumbers_Parameters {
    sila2.org.silastandard.Real DisplayNumbers = 1;
}

message SetDisplayNumbers_Responses {
    sila2.org.silastandard.String DisplayNumbersSet = 1;
}

message SetDisplayLetters_Parameters {
    sila2.org.silastandard.String DisplayLetters = 1;
}

message SetDisplayLetters_Responses {
    sila2.org.silastandard.String DisplayLettersSet = 1;
}

message SetCommunicationPort_Parameters {
    sila2.org.silastandard.String PortName = 1;
    sila2.org.silastandard.Integer BaudRate = 2;
    sila2.org.silastandard.String Parity = 3;
    sila2.org.silastandard.String StopBits = 4;
    sila2.org.silastandard.Real Timeout = 5;
}

message SetCommunicationPort_Responses {
    sila2.org.silastandard.String SetCommunicationPortStatus = 1;
}

message ConnectDevice_Parameters {
    
}

message ConnectDevice_Responses {
    sila2.org.silastandard.String ConnectionStatus = 1;
}

message ResetOverload_Parameters {
    
}

message ResetOverload_Responses {
    sila2.org.silastandard.String ResetOverloadStatus = 1;
}
message Subscribe_CurrentStatus_Parameters {
    // Empty message
}

message Subscribe_CurrentStatus_Responses {
    sila2.org.silastandard.String CurrentStatus = 1;
}

message Get_PortName_Parameters {
    // Empty message
}

message Get_PortName_Responses {
    sila2.org.silastandard.String PortName = 1;
}

message Get_BaudRate_Parameters {
    // Empty message
}

message Get_BaudRate_Responses {
    sila2.org.silastandard.Integer BaudRate = 1;
}

message Get_Parity_Parameters {
    // Empty message
}

message Get_Parity_Responses {
    sila2.org.silastandard.String Parity = 1;
}

message Get_StopBits_Parameters {
    // Empty message
}

message Get_StopBits_Responses {
    sila2.org.silastandard.String StopBits = 1;
}

message Get_Timeout_Parameters {
    // Empty message
}

message Get_Timeout_Responses {
    sila2.org.silastandard.Real Timeout = 1;
}

// ----------------- Metadata Definitions ------------------
