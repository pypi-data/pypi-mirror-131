# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import DeviceServicer_pb2 as DeviceServicer__pb2
import sila2lib.framework.SiLAFramework_pb2 as SiLAFramework__pb2


class DeviceServicerStub(object):
    """Feature: Device Servicer

    General device software and hardware information can be retrieved and changed within this function (Reglo DC
    (digital control) pump).
    Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 15.03.2021

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLog = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetLog',
                request_serializer=DeviceServicer__pb2.GetLog_Parameters.SerializeToString,
                response_deserializer=SiLAFramework__pb2.CommandConfirmation.FromString,
                )
        self.GetLog_Info = channel.unary_stream(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetLog_Info',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=SiLAFramework__pb2.ExecutionInfo.FromString,
                )
        self.GetLog_Result = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetLog_Result',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=DeviceServicer__pb2.GetLog_Responses.FromString,
                )
        self.SetPumpAddress = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/SetPumpAddress',
                request_serializer=DeviceServicer__pb2.SetPumpAddress_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.SetPumpAddress_Responses.FromString,
                )
        self.GetPumpStatus = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetPumpStatus',
                request_serializer=DeviceServicer__pb2.GetPumpStatus_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.GetPumpStatus_Responses.FromString,
                )
        self.GetVersionType = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetVersionType',
                request_serializer=DeviceServicer__pb2.GetVersionType_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.GetVersionType_Responses.FromString,
                )
        self.GetVersionSoftware = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetVersionSoftware',
                request_serializer=DeviceServicer__pb2.GetVersionSoftware_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.GetVersionSoftware_Responses.FromString,
                )
        self.GetPumpID = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetPumpID',
                request_serializer=DeviceServicer__pb2.GetPumpID_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.GetPumpID_Responses.FromString,
                )
        self.SetPumpID = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/SetPumpID',
                request_serializer=DeviceServicer__pb2.SetPumpID_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.SetPumpID_Responses.FromString,
                )
        self.ResetToDefault = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/ResetToDefault',
                request_serializer=DeviceServicer__pb2.ResetToDefault_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.ResetToDefault_Responses.FromString,
                )
        self.GetTotalVolume = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetTotalVolume',
                request_serializer=DeviceServicer__pb2.GetTotalVolume_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.GetTotalVolume_Responses.FromString,
                )
        self.ResetTotalVolume = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/ResetTotalVolume',
                request_serializer=DeviceServicer__pb2.ResetTotalVolume_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.ResetTotalVolume_Responses.FromString,
                )
        self.UnlockControlPanel = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/UnlockControlPanel',
                request_serializer=DeviceServicer__pb2.UnlockControlPanel_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.UnlockControlPanel_Responses.FromString,
                )
        self.LockControlPanel = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/LockControlPanel',
                request_serializer=DeviceServicer__pb2.LockControlPanel_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.LockControlPanel_Responses.FromString,
                )
        self.SetDisplayNumbers = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/SetDisplayNumbers',
                request_serializer=DeviceServicer__pb2.SetDisplayNumbers_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.SetDisplayNumbers_Responses.FromString,
                )
        self.SetDisplayLetters = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/SetDisplayLetters',
                request_serializer=DeviceServicer__pb2.SetDisplayLetters_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.SetDisplayLetters_Responses.FromString,
                )
        self.SetCommunicationPort = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/SetCommunicationPort',
                request_serializer=DeviceServicer__pb2.SetCommunicationPort_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.SetCommunicationPort_Responses.FromString,
                )
        self.ConnectDevice = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/ConnectDevice',
                request_serializer=DeviceServicer__pb2.ConnectDevice_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.ConnectDevice_Responses.FromString,
                )
        self.ResetOverload = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/ResetOverload',
                request_serializer=DeviceServicer__pb2.ResetOverload_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.ResetOverload_Responses.FromString,
                )
        self.Subscribe_CurrentStatus = channel.unary_stream(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Subscribe_CurrentStatus',
                request_serializer=DeviceServicer__pb2.Subscribe_CurrentStatus_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.Subscribe_CurrentStatus_Responses.FromString,
                )
        self.Get_PortName = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Get_PortName',
                request_serializer=DeviceServicer__pb2.Get_PortName_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.Get_PortName_Responses.FromString,
                )
        self.Get_BaudRate = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Get_BaudRate',
                request_serializer=DeviceServicer__pb2.Get_BaudRate_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.Get_BaudRate_Responses.FromString,
                )
        self.Get_Parity = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Get_Parity',
                request_serializer=DeviceServicer__pb2.Get_Parity_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.Get_Parity_Responses.FromString,
                )
        self.Get_StopBits = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Get_StopBits',
                request_serializer=DeviceServicer__pb2.Get_StopBits_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.Get_StopBits_Responses.FromString,
                )
        self.Get_Timeout = channel.unary_unary(
                '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Get_Timeout',
                request_serializer=DeviceServicer__pb2.Get_Timeout_Parameters.SerializeToString,
                response_deserializer=DeviceServicer__pb2.Get_Timeout_Responses.FromString,
                )


class DeviceServicerServicer(object):
    """Feature: Device Servicer

    General device software and hardware information can be retrieved and changed within this function (Reglo DC
    (digital control) pump).
    Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 15.03.2021

    """

    def GetLog(self, request, context):
        """Get Log
        Get the current status of the device from the state machine of the SiLA server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLog_Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLog_Result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPumpAddress(self, request, context):
        """Set Pump Address

        Set the address of the pump (1-8).

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPumpStatus(self, request, context):
        """Get Pump Status
        Get pump status. +=running, -=stopped/standby.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVersionType(self, request, context):
        """Get Version Type
        Get pump information. Response is string of model description (variable length), software version (3 digits) and pump
        head model type code (3 digits).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVersionSoftware(self, request, context):
        """Current Version Software
        Get pump software version. Response is string.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPumpID(self, request, context):
        """Get Pump ID
        Get pump head identification number.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPumpID(self, request, context):
        """Set Pump ID
        Set pump head identification number.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetToDefault(self, request, context):
        """Reset To Default

        Resets all user configurable data to default values.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTotalVolume(self, request, context):
        """Get Total Volume
        Get total volume pumped since last reset, in muL, mL, or L.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetTotalVolume(self, request, context):
        """Reset Total Volume
        Reset the total dispensed volume since the last reset.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlockControlPanel(self, request, context):
        """Unlock Control Panel

        Switch control panel to manual operation.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockControlPanel(self, request, context):
        """Lock Control Panel

        Set control panel to inactive (Input via control keys is not possible).

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDisplayNumbers(self, request, context):
        """Set Display Numbers

        Write numbers to the pump to display while under external control - float of length 5 including +/- and decimal
        points.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDisplayLetters(self, request, context):
        """Set Display Letters

        Write letters to the pump to display while under external control - string of length 4.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCommunicationPort(self, request, context):
        """Set Pump ID
        Set pump head identification number.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectDevice(self, request, context):
        """Connect Device
        Sets up a serial connection with the device using the specified connection details.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetOverload(self, request, context):
        """Reset Overload
        Reset the device command input buffer overload.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_CurrentStatus(self, request, context):
        """Current Status
        Get the current status of the device from the internal state machine of the SiLA server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_PortName(self, request, context):
        """Port Name
        The name of the serial port.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_BaudRate(self, request, context):
        """Baud Rate
        The baud rate of the serial port connection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_Parity(self, request, context):
        """Parity
        Enable parity checking. Possible values: NONE, EVEN, ODD, MARK, SPACE. Default is NONE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_StopBits(self, request, context):
        """Stop Bits
        Number of stop bits. Possible values: ONE, ONE_POINT_FIVE, TWO. Default is ONE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_Timeout(self, request, context):
        """Timeout
        Set a read timeout value. Default is 1.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceServicerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLog,
                    request_deserializer=DeviceServicer__pb2.GetLog_Parameters.FromString,
                    response_serializer=SiLAFramework__pb2.CommandConfirmation.SerializeToString,
            ),
            'GetLog_Info': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLog_Info,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=SiLAFramework__pb2.ExecutionInfo.SerializeToString,
            ),
            'GetLog_Result': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLog_Result,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=DeviceServicer__pb2.GetLog_Responses.SerializeToString,
            ),
            'SetPumpAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPumpAddress,
                    request_deserializer=DeviceServicer__pb2.SetPumpAddress_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.SetPumpAddress_Responses.SerializeToString,
            ),
            'GetPumpStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPumpStatus,
                    request_deserializer=DeviceServicer__pb2.GetPumpStatus_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.GetPumpStatus_Responses.SerializeToString,
            ),
            'GetVersionType': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersionType,
                    request_deserializer=DeviceServicer__pb2.GetVersionType_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.GetVersionType_Responses.SerializeToString,
            ),
            'GetVersionSoftware': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersionSoftware,
                    request_deserializer=DeviceServicer__pb2.GetVersionSoftware_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.GetVersionSoftware_Responses.SerializeToString,
            ),
            'GetPumpID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPumpID,
                    request_deserializer=DeviceServicer__pb2.GetPumpID_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.GetPumpID_Responses.SerializeToString,
            ),
            'SetPumpID': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPumpID,
                    request_deserializer=DeviceServicer__pb2.SetPumpID_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.SetPumpID_Responses.SerializeToString,
            ),
            'ResetToDefault': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetToDefault,
                    request_deserializer=DeviceServicer__pb2.ResetToDefault_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.ResetToDefault_Responses.SerializeToString,
            ),
            'GetTotalVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTotalVolume,
                    request_deserializer=DeviceServicer__pb2.GetTotalVolume_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.GetTotalVolume_Responses.SerializeToString,
            ),
            'ResetTotalVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetTotalVolume,
                    request_deserializer=DeviceServicer__pb2.ResetTotalVolume_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.ResetTotalVolume_Responses.SerializeToString,
            ),
            'UnlockControlPanel': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlockControlPanel,
                    request_deserializer=DeviceServicer__pb2.UnlockControlPanel_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.UnlockControlPanel_Responses.SerializeToString,
            ),
            'LockControlPanel': grpc.unary_unary_rpc_method_handler(
                    servicer.LockControlPanel,
                    request_deserializer=DeviceServicer__pb2.LockControlPanel_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.LockControlPanel_Responses.SerializeToString,
            ),
            'SetDisplayNumbers': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDisplayNumbers,
                    request_deserializer=DeviceServicer__pb2.SetDisplayNumbers_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.SetDisplayNumbers_Responses.SerializeToString,
            ),
            'SetDisplayLetters': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDisplayLetters,
                    request_deserializer=DeviceServicer__pb2.SetDisplayLetters_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.SetDisplayLetters_Responses.SerializeToString,
            ),
            'SetCommunicationPort': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCommunicationPort,
                    request_deserializer=DeviceServicer__pb2.SetCommunicationPort_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.SetCommunicationPort_Responses.SerializeToString,
            ),
            'ConnectDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectDevice,
                    request_deserializer=DeviceServicer__pb2.ConnectDevice_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.ConnectDevice_Responses.SerializeToString,
            ),
            'ResetOverload': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetOverload,
                    request_deserializer=DeviceServicer__pb2.ResetOverload_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.ResetOverload_Responses.SerializeToString,
            ),
            'Subscribe_CurrentStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_CurrentStatus,
                    request_deserializer=DeviceServicer__pb2.Subscribe_CurrentStatus_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.Subscribe_CurrentStatus_Responses.SerializeToString,
            ),
            'Get_PortName': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_PortName,
                    request_deserializer=DeviceServicer__pb2.Get_PortName_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.Get_PortName_Responses.SerializeToString,
            ),
            'Get_BaudRate': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_BaudRate,
                    request_deserializer=DeviceServicer__pb2.Get_BaudRate_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.Get_BaudRate_Responses.SerializeToString,
            ),
            'Get_Parity': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_Parity,
                    request_deserializer=DeviceServicer__pb2.Get_Parity_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.Get_Parity_Responses.SerializeToString,
            ),
            'Get_StopBits': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_StopBits,
                    request_deserializer=DeviceServicer__pb2.Get_StopBits_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.Get_StopBits_Responses.SerializeToString,
            ),
            'Get_Timeout': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_Timeout,
                    request_deserializer=DeviceServicer__pb2.Get_Timeout_Parameters.FromString,
                    response_serializer=DeviceServicer__pb2.Get_Timeout_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeviceServicer(object):
    """Feature: Device Servicer

    General device software and hardware information can be retrieved and changed within this function (Reglo DC
    (digital control) pump).
    Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 15.03.2021

    """

    @staticmethod
    def GetLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetLog',
            DeviceServicer__pb2.GetLog_Parameters.SerializeToString,
            SiLAFramework__pb2.CommandConfirmation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLog_Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetLog_Info',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            SiLAFramework__pb2.ExecutionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLog_Result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetLog_Result',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            DeviceServicer__pb2.GetLog_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPumpAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/SetPumpAddress',
            DeviceServicer__pb2.SetPumpAddress_Parameters.SerializeToString,
            DeviceServicer__pb2.SetPumpAddress_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPumpStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetPumpStatus',
            DeviceServicer__pb2.GetPumpStatus_Parameters.SerializeToString,
            DeviceServicer__pb2.GetPumpStatus_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVersionType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetVersionType',
            DeviceServicer__pb2.GetVersionType_Parameters.SerializeToString,
            DeviceServicer__pb2.GetVersionType_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVersionSoftware(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetVersionSoftware',
            DeviceServicer__pb2.GetVersionSoftware_Parameters.SerializeToString,
            DeviceServicer__pb2.GetVersionSoftware_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPumpID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetPumpID',
            DeviceServicer__pb2.GetPumpID_Parameters.SerializeToString,
            DeviceServicer__pb2.GetPumpID_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPumpID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/SetPumpID',
            DeviceServicer__pb2.SetPumpID_Parameters.SerializeToString,
            DeviceServicer__pb2.SetPumpID_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetToDefault(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/ResetToDefault',
            DeviceServicer__pb2.ResetToDefault_Parameters.SerializeToString,
            DeviceServicer__pb2.ResetToDefault_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTotalVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/GetTotalVolume',
            DeviceServicer__pb2.GetTotalVolume_Parameters.SerializeToString,
            DeviceServicer__pb2.GetTotalVolume_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetTotalVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/ResetTotalVolume',
            DeviceServicer__pb2.ResetTotalVolume_Parameters.SerializeToString,
            DeviceServicer__pb2.ResetTotalVolume_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlockControlPanel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/UnlockControlPanel',
            DeviceServicer__pb2.UnlockControlPanel_Parameters.SerializeToString,
            DeviceServicer__pb2.UnlockControlPanel_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockControlPanel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/LockControlPanel',
            DeviceServicer__pb2.LockControlPanel_Parameters.SerializeToString,
            DeviceServicer__pb2.LockControlPanel_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDisplayNumbers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/SetDisplayNumbers',
            DeviceServicer__pb2.SetDisplayNumbers_Parameters.SerializeToString,
            DeviceServicer__pb2.SetDisplayNumbers_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDisplayLetters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/SetDisplayLetters',
            DeviceServicer__pb2.SetDisplayLetters_Parameters.SerializeToString,
            DeviceServicer__pb2.SetDisplayLetters_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCommunicationPort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/SetCommunicationPort',
            DeviceServicer__pb2.SetCommunicationPort_Parameters.SerializeToString,
            DeviceServicer__pb2.SetCommunicationPort_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/ConnectDevice',
            DeviceServicer__pb2.ConnectDevice_Parameters.SerializeToString,
            DeviceServicer__pb2.ConnectDevice_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetOverload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/ResetOverload',
            DeviceServicer__pb2.ResetOverload_Parameters.SerializeToString,
            DeviceServicer__pb2.ResetOverload_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_CurrentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Subscribe_CurrentStatus',
            DeviceServicer__pb2.Subscribe_CurrentStatus_Parameters.SerializeToString,
            DeviceServicer__pb2.Subscribe_CurrentStatus_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_PortName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Get_PortName',
            DeviceServicer__pb2.Get_PortName_Parameters.SerializeToString,
            DeviceServicer__pb2.Get_PortName_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_BaudRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Get_BaudRate',
            DeviceServicer__pb2.Get_BaudRate_Parameters.SerializeToString,
            DeviceServicer__pb2.Get_BaudRate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_Parity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Get_Parity',
            DeviceServicer__pb2.Get_Parity_Parameters.SerializeToString,
            DeviceServicer__pb2.Get_Parity_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_StopBits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Get_StopBits',
            DeviceServicer__pb2.Get_StopBits_Parameters.SerializeToString,
            DeviceServicer__pb2.Get_StopBits_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_Timeout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.deviceservicer.v1.DeviceServicer/Get_Timeout',
            DeviceServicer__pb2.Get_Timeout_Parameters.SerializeToString,
            DeviceServicer__pb2.Get_Timeout_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
