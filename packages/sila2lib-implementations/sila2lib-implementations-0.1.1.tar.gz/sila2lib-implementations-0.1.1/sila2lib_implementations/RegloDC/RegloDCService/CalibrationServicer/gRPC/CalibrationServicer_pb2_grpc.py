# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import CalibrationServicer_pb2 as CalibrationServicer__pb2


class CalibrationServicerStub(object):
    """Feature: Calibration Servicer

    Set and retrieve the control parameter values for calibration of the Reglo DC (digital control) pump.
    Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 15.03.2021.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartCalibrationTime = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/StartCalibrationTime',
                request_serializer=CalibrationServicer__pb2.StartCalibrationTime_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.StartCalibrationTime_Responses.FromString,
                )
        self.StartCalibrationVolume = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/StartCalibrationVolume',
                request_serializer=CalibrationServicer__pb2.StartCalibrationVolume_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.StartCalibrationVolume_Responses.FromString,
                )
        self.GetDefaultFlowRate = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetDefaultFlowRate',
                request_serializer=CalibrationServicer__pb2.GetDefaultFlowRate_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.GetDefaultFlowRate_Responses.FromString,
                )
        self.GetCalibratedFlowRate = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetCalibratedFlowRate',
                request_serializer=CalibrationServicer__pb2.GetCalibratedFlowRate_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.GetCalibratedFlowRate_Responses.FromString,
                )
        self.SetCalibratedFlowRate = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetCalibratedFlowRate',
                request_serializer=CalibrationServicer__pb2.SetCalibratedFlowRate_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.SetCalibratedFlowRate_Responses.FromString,
                )
        self.SetCalibrationTargetVolume = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetCalibrationTargetVolume',
                request_serializer=CalibrationServicer__pb2.SetCalibrationTargetVolume_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.SetCalibrationTargetVolume_Responses.FromString,
                )
        self.SetCalibrationTargetTime = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetCalibrationTargetTime',
                request_serializer=CalibrationServicer__pb2.SetCalibrationTargetTime_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.SetCalibrationTargetTime_Responses.FromString,
                )
        self.SetActualVolume = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetActualVolume',
                request_serializer=CalibrationServicer__pb2.SetActualVolume_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.SetActualVolume_Responses.FromString,
                )
        self.GetTargetVolume = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetTargetVolume',
                request_serializer=CalibrationServicer__pb2.GetTargetVolume_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.GetTargetVolume_Responses.FromString,
                )
        self.SetActualTime = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetActualTime',
                request_serializer=CalibrationServicer__pb2.SetActualTime_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.SetActualTime_Responses.FromString,
                )
        self.GetTargetTime = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetTargetTime',
                request_serializer=CalibrationServicer__pb2.GetTargetTime_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.GetTargetTime_Responses.FromString,
                )
        self.SetDirectionCalibration = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetDirectionCalibration',
                request_serializer=CalibrationServicer__pb2.SetDirectionCalibration_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.SetDirectionCalibration_Responses.FromString,
                )
        self.GetDirectionCalibration = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetDirectionCalibration',
                request_serializer=CalibrationServicer__pb2.GetDirectionCalibration_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.GetDirectionCalibration_Responses.FromString,
                )
        self.GetLastCalibrationTime = channel.unary_unary(
                '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetLastCalibrationTime',
                request_serializer=CalibrationServicer__pb2.GetLastCalibrationTime_Parameters.SerializeToString,
                response_deserializer=CalibrationServicer__pb2.GetLastCalibrationTime_Responses.FromString,
                )


class CalibrationServicerServicer(object):
    """Feature: Calibration Servicer

    Set and retrieve the control parameter values for calibration of the Reglo DC (digital control) pump.
    Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 15.03.2021.

    """

    def StartCalibrationTime(self, request, context):
        """Start Calibration Time

        Start calibration using the time defined by "Calibration Time".

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartCalibrationVolume(self, request, context):
        """Start Calibration Volume

        Start calibration using the volume defined by "Calibration Volume".

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDefaultFlowRate(self, request, context):
        """Get Default Flow Rate

        Get the default flow rate [mL/min] of the programmed pump-head and tubing at max. speed (160/100 rpm).

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCalibratedFlowRate(self, request, context):
        """Get Calibrated Flow Rate

        Get the calibrated flow rate in mL/min (at max. speed = 160/100 rpm).

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCalibratedFlowRate(self, request, context):
        """Set Calibrated Flow Rate

        Set the calibrated flow rate in mL/min (at max. speed = 160/100 rpm). The position of the decimal point depends
        on the programmed pump head and tubing.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCalibrationTargetVolume(self, request, context):
        """Set Target Volume Value

        Set target volume to pump for calibrating in mL.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCalibrationTargetTime(self, request, context):
        """Set Target Time Value

        Set target time to pump for calibrating in s.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetActualVolume(self, request, context):
        """Set Actual Volume Value

        Set the actual volume measured during calibration in mL.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTargetVolume(self, request, context):
        """Get Target Volume
        Get target volume to pump for calibrating in mL.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetActualTime(self, request, context):
        """Set Actual Time Value

        Set the actual time measured during calibration in s.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTargetTime(self, request, context):
        """Get Target Time
        Get target time to pump for calibrating in s.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDirectionCalibration(self, request, context):
        """Set Direction Flow for Calibration

        Set direction flow for calibration J or K using DIRECTION format.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDirectionCalibration(self, request, context):
        """Get Direction Flow for Calibration

        Get direction flow for calibration (J or K).

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLastCalibrationTime(self, request, context):
        """Get Last Calibration Time

        Get the time of the last calibration.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalibrationServicerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartCalibrationTime': grpc.unary_unary_rpc_method_handler(
                    servicer.StartCalibrationTime,
                    request_deserializer=CalibrationServicer__pb2.StartCalibrationTime_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.StartCalibrationTime_Responses.SerializeToString,
            ),
            'StartCalibrationVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.StartCalibrationVolume,
                    request_deserializer=CalibrationServicer__pb2.StartCalibrationVolume_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.StartCalibrationVolume_Responses.SerializeToString,
            ),
            'GetDefaultFlowRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDefaultFlowRate,
                    request_deserializer=CalibrationServicer__pb2.GetDefaultFlowRate_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.GetDefaultFlowRate_Responses.SerializeToString,
            ),
            'GetCalibratedFlowRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCalibratedFlowRate,
                    request_deserializer=CalibrationServicer__pb2.GetCalibratedFlowRate_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.GetCalibratedFlowRate_Responses.SerializeToString,
            ),
            'SetCalibratedFlowRate': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCalibratedFlowRate,
                    request_deserializer=CalibrationServicer__pb2.SetCalibratedFlowRate_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.SetCalibratedFlowRate_Responses.SerializeToString,
            ),
            'SetCalibrationTargetVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCalibrationTargetVolume,
                    request_deserializer=CalibrationServicer__pb2.SetCalibrationTargetVolume_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.SetCalibrationTargetVolume_Responses.SerializeToString,
            ),
            'SetCalibrationTargetTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCalibrationTargetTime,
                    request_deserializer=CalibrationServicer__pb2.SetCalibrationTargetTime_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.SetCalibrationTargetTime_Responses.SerializeToString,
            ),
            'SetActualVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActualVolume,
                    request_deserializer=CalibrationServicer__pb2.SetActualVolume_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.SetActualVolume_Responses.SerializeToString,
            ),
            'GetTargetVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTargetVolume,
                    request_deserializer=CalibrationServicer__pb2.GetTargetVolume_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.GetTargetVolume_Responses.SerializeToString,
            ),
            'SetActualTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActualTime,
                    request_deserializer=CalibrationServicer__pb2.SetActualTime_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.SetActualTime_Responses.SerializeToString,
            ),
            'GetTargetTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTargetTime,
                    request_deserializer=CalibrationServicer__pb2.GetTargetTime_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.GetTargetTime_Responses.SerializeToString,
            ),
            'SetDirectionCalibration': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDirectionCalibration,
                    request_deserializer=CalibrationServicer__pb2.SetDirectionCalibration_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.SetDirectionCalibration_Responses.SerializeToString,
            ),
            'GetDirectionCalibration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDirectionCalibration,
                    request_deserializer=CalibrationServicer__pb2.GetDirectionCalibration_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.GetDirectionCalibration_Responses.SerializeToString,
            ),
            'GetLastCalibrationTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLastCalibrationTime,
                    request_deserializer=CalibrationServicer__pb2.GetLastCalibrationTime_Parameters.FromString,
                    response_serializer=CalibrationServicer__pb2.GetLastCalibrationTime_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CalibrationServicer(object):
    """Feature: Calibration Servicer

    Set and retrieve the control parameter values for calibration of the Reglo DC (digital control) pump.
    Lukas Bromig, Institute of Biochemical Engineering, Technical University of Munich, 15.03.2021.

    """

    @staticmethod
    def StartCalibrationTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/StartCalibrationTime',
            CalibrationServicer__pb2.StartCalibrationTime_Parameters.SerializeToString,
            CalibrationServicer__pb2.StartCalibrationTime_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartCalibrationVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/StartCalibrationVolume',
            CalibrationServicer__pb2.StartCalibrationVolume_Parameters.SerializeToString,
            CalibrationServicer__pb2.StartCalibrationVolume_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDefaultFlowRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetDefaultFlowRate',
            CalibrationServicer__pb2.GetDefaultFlowRate_Parameters.SerializeToString,
            CalibrationServicer__pb2.GetDefaultFlowRate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCalibratedFlowRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetCalibratedFlowRate',
            CalibrationServicer__pb2.GetCalibratedFlowRate_Parameters.SerializeToString,
            CalibrationServicer__pb2.GetCalibratedFlowRate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCalibratedFlowRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetCalibratedFlowRate',
            CalibrationServicer__pb2.SetCalibratedFlowRate_Parameters.SerializeToString,
            CalibrationServicer__pb2.SetCalibratedFlowRate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCalibrationTargetVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetCalibrationTargetVolume',
            CalibrationServicer__pb2.SetCalibrationTargetVolume_Parameters.SerializeToString,
            CalibrationServicer__pb2.SetCalibrationTargetVolume_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCalibrationTargetTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetCalibrationTargetTime',
            CalibrationServicer__pb2.SetCalibrationTargetTime_Parameters.SerializeToString,
            CalibrationServicer__pb2.SetCalibrationTargetTime_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetActualVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetActualVolume',
            CalibrationServicer__pb2.SetActualVolume_Parameters.SerializeToString,
            CalibrationServicer__pb2.SetActualVolume_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTargetVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetTargetVolume',
            CalibrationServicer__pb2.GetTargetVolume_Parameters.SerializeToString,
            CalibrationServicer__pb2.GetTargetVolume_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetActualTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetActualTime',
            CalibrationServicer__pb2.SetActualTime_Parameters.SerializeToString,
            CalibrationServicer__pb2.SetActualTime_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTargetTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetTargetTime',
            CalibrationServicer__pb2.GetTargetTime_Parameters.SerializeToString,
            CalibrationServicer__pb2.GetTargetTime_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDirectionCalibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/SetDirectionCalibration',
            CalibrationServicer__pb2.SetDirectionCalibration_Parameters.SerializeToString,
            CalibrationServicer__pb2.SetDirectionCalibration_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDirectionCalibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetDirectionCalibration',
            CalibrationServicer__pb2.GetDirectionCalibration_Parameters.SerializeToString,
            CalibrationServicer__pb2.GetDirectionCalibration_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLastCalibrationTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.org.silastandard.examples.calibrationservicer.v1.CalibrationServicer/GetLastCalibrationTime',
            CalibrationServicer__pb2.GetLastCalibrationTime_Parameters.SerializeToString,
            CalibrationServicer__pb2.GetLastCalibrationTime_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
