// This file is automatically generated by sila2lib.proto_builder.proto_builder version 0.2.0
// :generation date: 2021-03-19 14:54:01
//
// ---- PLEASE DO NOT MODIFY MANUALLY !! ---

syntax = "proto3";
import "SiLAFramework.proto";
package sila2.biovt.mw.tum.de.examples.deviceprovider.v1;

// Feature: Device Provider
//   
//                   Delivers full information of the device, actual parameters and relevant information.
//           By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
//   12.02.2020
//   
service DeviceProvider {
    // Get Identification String
    //   Identification number of the device and software version
    rpc GetIdentificationString(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetIdentificationString_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetIdentificationString_Responses) {}
    // Get primary node address 
    //   Primary node address: network parameter Flow-Bus
    rpc GetPrimaryNodeAddress(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetPrimaryNodeAddress_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetPrimaryNodeAddress_Responses) {}
    // Set primary node address
    //   Primary node address: network parameter Flow-Bus
    rpc SetPrimaryNodeAddress(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.SetPrimaryNodeAddress_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.SetPrimaryNodeAddress_Responses) {}
    // Get secondary node address 
    //   Secondary node address: network parameter Flow-Bus
    rpc GetSecondaryNodeAddress(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetSecondaryNodeAddress_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetSecondaryNodeAddress_Responses) {}
    // Get next node address
    //   Next node address: network parameter Flow-Bus
    rpc GetNextNodeAddress(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetNextNodeAddress_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetNextNodeAddress_Responses) {}
    // Get last node address 
    //   Last node address: network parameter Flow-Bus
    rpc GetLastNodeAddress(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetLastNodeAddress_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetLastNodeAddress_Responses) {}
    // Get sensor type
    //   Sensor type information for actual reading and sensor/controller indication
    rpc GetSensorType(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetSensorType_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetSensorType_Responses) {}
    // Get alarm information
    //   Information of several alarms/errors in the instrument
    rpc GetAlarmInformation(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetAlarmInformation_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetAlarmInformation_Responses) {}
    // Get device type
    //   Flow bus device type information
    rpc GetDeviceType(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetDeviceType_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetDeviceType_Responses) {}
    // Get firmware version
    //    revision number of the firmware
    rpc GetFirmwareVersion(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetFirmwareVersion_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetFirmwareVersion_Responses) {}
    // Get pressure sensor type
    //   type of pressure sensor
    rpc GetPressureSensorType(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetPressureSensorType_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetPressureSensorType_Responses) {}
    // Get sensor name
    //    label with information about stop sensor
    rpc GetSensorName(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetSensorName_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetSensorName_Responses) {}
    // Get identification number
    //   Identification number type of instrument/device
    rpc GetIdentificationNumber(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetIdentificationNumber_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetIdentificationNumber_Responses) {}
    // Get power mode
    //   power suppy indication in Vdc
    rpc GetPowerMode(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetPowerMode_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetPowerMode_Responses) {}
    // Get bus diagnostic
    //   Fieldbus baudrate (top interface)
    rpc GetBusDiagnostic(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetBusDiagnostic_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetBusDiagnostic_Responses) {}
    // Get fieldbus string
    //   Fieldbus string name of the top interface
    rpc GetFieldbus(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetFieldbus_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetFieldbus_Responses) {}
    // Get instrument properties
    //   instrument properties
    rpc GetInstrumentProperties(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetInstrumentProperties_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetInstrumentProperties_Responses) {}
    // Get communication protocol
    //   
    //               Current communication protocol between the program adn the device.
    //               2 possible options: "binary" and "ascii"
    //   
    rpc GetCommunicationProtocol(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetCommunicationProtocol_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetCommunicationProtocol_Responses) {}
    // Set communication protocol
    //   
    //               Allows to choose the communication protocol between the program adn the device.
    //               2 possible options:_ "binary" and "ascii"
    //   
    rpc SetCommunicationProtocol(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.SetCommunicationProtocol_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.SetCommunicationProtocol_Responses) {}
    // Get serial port
    //   Current devices serial port
    rpc GetSerialPort(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetSerialPort_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.GetSerialPort_Responses) {}
    // Set serial port
    //   
    //               Sets devices new serial port
    //   
    rpc SetSerialPort(sila2.biovt.mw.tum.de.examples.deviceprovider.v1.SetSerialPort_Parameters) returns (sila2.biovt.mw.tum.de.examples.deviceprovider.v1.SetSerialPort_Responses) {}
    
    
}

// ----------------- Data Type definitions -----------------


// ------ Command Parameter and Response definitions -------
message GetIdentificationString_Parameters {
    
}

message GetIdentificationString_Responses {
    sila2.org.silastandard.String CurrentIdentificationString = 1;
}

message GetPrimaryNodeAddress_Parameters {
    
}

message GetPrimaryNodeAddress_Responses {
    sila2.org.silastandard.String CurrentPrimaryNodeAddress = 1;
}

message SetPrimaryNodeAddress_Parameters {
    sila2.org.silastandard.String SetPrimaryNodeAddress = 1;
}

message SetPrimaryNodeAddress_Responses {
    sila2.org.silastandard.String Status = 1;
    sila2.org.silastandard.String IndexPointing = 2;
}

message GetSecondaryNodeAddress_Parameters {
    
}

message GetSecondaryNodeAddress_Responses {
    sila2.org.silastandard.String CurrentSecondaryNodeAddress = 1;
}

message GetNextNodeAddress_Parameters {
    
}

message GetNextNodeAddress_Responses {
    sila2.org.silastandard.String CurrentNextNodeAddress = 1;
}

message GetLastNodeAddress_Parameters {
    
}

message GetLastNodeAddress_Responses {
    sila2.org.silastandard.String CurrentLastNodeAddress = 1;
}

message GetSensorType_Parameters {
    
}

message GetSensorType_Responses {
    sila2.org.silastandard.String CurrentSensorType = 1;
}

message GetAlarmInformation_Parameters {
    
}

message GetAlarmInformation_Responses {
    sila2.org.silastandard.String CurrentAlarmInformation = 1;
}

message GetDeviceType_Parameters {
    
}

message GetDeviceType_Responses {
    sila2.org.silastandard.String CurrentDeviceType = 1;
}

message GetFirmwareVersion_Parameters {
    
}

message GetFirmwareVersion_Responses {
    sila2.org.silastandard.String CurrentFirmwareVersion = 1;
}

message GetPressureSensorType_Parameters {
    
}

message GetPressureSensorType_Responses {
    sila2.org.silastandard.String CurrentPressureSensorType = 1;
}

message GetSensorName_Parameters {
    
}

message GetSensorName_Responses {
    sila2.org.silastandard.String CurrentSensorName = 1;
}

message GetIdentificationNumber_Parameters {
    
}

message GetIdentificationNumber_Responses {
    sila2.org.silastandard.String CurrentIdentificationNumber = 1;
}

message GetPowerMode_Parameters {
    
}

message GetPowerMode_Responses {
    sila2.org.silastandard.String CurrentPowerMode = 1;
}

message GetBusDiagnostic_Parameters {
    
}

message GetBusDiagnostic_Responses {
    sila2.org.silastandard.String CurrentBusDiagnostic = 1;
}

message GetFieldbus_Parameters {
    
}

message GetFieldbus_Responses {
    sila2.org.silastandard.String CurrentFieldbus = 1;
}

message GetInstrumentProperties_Parameters {
    
}

message GetInstrumentProperties_Responses {
    sila2.org.silastandard.String CurrentInstrumentProperties = 1;
}

message GetCommunicationProtocol_Parameters {
    
}

message GetCommunicationProtocol_Responses {
    sila2.org.silastandard.String CurrentCommunicationProtocol = 1;
}

message SetCommunicationProtocol_Parameters {
    sila2.org.silastandard.String SetCommunicationProtocol = 1;
}

message SetCommunicationProtocol_Responses {
    
}

message GetSerialPort_Parameters {
    
}

message GetSerialPort_Responses {
    
}

message SetSerialPort_Parameters {
    sila2.org.silastandard.String SetSerialPort = 1;
}

message SetSerialPort_Responses {
    
}


// ----------------- Metadata Definitions ------------------
