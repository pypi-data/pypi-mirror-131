# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import MeasurementSettingsService_pb2 as MeasurementSettingsService__pb2


class MeasurementSettingsServiceStub(object):
    """Feature: Measurement Settings Service

    Used to acquire and modify general status and parameters of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPistonOperationMode = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetPistonOperationMode',
                request_serializer=MeasurementSettingsService__pb2.GetPistonOperationMode_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetPistonOperationMode_Responses.FromString,
                )
        self.SetPistonOperationMode = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetPistonOperationMode',
                request_serializer=MeasurementSettingsService__pb2.SetPistonOperationMode_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetPistonOperationMode_Responses.FromString,
                )
        self.GetTimeOut = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetTimeOut',
                request_serializer=MeasurementSettingsService__pb2.GetTimeOut_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetTimeOut_Responses.FromString,
                )
        self.SetTimeOut = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetTimeOut',
                request_serializer=MeasurementSettingsService__pb2.SetTimeOut_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetTimeOut_Responses.FromString,
                )
        self.GetFrequency = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetFrequency',
                request_serializer=MeasurementSettingsService__pb2.GetFrequency_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetFrequency_Responses.FromString,
                )
        self.SetFrequency = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetFrequency',
                request_serializer=MeasurementSettingsService__pb2.SetFrequency_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetFrequency_Responses.FromString,
                )
        self.GetDensityActual = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetDensityActual',
                request_serializer=MeasurementSettingsService__pb2.GetDensityActual_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetDensityActual_Responses.FromString,
                )
        self.SetDensityActual = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetDensityActual',
                request_serializer=MeasurementSettingsService__pb2.SetDensityActual_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetDensityActual_Responses.FromString,
                )
        self.GetPressureInlet = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetPressureInlet',
                request_serializer=MeasurementSettingsService__pb2.GetPressureInlet_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetPressureInlet_Responses.FromString,
                )
        self.SetPressureInlet = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetPressureInlet',
                request_serializer=MeasurementSettingsService__pb2.SetPressureInlet_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetPressureInlet_Responses.FromString,
                )
        self.GetPressureOutlet = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetPressureOutlet',
                request_serializer=MeasurementSettingsService__pb2.GetPressureOutlet_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetPressureOutlet_Responses.FromString,
                )
        self.SetPressureOutlet = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetPressureOutlet',
                request_serializer=MeasurementSettingsService__pb2.SetPressureOutlet_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetPressureOutlet_Responses.FromString,
                )
        self.GetFluidTemperature = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetFluidTemperature',
                request_serializer=MeasurementSettingsService__pb2.GetFluidTemperature_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetFluidTemperature_Responses.FromString,
                )
        self.SetFluidTemperature = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetFluidTemperature',
                request_serializer=MeasurementSettingsService__pb2.SetFluidTemperature_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetFluidTemperature_Responses.FromString,
                )
        self.GetThermalConductivity = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetThermalConductivity',
                request_serializer=MeasurementSettingsService__pb2.GetThermalConductivity_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetThermalConductivity_Responses.FromString,
                )
        self.SetThermalConductivity = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetThermalConductivity',
                request_serializer=MeasurementSettingsService__pb2.SetThermalConductivity_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetThermalConductivity_Responses.FromString,
                )
        self.GetStandardMassFlow = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetStandardMassFlow',
                request_serializer=MeasurementSettingsService__pb2.GetStandardMassFlow_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetStandardMassFlow_Responses.FromString,
                )
        self.SetStandardMassFlow = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetStandardMassFlow',
                request_serializer=MeasurementSettingsService__pb2.SetStandardMassFlow_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetStandardMassFlow_Responses.FromString,
                )
        self.GetOrificeDiameter = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetOrificeDiameter',
                request_serializer=MeasurementSettingsService__pb2.GetOrificeDiameter_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetOrificeDiameter_Responses.FromString,
                )
        self.SetOrificeDiameter = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetOrificeDiameter',
                request_serializer=MeasurementSettingsService__pb2.SetOrificeDiameter_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetOrificeDiameter_Responses.FromString,
                )
        self.GetBarometerPressure = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetBarometerPressure',
                request_serializer=MeasurementSettingsService__pb2.GetBarometerPressure_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetBarometerPressure_Responses.FromString,
                )
        self.SetBarometerPressure = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetBarometerPressure',
                request_serializer=MeasurementSettingsService__pb2.SetBarometerPressure_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetBarometerPressure_Responses.FromString,
                )
        self.GetNumberVanes = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetNumberVanes',
                request_serializer=MeasurementSettingsService__pb2.GetNumberVanes_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.GetNumberVanes_Responses.FromString,
                )
        self.SetNumberVanes = channel.unary_unary(
                '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetNumberVanes',
                request_serializer=MeasurementSettingsService__pb2.SetNumberVanes_Parameters.SerializeToString,
                response_deserializer=MeasurementSettingsService__pb2.SetNumberVanes_Responses.FromString,
                )


class MeasurementSettingsServiceServicer(object):
    """Feature: Measurement Settings Service

    Used to acquire and modify general status and parameters of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    def GetPistonOperationMode(self, request, context):
        """Get piston operation mode
        Piston prover operation mode and its status information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPistonOperationMode(self, request, context):
        """Set piston operation mode
        Set the new piston prover operation mode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTimeOut(self, request, context):
        """Get time out
        Maximum admitted duration time for specific procedure (in 0,1seconds; 100 milliseconds)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTimeOut(self, request, context):
        """Set time out

        Set the new maximum admitted duration time for specific procedure (in 0,1seconds; 100 milliseconds)

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFrequency(self, request, context):
        """Get frequency
        Piston frequency in Hz
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFrequency(self, request, context):
        """Set frequency
        Set the new piston frequency in Hz
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDensityActual(self, request, context):
        """Get density actual
        reference density of selected fluid in Kg pro m3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDensityActual(self, request, context):
        """Set densityActual
        Set the new reference density of the selected fluid in Kg prom3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPressureInlet(self, request, context):
        """Get pressure inlet

        Pressure inlet (upstream) of fluid in bar, for the first fluid-Nr. only in millibar

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPressureInlet(self, request, context):
        """Set pressure inlet
        Set the new pressure inlet (upstream) of fluid in bar (first fluid only)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPressureOutlet(self, request, context):
        """Get pressure outlet

        Pressure outlet (downstream) of fluid in bar, for the first fluid-Nr. only. in millibar

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPressureOutlet(self, request, context):
        """Set pressure outlet

        Set the new pressure outlet (downstream) of fluid in bar (first fluid only) in millibar

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFluidTemperature(self, request, context):
        """Get fluid temperature
        temperature of fluid through instrument (for first fluid only) in degree Celsius
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFluidTemperature(self, request, context):
        """Set fluid temperature

        Set the new temperature of fluid through instrument (for first fluid only) in Celsius degree

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetThermalConductivity(self, request, context):
        """Get thermal conductivity

        Thermal conductivity at sensor conditions at Watt/(m*K). Value is equal or bigger than 0

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetThermalConductivity(self, request, context):
        """SetThermalConductivity
        Set the new thermal conductivity in sensor conditions in Watt/(m*K)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStandardMassFlow(self, request, context):
        """Get standard mass flow

        Standard mass flow in l/min air (20°C, 1atm, 1.01325bar) or g/h H2O equivalent. Value bigger than 0

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetStandardMassFlow(self, request, context):
        """Set standard mass flow

        Set the new standard mass flow in l/min air (20°C, 1atm, 1.01325bar) or g/h H2O equivalent. Value bigger
        than 0

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrificeDiameter(self, request, context):
        """Get orifice diameter
        Orifice diameter in mm
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOrificeDiameter(self, request, context):
        """Set orifice diameter
        Set new orifice diameter in mm
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBarometerPressure(self, request, context):
        """Get barometer pressure
        barometer atmospheric pressure in millibar
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBarometerPressure(self, request, context):
        """Set barometer pressure
        set current barometer atmospheric pressure in millibar
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNumberVanes(self, request, context):
        """Get number vanes
        Current number of vanes used in rotor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNumberVanes(self, request, context):
        """Set number vanes
        Set number of vanes used in rotor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeasurementSettingsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPistonOperationMode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPistonOperationMode,
                    request_deserializer=MeasurementSettingsService__pb2.GetPistonOperationMode_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetPistonOperationMode_Responses.SerializeToString,
            ),
            'SetPistonOperationMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPistonOperationMode,
                    request_deserializer=MeasurementSettingsService__pb2.SetPistonOperationMode_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetPistonOperationMode_Responses.SerializeToString,
            ),
            'GetTimeOut': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTimeOut,
                    request_deserializer=MeasurementSettingsService__pb2.GetTimeOut_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetTimeOut_Responses.SerializeToString,
            ),
            'SetTimeOut': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTimeOut,
                    request_deserializer=MeasurementSettingsService__pb2.SetTimeOut_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetTimeOut_Responses.SerializeToString,
            ),
            'GetFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFrequency,
                    request_deserializer=MeasurementSettingsService__pb2.GetFrequency_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetFrequency_Responses.SerializeToString,
            ),
            'SetFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFrequency,
                    request_deserializer=MeasurementSettingsService__pb2.SetFrequency_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetFrequency_Responses.SerializeToString,
            ),
            'GetDensityActual': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDensityActual,
                    request_deserializer=MeasurementSettingsService__pb2.GetDensityActual_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetDensityActual_Responses.SerializeToString,
            ),
            'SetDensityActual': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDensityActual,
                    request_deserializer=MeasurementSettingsService__pb2.SetDensityActual_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetDensityActual_Responses.SerializeToString,
            ),
            'GetPressureInlet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPressureInlet,
                    request_deserializer=MeasurementSettingsService__pb2.GetPressureInlet_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetPressureInlet_Responses.SerializeToString,
            ),
            'SetPressureInlet': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPressureInlet,
                    request_deserializer=MeasurementSettingsService__pb2.SetPressureInlet_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetPressureInlet_Responses.SerializeToString,
            ),
            'GetPressureOutlet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPressureOutlet,
                    request_deserializer=MeasurementSettingsService__pb2.GetPressureOutlet_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetPressureOutlet_Responses.SerializeToString,
            ),
            'SetPressureOutlet': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPressureOutlet,
                    request_deserializer=MeasurementSettingsService__pb2.SetPressureOutlet_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetPressureOutlet_Responses.SerializeToString,
            ),
            'GetFluidTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFluidTemperature,
                    request_deserializer=MeasurementSettingsService__pb2.GetFluidTemperature_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetFluidTemperature_Responses.SerializeToString,
            ),
            'SetFluidTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFluidTemperature,
                    request_deserializer=MeasurementSettingsService__pb2.SetFluidTemperature_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetFluidTemperature_Responses.SerializeToString,
            ),
            'GetThermalConductivity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetThermalConductivity,
                    request_deserializer=MeasurementSettingsService__pb2.GetThermalConductivity_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetThermalConductivity_Responses.SerializeToString,
            ),
            'SetThermalConductivity': grpc.unary_unary_rpc_method_handler(
                    servicer.SetThermalConductivity,
                    request_deserializer=MeasurementSettingsService__pb2.SetThermalConductivity_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetThermalConductivity_Responses.SerializeToString,
            ),
            'GetStandardMassFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStandardMassFlow,
                    request_deserializer=MeasurementSettingsService__pb2.GetStandardMassFlow_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetStandardMassFlow_Responses.SerializeToString,
            ),
            'SetStandardMassFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStandardMassFlow,
                    request_deserializer=MeasurementSettingsService__pb2.SetStandardMassFlow_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetStandardMassFlow_Responses.SerializeToString,
            ),
            'GetOrificeDiameter': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrificeDiameter,
                    request_deserializer=MeasurementSettingsService__pb2.GetOrificeDiameter_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetOrificeDiameter_Responses.SerializeToString,
            ),
            'SetOrificeDiameter': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOrificeDiameter,
                    request_deserializer=MeasurementSettingsService__pb2.SetOrificeDiameter_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetOrificeDiameter_Responses.SerializeToString,
            ),
            'GetBarometerPressure': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBarometerPressure,
                    request_deserializer=MeasurementSettingsService__pb2.GetBarometerPressure_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetBarometerPressure_Responses.SerializeToString,
            ),
            'SetBarometerPressure': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBarometerPressure,
                    request_deserializer=MeasurementSettingsService__pb2.SetBarometerPressure_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetBarometerPressure_Responses.SerializeToString,
            ),
            'GetNumberVanes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNumberVanes,
                    request_deserializer=MeasurementSettingsService__pb2.GetNumberVanes_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.GetNumberVanes_Responses.SerializeToString,
            ),
            'SetNumberVanes': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNumberVanes,
                    request_deserializer=MeasurementSettingsService__pb2.SetNumberVanes_Parameters.FromString,
                    response_serializer=MeasurementSettingsService__pb2.SetNumberVanes_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MeasurementSettingsService(object):
    """Feature: Measurement Settings Service

    Used to acquire and modify general status and parameters of the flowmeter.
    By Lukas Bromig and Jose de Jesus Pina, Institute of Biochemical Engineering, Technical University of Munich,
    02.12.2020

    """

    @staticmethod
    def GetPistonOperationMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetPistonOperationMode',
            MeasurementSettingsService__pb2.GetPistonOperationMode_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetPistonOperationMode_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPistonOperationMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetPistonOperationMode',
            MeasurementSettingsService__pb2.SetPistonOperationMode_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetPistonOperationMode_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTimeOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetTimeOut',
            MeasurementSettingsService__pb2.GetTimeOut_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetTimeOut_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTimeOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetTimeOut',
            MeasurementSettingsService__pb2.SetTimeOut_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetTimeOut_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetFrequency',
            MeasurementSettingsService__pb2.GetFrequency_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetFrequency_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetFrequency',
            MeasurementSettingsService__pb2.SetFrequency_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetFrequency_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDensityActual(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetDensityActual',
            MeasurementSettingsService__pb2.GetDensityActual_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetDensityActual_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDensityActual(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetDensityActual',
            MeasurementSettingsService__pb2.SetDensityActual_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetDensityActual_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPressureInlet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetPressureInlet',
            MeasurementSettingsService__pb2.GetPressureInlet_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetPressureInlet_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPressureInlet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetPressureInlet',
            MeasurementSettingsService__pb2.SetPressureInlet_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetPressureInlet_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPressureOutlet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetPressureOutlet',
            MeasurementSettingsService__pb2.GetPressureOutlet_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetPressureOutlet_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPressureOutlet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetPressureOutlet',
            MeasurementSettingsService__pb2.SetPressureOutlet_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetPressureOutlet_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFluidTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetFluidTemperature',
            MeasurementSettingsService__pb2.GetFluidTemperature_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetFluidTemperature_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetFluidTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetFluidTemperature',
            MeasurementSettingsService__pb2.SetFluidTemperature_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetFluidTemperature_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetThermalConductivity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetThermalConductivity',
            MeasurementSettingsService__pb2.GetThermalConductivity_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetThermalConductivity_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetThermalConductivity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetThermalConductivity',
            MeasurementSettingsService__pb2.SetThermalConductivity_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetThermalConductivity_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStandardMassFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetStandardMassFlow',
            MeasurementSettingsService__pb2.GetStandardMassFlow_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetStandardMassFlow_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetStandardMassFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetStandardMassFlow',
            MeasurementSettingsService__pb2.SetStandardMassFlow_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetStandardMassFlow_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrificeDiameter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetOrificeDiameter',
            MeasurementSettingsService__pb2.GetOrificeDiameter_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetOrificeDiameter_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetOrificeDiameter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetOrificeDiameter',
            MeasurementSettingsService__pb2.SetOrificeDiameter_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetOrificeDiameter_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBarometerPressure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetBarometerPressure',
            MeasurementSettingsService__pb2.GetBarometerPressure_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetBarometerPressure_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetBarometerPressure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetBarometerPressure',
            MeasurementSettingsService__pb2.SetBarometerPressure_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetBarometerPressure_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNumberVanes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/GetNumberVanes',
            MeasurementSettingsService__pb2.GetNumberVanes_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.GetNumberVanes_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetNumberVanes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.biovt.mw.tum.de.examples.measurementsettingsservice.v1.MeasurementSettingsService/SetNumberVanes',
            MeasurementSettingsService__pb2.SetNumberVanes_Parameters.SerializeToString,
            MeasurementSettingsService__pb2.SetNumberVanes_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
