<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.JavaAccessBridge" type="LIBRARY" format="REST" scope="GLOBAL" generated="2021-12-14T12:49:26Z" specversion="3" source="./RPA/JavaAccessBridge.py" lineno="54">
<version/>
<doc>Java application UI automation library using `Java Access Bridge technology`_.

Library is at the beta level at the moment so feedback is highly appreciated.

The library utilizes `java-access-bridge-wrapper`_ package to interact with
Java UI. Currently only the 64-bit Windows OS is supported.

**Steps to enable**

    1. Enable the Java Access Bridge in Windows
    2. Set environment variable `RC_JAVA_ACCESS_BRIDGE_DLL` as an absolute path to `WindowsAccessBridge-64.dll`.
       It is also possible to give DLL location as library initialization parameter `access_bridge_path`.

    .. code-block:: console

        C:\path\to\java\bin\jabswitch -enable
        set RC_JAVA_ACCESS_BRIDGE_DLL=C:\path\to\Java\bin\WindowsAccessBridge-64.dll

    .. code:: robotframework

        *** Settings ***
        Library   RPA.JavaAccessBridge   access_bridge_path=C:\path\to\Java\bin\WindowsAccessBridge-64.dll

.. _Java Access Bridge technology: https://www.oracle.com/java/technologies/javase/javase-tech-access-bridge.html
.. _java-access-bridge-wrapper: https://github.com/robocorp/java-access-bridge-wrapper

**About Java wrapper callbacks and actions**

There might be a compability issue with callbacks and actions on target Java application. Possible reasons:

- target application is executed with 32-bit Java
- target application does not support callbacks and/or actions

Workaround for this situation is to initialize `JavaAccessBridge` library with parameter `ignore_callbacks=True`.
Then application's element information is still accessible and any actions on those elements can be performed
with `RPA.Desktop` library.

*Note.* There are still keywords, for example. `Call Element Action`, which will cause error if used in this situation.
To be fixed in future release.

.. code:: robotframework

    *** Settings ***
    Library   RPA.JavaAccessBridge   ignore_callbacks=True

**Locating elements**

To automate actions on the Java application, the robot needs locations to various elements
using a feature called `locators`. Locator describes properties of an element.

At the moment library contains basic level support for locators.

The common locator types are `name` and `role`.

To identify element with more than one property `and` can be used, for example:

    .. code-block:: console

        role:push button and name:Clear

To address element within parent element `&gt;` can be used, for example:

    .. code-block:: console

        name:Find Purchase Orders &gt; name:NumberField

Some keywords accept element as an parameter in place of locator.

**Interacting with elements**

By default application elements are interacted with Actions supported by the element.
Most common example is `click` action supported by an button element.

But because application and technology support for the actions might be limited, it is also
possible to opt for interaction elements by their coordinates by giving keyword parameter
``action=False`` if parameter is available.

**Inspecting elements**

Inspecting Java application elements depends on what kind of Java UI framework the application
has been built with.

The `Accessibility Insights for Windows`_ can show element properties if application framework
supports Windows UI Automation (UIA), see more at `using Accessibility Insights`_.

The Google's `Access Bridge Explorer`_ can also be used for inspecting Java application elements.

.. _Accessibility Insights for Windows: https://accessibilityinsights.io/en/downloads/
.. _Access Bridge Explorer: https://github.com/google/access-bridge-explorer
.. _using Accessibility Insights: https://accessibilityinsights.io/docs/en/windows/reference/faq/#can-i-use-accessibility-insights-for-windows-on-a-windows-app-written-with-java

**Examples**

*robotframework*

.. code:: robotframework

    *** Settings ***
    Library   RPA.JavaAccessBridge
    Library   Process

    *** Tasks ***
    Write text into Swing application
        Start Process    java -jar BasicSwing.jar
        ...              shell=${TRUE}
        ...              cwd=${CURDIR}
        Select Window    Chat Frame
        Type Text    role:text
        ...          text for the textarea
        Type Text    role:text
        ...          text for the input field
        ...          index=1
        ...          clear=${TRUE}
        Click Element    role:push button and name:Send

*Python*

.. code:: python

    from RPA.JavaAccessBridge import JavaAccessBridge
    import subprocess

    jab = JavaAccessBridge()

    subprocess.Popen(
        ["java", "-jar", "BasicSwing.jar"],
        shell=True,
        cwd=".",
        close_fds=True
    )
    jab.select_window("Chat Frame")
    jab.type_text(
        "role:text",
        "text for the textarea",
        enter=True
    )
    jab.type_text(
        "role:text",
        "text for the input field",
        index=1,
        clear=True
    )
    jab.click_element("role:push button and name:Send")</doc>
<tags>
</tags>
<inits>
<init name="Init" source="./RPA/JavaAccessBridge.py" lineno="205">
<arguments repr="ignore_callbacks: bool = False, access_bridge_path: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_callbacks: bool = False">
<name>ignore_callbacks</name>
<type>bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="access_bridge_path: str | None = None">
<name>access_bridge_path</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>Initialize self.  See help(type(self)) for accurate signature.</doc>
<shortdoc>Initialize self.  See help(type(self)) for accurate signature.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Application Refresh" source="./RPA/JavaAccessBridge.py" lineno="621">
<arguments repr="">
</arguments>
<doc>Refresh application element tree

Might be required action after application element
structure changes after window refresh.</doc>
<shortdoc>Refresh application element tree</shortdoc>
</kw>
<kw name="Call Element Action" source="./RPA/JavaAccessBridge.py" lineno="579">
<arguments repr="locator: str, action: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="action: str">
<name>action</name>
<type>str</type>
</arg>
</arguments>
<doc>Call element action

:param locator: target element
:param action: name of the element action to call</doc>
<shortdoc>Call element action</shortdoc>
</kw>
<kw name="Click Element" source="./RPA/JavaAccessBridge.py" lineno="536">
<arguments repr="locator: str, index: int = 0, action: bool = True, timeout: int = 10">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="index: int = 0">
<name>index</name>
<type>int</type>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action: bool = True">
<name>action</name>
<type>bool</type>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: int = 10">
<name>timeout</name>
<type>int</type>
<default>10</default>
</arg>
</arguments>
<doc>Click element

:param target: element to click
:param index: target element index if multiple are returned
:param action: call click action on element (default), or use coordinates
:param timeout: timeout in seconds to find element</doc>
<shortdoc>Click element</shortdoc>
</kw>
<kw name="Click Push Button" source="./RPA/JavaAccessBridge.py" lineno="666">
<arguments repr="button_name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="button_name: str">
<name>button_name</name>
<type>str</type>
</arg>
</arguments>
<doc>Click element of role `push button`

:param button_name: name of the button to click</doc>
<shortdoc>Click element of role `push button`</shortdoc>
</kw>
<kw name="Get Element Actions" source="./RPA/JavaAccessBridge.py" lineno="497">
<arguments repr="locator: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
</arguments>
<doc>Get list of possible element actions

:param locator: target element</doc>
<shortdoc>Get list of possible element actions</shortdoc>
</kw>
<kw name="Get Element Text" source="./RPA/JavaAccessBridge.py" lineno="473">
<arguments repr="locator: str, index: int = 0">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="index: int = 0">
<name>index</name>
<type>int</type>
<default>0</default>
</arg>
</arguments>
<doc>Get element text

:param locator: target element
:param index: target element index if multiple are returned</doc>
<shortdoc>Get element text</shortdoc>
</kw>
<kw name="Get Elements" source="./RPA/JavaAccessBridge.py" lineno="404">
<arguments repr="locator: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
</arguments>
<doc>Get matching elements

:param locator: elements to get</doc>
<shortdoc>Get matching elements</shortdoc>
</kw>
<kw name="Get Version Info" source="./RPA/JavaAccessBridge.py" lineno="680">
<arguments repr="">
</arguments>
<doc>Get Java Access Bridge version information</doc>
<shortdoc>Get Java Access Bridge version information</shortdoc>
</kw>
<kw name="Highlight Element" source="./RPA/JavaAccessBridge.py" lineno="511">
<arguments repr="locator: str, index: int = 0">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="index: int = 0">
<name>index</name>
<type>int</type>
<default>0</default>
</arg>
</arguments>
<doc>Highlight an element

:param locator: element to highlight
:param index: target element index if multiple are returned</doc>
<shortdoc>Highlight an element</shortdoc>
</kw>
<kw name="Press Keys" source="./RPA/JavaAccessBridge.py" lineno="630">
<arguments repr="*keys">
<arg kind="VAR_POSITIONAL" required="false" repr="*keys">
<name>keys</name>
</arg>
</arguments>
<doc>Press multiple keys down simultaneously

See `Desktop`_ library documentation for supported keys

.. _Desktop: https://rpaframework.org/libraries/desktop/index.html

:param keys: keys to press</doc>
<shortdoc>Press multiple keys down simultaneously</shortdoc>
</kw>
<kw name="Print Element Tree" source="./RPA/JavaAccessBridge.py" lineno="642">
<arguments repr="filename: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filename: str | None = None">
<name>filename</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>Print current element into log and possibly into a file

:param filename: filepath to save element tree</doc>
<shortdoc>Print current element into log and possibly into a file</shortdoc>
</kw>
<kw name="Select Menu" source="./RPA/JavaAccessBridge.py" lineno="656">
<arguments repr="menu: str, menuitem: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menu: str">
<name>menu</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuitem: str">
<name>menuitem</name>
<type>str</type>
</arg>
</arguments>
<doc>Select menu by clicking menu elements

:param menu: name of the menu
:param menuitem: name of the menu item</doc>
<shortdoc>Select menu by clicking menu elements</shortdoc>
</kw>
<kw name="Select Window" source="./RPA/JavaAccessBridge.py" lineno="267">
<arguments repr="title: str, bring_foreground: bool = True, timeout: int = 30">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="title: str">
<name>title</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="bring_foreground: bool = True">
<name>bring_foreground</name>
<type>bool</type>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: int = 30">
<name>timeout</name>
<type>int</type>
<default>30</default>
</arg>
</arguments>
<doc>Selects Java application window as target for the automation

:param title: application window title
:param bring_foreground: if application is brought to foreground or not
:param timeout: selection timeout</doc>
<shortdoc>Selects Java application window as target for the automation</shortdoc>
</kw>
<kw name="Set Mouse Position" source="./RPA/JavaAccessBridge.py" lineno="352">
<arguments repr="element: object">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element: object">
<name>element</name>
<type>object</type>
</arg>
</arguments>
<doc>Set mouse position to element center

:param element: target element</doc>
<shortdoc>Set mouse position to element center</shortdoc>
</kw>
<kw name="Shutdown Jab" source="./RPA/JavaAccessBridge.py" lineno="675">
<arguments repr="">
</arguments>
<doc>Call Java Access Bridge process shutdown</doc>
<shortdoc>Call Java Access Bridge process shutdown</shortdoc>
</kw>
<kw name="Toggle Drop Down" source="./RPA/JavaAccessBridge.py" lineno="610">
<arguments repr="locator: str, index: int = 0">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="index: int = 0">
<name>index</name>
<type>int</type>
<default>0</default>
</arg>
</arguments>
<doc>Toggle dropdown action on element

:param locator: element locator
:param index: target element index if multiple are returned</doc>
<shortdoc>Toggle dropdown action on element</shortdoc>
</kw>
<kw name="Type Text" source="./RPA/JavaAccessBridge.py" lineno="364">
<arguments repr="locator: str, text: str, index: int = 0, clear: bool = False, enter: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="index: int = 0">
<name>index</name>
<type>int</type>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="clear: bool = False">
<name>clear</name>
<type>bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="enter: bool = False">
<name>enter</name>
<type>bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Type text into coordinates defined by locator

:param locator: target element
:param text: text to write
:param index: target element if multiple are returned
:param clear: should element be cleared before typing
:param enter: should enter key be pressed after typing</doc>
<shortdoc>Type text into coordinates defined by locator</shortdoc>
</kw>
<kw name="Wait Until Element Is Focused" source="./RPA/JavaAccessBridge.py" lineno="454">
<arguments repr="locator: str, index: int = 0, timeout: float = 0.5">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="index: int = 0">
<name>index</name>
<type>int</type>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: float = 0.5">
<name>timeout</name>
<type>float</type>
<default>0.5</default>
</arg>
</arguments>
<doc>Wait until element is focused

:param locator: target element
:param index: target element index if multiple are returned
:param timeout: timeout in seconds to wait, default 0.5 seconds</doc>
<shortdoc>Wait until element is focused</shortdoc>
</kw>
<kw name="Wait Until Element Text Contains" source="./RPA/JavaAccessBridge.py" lineno="412">
<arguments repr="locator: str, text: str, index: int = 0, timeout: float = 0.5">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="index: int = 0">
<name>index</name>
<type>int</type>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: float = 0.5">
<name>timeout</name>
<type>float</type>
<default>0.5</default>
</arg>
</arguments>
<doc>Wait until element text contains expected text

:param locator: target element
:param text: element text should contain this
:param index: target element index if multiple are returned
:param timeout: timeout in seconds to wait, default 0.5 seconds</doc>
<shortdoc>Wait until element text contains expected text</shortdoc>
</kw>
<kw name="Wait Until Element Text Equals" source="./RPA/JavaAccessBridge.py" lineno="433">
<arguments repr="locator: str, text: str, index: int = 0, timeout: float = 0.5">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="index: int = 0">
<name>index</name>
<type>int</type>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: float = 0.5">
<name>timeout</name>
<type>float</type>
<default>0.5</default>
</arg>
</arguments>
<doc>Wait until element text equals expected text

:param locator: target element
:param text: element text should match this
:param index: target element index if multiple are returned
:param timeout: timeout in seconds to wait, default 0.5 seconds</doc>
<shortdoc>Wait until element text equals expected text</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
</keywordspec>
