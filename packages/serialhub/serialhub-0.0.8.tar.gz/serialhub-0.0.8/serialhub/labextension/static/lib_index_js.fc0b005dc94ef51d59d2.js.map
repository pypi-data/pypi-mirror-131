{"version":3,"file":"lib_index_js.fc0b005dc94ef51d59d2.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;AClCuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,QAAQ,oDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,oFAAoF,OAAO;AAC3F,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://serialhub/./lib/handler.js","webpack://serialhub/./lib/index.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'serialhub', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { requestAPI } from './handler';\n/**\n * Initialization data for the serialhub extension.\n */\nconst plugin = {\n    id: 'serialhub:plugin',\n    autoStart: true,\n    optional: [],\n    activate: (app, settingRegistry) => {\n        console.log('JupyterLab extension serialhub is activated!');\n        if (settingRegistry) {\n            settingRegistry\n                .load(plugin.id)\n                .then(settings => {\n                console.log('serialhub settings loaded:', settings.composite);\n            })\n                .catch(reason => {\n                console.error('Failed to load settings for serialhub.', reason);\n            });\n        }\n        requestAPI('get_example')\n            .then(data => {\n            console.log(data);\n        })\n            .catch(reason => {\n            console.error(`The serialhub server extension appears to be missing.\\n${reason}`);\n        });\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}