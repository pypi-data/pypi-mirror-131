{"version":3,"file":"lib_plugin_js.83e522c618a7893f0492.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAC+D;AACrB;AACc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAsB;AACrC;AACA;AACA,GAAG;AACH;AACA;AACA,iEAAe,eAAe,EAAC;AAC/B;AACA;AACA;AACA;AACA;AACA,cAAc,iDAAW;AACzB,iBAAiB,oDAAc;AAC/B,iBAAiB,oCAAa;AAC9B,KAAK;AACL;;;;;;;;;;;;;;;;AClCA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;;;;;;;;;;;;;;;ACbP;AACA;AACO;AACP;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB,eAAe;AAC/D,qDAAqD,mBAAmB;AACxE;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACrGA;AACA;AACsE;AACd;AACxD;AAC2B;AACoB;AACN;AACO;AACzC,6BAA6B,iEAAc;AAClD;AACA,6CAA6C,uBAAuB,8VAA8V;AACla;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAU;AACrC,6CAA6C,EAAE,6EAA0B;AACzE;AACA,8BAA8B,iDAAW;AACzC,sCAAsC,oDAAc;AACpD,4CAA4C;AAC5C,6BAA6B,iDAAW,EAAE;AAC1C,qCAAqC,oDAAc;AAC5C,4BAA4B,gEAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yDAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qEAAyB;AAC/D,kCAAkC,qEAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8DAAkB;AACpC;AACA,8BAA8B,kBAAkB,IAAI;AACpD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0BAA0B,kCAAkC,IAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://serialhub/./lib/plugin.js","webpack://serialhub/./lib/version.js","webpack://serialhub/./lib/webseriallink.js","webpack://serialhub/./lib/widget.js"],"sourcesContent":["// Copyright (c) cdr4eelz\n// Distributed under the terms of the Modified BSD License.\nimport { IJupyterWidgetRegistry } from '@jupyter-widgets/base';\nimport * as widgetExports from './widget';\nimport { MODULE_NAME, MODULE_VERSION } from './version';\nconst EXTENSION_ID = 'serialhub_plugin';\n/*\nnamespace CommandIDs {\n  export const connect = 'serialhub:connect'\n  export const disconnect = 'serialhub:disconnect'\n  export const test = 'serialhub:test'\n}\n*/\n/**\n * The SerialHub plugin.\n */\nconst serialhubPlugin = {\n    id: EXTENSION_ID,\n    requires: [IJupyterWidgetRegistry],\n    activate: activateWidgetExtension,\n    autoStart: true\n}; // as unknown as IPlugin<Application<Widget>, void>;\n// the \"as unknown as ...\" typecast above is solely to support JupyterLab 1\n// and 2 in the same codebase and should be removed when we migrate to Lumino.\nexport default serialhubPlugin;\n/**\n * Activate the widget extension.\n */\nfunction activateWidgetExtension(app, registry) {\n    registry.registerWidget({\n        name: MODULE_NAME,\n        version: MODULE_VERSION,\n        exports: widgetExports,\n    });\n}\n","// Copyright (c) cdr4eelz\n// Distributed under the terms of the Modified BSD License.\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexport const MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexport const MODULE_NAME = data.name;\n","// Copyright (c) cdr4eelz\n// Distributed under the terms of the Modified BSD License.\nexport class SerialHubPort {\n    constructor(oldSP) {\n        if (oldSP)\n            oldSP.disconnect(); //Dispose of prior \"port\" if passed to us\n        this.port = null;\n        this.outputStream = null;\n        this.outputDone = null;\n        //this.inputStream = null;\n        //this.inputDone = null;\n        this.reader = null;\n    }\n    async connect(f) {\n        let NAV = window.navigator;\n        if (!NAV || !NAV.serial)\n            return;\n        if (this.port) {\n            await this.disconnect();\n        }\n        const filter = { usbVendorId: 0x2047 }; // TI proper ; unused 0x0451 for \"TUSB2046 Hub\"\n        let rawPort = await NAV.serial.requestPort({ filters: [filter] });\n        if (!rawPort)\n            return;\n        this.port = rawPort;\n        await this.port.open({ baudRate: 115200 });\n        const encoder = new TextEncoderStream();\n        this.outputDone = encoder.readable.pipeTo(this.port.writable);\n        this.outputStream = encoder.writable;\n        //    let decoder = new TextDecoderStream();\n        //    this.inputDone = this.port.readable.pipeTo(decoder.writable);\n        //    this.inputStream = decoder.readable;\n        //    this.reader = this.inputStream.getReader();\n        this.reader = this.port.readable.getReader();\n        console.log(\"CONNECT: \", this);\n        this.readLoop(f);\n    }\n    async disconnect() {\n        console.log(\"CLOSE: \", this);\n        if (this.reader) {\n            await this.reader.cancel();\n            this.reader = null;\n            //if (this.inputDone) await this.inputDone.catch(() => {});\n            //this.inputDone = null;\n        }\n        if (this.outputStream) {\n            await this.outputStream.getWriter().close();\n            await this.outputDone;\n            this.outputStream = null;\n            this.outputDone = null;\n        }\n        if (this.port) {\n            await this.port.close();\n            this.port = null;\n        }\n    }\n    writeToStream(...lines) {\n        if (!this.outputStream)\n            return;\n        const writer = this.outputStream.getWriter();\n        lines.forEach(line => {\n            console.log(\"[SEND]\", line);\n            writer.write(line + \"\\n\");\n        });\n        writer.releaseLock();\n    }\n    async readLoop(f) {\n        while (true) {\n            if (!this.reader)\n                break;\n            const { value, done } = await this.reader.read();\n            if (value) {\n                console.log(\"[readLoop] VALUE\", value);\n                f(value);\n            }\n            if (done) {\n                console.log(\"[readLoop] DONE\", done);\n                this.reader.releaseLock();\n                break;\n            }\n        }\n    }\n    static isSupported() {\n        let NAV = window.navigator;\n        if (NAV === undefined || NAV === null)\n            return false;\n        let SER = NAV.serial;\n        if (SER === undefined || SER === null)\n            return false;\n        return true;\n    }\n    static test(f) {\n        let W = window;\n        let SER = new SerialHubPort(W.serPort);\n        W.serPort = SER;\n        SER.connect(f).then(() => {\n            console.log(SER);\n            SER.writeToStream(\"1\");\n        });\n        return SER;\n    }\n}\n","// Copyright (c) cdr4eelz\n// Distributed under the terms of the Modified BSD License.\nimport { DOMWidgetModel, DOMWidgetView } from '@jupyter-widgets/base';\nimport { MODULE_NAME, MODULE_VERSION } from './version';\n// Import the CSS\nimport '../css/widget.css';\nimport * as utils from '@jupyter-widgets/base';\nimport { UUID } from '@lumino/coreutils';\nimport { SerialHubPort } from './webseriallink';\nexport class SerialHubModel extends DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: SerialHubModel.model_name, _model_module: SerialHubModel.model_module, _model_module_version: SerialHubModel.model_module_version, _view_name: SerialHubModel.view_name, _view_module: SerialHubModel.view_module, _view_module_version: SerialHubModel.view_module_version, isSupported: false, status: 'Initializing...', value: 'Loading...' });\n    }\n    static get mytempid() {\n        return SerialHubModel._mytempid;\n    }\n}\nSerialHubModel._mytempid = utils.uuid();\nSerialHubModel.serializers = Object.assign({}, DOMWidgetModel.serializers);\nSerialHubModel.model_name = 'SerialHubModel';\nSerialHubModel.model_module = MODULE_NAME;\nSerialHubModel.model_module_version = MODULE_VERSION;\nSerialHubModel.view_name = 'SerialHubView'; // Set to null if no view\nSerialHubModel.view_module = MODULE_NAME; // Set to null if no view\nSerialHubModel.view_module_version = MODULE_VERSION;\nexport class SerialHubView extends DOMWidgetView {\n    constructor() {\n        super(...arguments);\n        this._el_status = null;\n        this._el_value = null;\n    }\n    render() {\n        this.el.id = this.id || UUID.uuid4();\n        this.el.classList.add('xx-serialhub-widget');\n        /* Create a couple sub-Elements for our custom widget */\n        this._el_status = window.document.createElement(\"div\");\n        this._el_status.classList.add('xx-serialhub-status');\n        this._el_value = window.document.createElement(\"pre\");\n        this._el_value.classList.add('xx-serialhub-value');\n        /* Click events wrapped to capture \"this\" object */\n        this._el_status.onclick = (ev) => this.click_status(ev);\n        this._el_value.onclick = (ev) => this.click_value(ev);\n        /* Maybe is more appropriate append() function availablie? */\n        this.$el.append(this._el_status, this._el_value);\n        this.changed_status();\n        this.changed_value();\n        this.model.on('change:status', this.changed_status, this);\n        this.model.on('change:value', this.changed_value, this);\n        this.model.on('msg:custom', this.msg_custom, this);\n        this.model.set('isSupported', SerialHubPort.isSupported());\n        this.model.set('status', (SerialHubPort.isSupported()) ? 'Supported' : 'Unsupported');\n        this.touch();\n        return this;\n    }\n    changed_status() {\n        if (!this._el_status)\n            return;\n        this._el_status.textContent = this.model.get('status');\n    }\n    changed_value() {\n        if (!this._el_value)\n            return;\n        this._el_value.textContent = this.model.get('value');\n    }\n    click_status(ev) {\n        //console.log(this, arguments, this.model);\n        let SHP = SerialHubPort.test((value) => {\n            console.log(value);\n            this.model.send({ 'type': \"binary\" }, {}, [value]);\n        });\n        console.log(\"DONE\", SHP);\n    }\n    click_value(ev) {\n        if (!this || !this.model)\n            return;\n        this.model.send({ 'type': \"text\", 'text': \"DATA\\n\" }, {}, []);\n        window.serPort.writeToStream(\"6\");\n    }\n    msg_custom(mData, mBuffs) {\n        console.log(this, mData, mBuffs);\n        let msgType = mData['type'];\n        if (msgType == 'text') {\n            window.serPort.writeToStream(mData['text']);\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}