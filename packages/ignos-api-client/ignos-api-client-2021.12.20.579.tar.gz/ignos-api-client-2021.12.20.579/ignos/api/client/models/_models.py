# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class AppDto(msrest.serialization.Model):
    """AppDto.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required.
    :vartype id: str
    :ivar key: Required.
    :vartype key: str
    :ivar name: Required.
    :vartype name: str
    :ivar description: Required.
    :vartype description: str
    :ivar private_app: Required.
    :vartype private_app: bool
    """

    _validation = {
        'id': {'required': True},
        'key': {'required': True},
        'name': {'required': True},
        'description': {'required': True},
        'private_app': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'private_app': {'key': 'privateApp', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword key: Required.
        :paramtype key: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description: Required.
        :paramtype description: str
        :keyword private_app: Required.
        :paramtype private_app: bool
        """
        super(AppDto, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.key = kwargs['key']
        self.name = kwargs['name']
        self.description = kwargs['description']
        self.private_app = kwargs['private_app']


class AssetComsumptionDto(msrest.serialization.Model):
    """AssetComsumptionDto.

    :ivar timeseries_id:
    :vartype timeseries_id: long
    :ivar timeseries_name:
    :vartype timeseries_name: str
    :ivar kwh:
    :vartype kwh: float
    :ivar asset_id:
    :vartype asset_id: long
    :ivar asset_name:
    :vartype asset_name: str
    :ivar co2_equivalent:
    :vartype co2_equivalent: float
    """

    _attribute_map = {
        'timeseries_id': {'key': 'timeseriesId', 'type': 'long'},
        'timeseries_name': {'key': 'timeseriesName', 'type': 'str'},
        'kwh': {'key': 'kwh', 'type': 'float'},
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'asset_name': {'key': 'assetName', 'type': 'str'},
        'co2_equivalent': {'key': 'co2Equivalent', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword timeseries_id:
        :paramtype timeseries_id: long
        :keyword timeseries_name:
        :paramtype timeseries_name: str
        :keyword kwh:
        :paramtype kwh: float
        :keyword asset_id:
        :paramtype asset_id: long
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword co2_equivalent:
        :paramtype co2_equivalent: float
        """
        super(AssetComsumptionDto, self).__init__(**kwargs)
        self.timeseries_id = kwargs.get('timeseries_id', None)
        self.timeseries_name = kwargs.get('timeseries_name', None)
        self.kwh = kwargs.get('kwh', None)
        self.asset_id = kwargs.get('asset_id', None)
        self.asset_name = kwargs.get('asset_name', None)
        self.co2_equivalent = kwargs.get('co2_equivalent', None)


class AssetDto(msrest.serialization.Model):
    """AssetDto.

    :ivar external_id:
    :vartype external_id: str
    :ivar name:
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    :ivar aggregates: Anything.
    :vartype aggregates: any
    :ivar parent_id:
    :vartype parent_id: long
    :ivar source:
    :vartype source: str
    :ivar id:
    :vartype id: long
    :ivar created_time:
    :vartype created_time: long
    :ivar last_updated_time:
    :vartype last_updated_time: long
    :ivar root_id:
    :vartype root_id: long
    """

    _attribute_map = {
        'external_id': {'key': 'externalId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'metadata': {'key': 'metadata', 'type': '{str}'},
        'aggregates': {'key': 'aggregates', 'type': 'object'},
        'parent_id': {'key': 'parentId', 'type': 'long'},
        'source': {'key': 'source', 'type': 'str'},
        'id': {'key': 'id', 'type': 'long'},
        'created_time': {'key': 'createdTime', 'type': 'long'},
        'last_updated_time': {'key': 'lastUpdatedTime', 'type': 'long'},
        'root_id': {'key': 'rootId', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword external_id:
        :paramtype external_id: str
        :keyword name:
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        :keyword aggregates: Anything.
        :paramtype aggregates: any
        :keyword parent_id:
        :paramtype parent_id: long
        :keyword source:
        :paramtype source: str
        :keyword id:
        :paramtype id: long
        :keyword created_time:
        :paramtype created_time: long
        :keyword last_updated_time:
        :paramtype last_updated_time: long
        :keyword root_id:
        :paramtype root_id: long
        """
        super(AssetDto, self).__init__(**kwargs)
        self.external_id = kwargs.get('external_id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.metadata = kwargs.get('metadata', None)
        self.aggregates = kwargs.get('aggregates', None)
        self.parent_id = kwargs.get('parent_id', None)
        self.source = kwargs.get('source', None)
        self.id = kwargs.get('id', None)
        self.created_time = kwargs.get('created_time', None)
        self.last_updated_time = kwargs.get('last_updated_time', None)
        self.root_id = kwargs.get('root_id', None)


class AssetDtoPagedResult(msrest.serialization.Model):
    """AssetDtoPagedResult.

    All required parameters must be populated in order to send to Azure.

    :ivar results: Required.
    :vartype results: list[~ignos.api.client.models.AssetDto]
    :ivar continuation_token:
    :vartype continuation_token: str
    """

    _validation = {
        'results': {'required': True},
    }

    _attribute_map = {
        'results': {'key': 'results', 'type': '[AssetDto]'},
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword results: Required.
        :paramtype results: list[~ignos.api.client.models.AssetDto]
        :keyword continuation_token:
        :paramtype continuation_token: str
        """
        super(AssetDtoPagedResult, self).__init__(**kwargs)
        self.results = kwargs['results']
        self.continuation_token = kwargs.get('continuation_token', None)


class AssetPowerDto(msrest.serialization.Model):
    """AssetPowerDto.

    :ivar timeseries_id:
    :vartype timeseries_id: long
    :ivar timeseries_name:
    :vartype timeseries_name: str
    :ivar asset_id:
    :vartype asset_id: long
    :ivar asset_name:
    :vartype asset_name: str
    :ivar time_series_data_points:
    :vartype time_series_data_points: list[~ignos.api.client.models.NumericDataPointDto]
    """

    _attribute_map = {
        'timeseries_id': {'key': 'timeseriesId', 'type': 'long'},
        'timeseries_name': {'key': 'timeseriesName', 'type': 'str'},
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'asset_name': {'key': 'assetName', 'type': 'str'},
        'time_series_data_points': {'key': 'timeSeriesDataPoints', 'type': '[NumericDataPointDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword timeseries_id:
        :paramtype timeseries_id: long
        :keyword timeseries_name:
        :paramtype timeseries_name: str
        :keyword asset_id:
        :paramtype asset_id: long
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword time_series_data_points:
        :paramtype time_series_data_points: list[~ignos.api.client.models.NumericDataPointDto]
        """
        super(AssetPowerDto, self).__init__(**kwargs)
        self.timeseries_id = kwargs.get('timeseries_id', None)
        self.timeseries_name = kwargs.get('timeseries_name', None)
        self.asset_id = kwargs.get('asset_id', None)
        self.asset_name = kwargs.get('asset_name', None)
        self.time_series_data_points = kwargs.get('time_series_data_points', None)


class AssetSimpleStructureDto(msrest.serialization.Model):
    """AssetSimpleStructureDto.

    :ivar external_id:
    :vartype external_id: str
    :ivar name:
    :vartype name: str
    :ivar id:
    :vartype id: long
    """

    _attribute_map = {
        'external_id': {'key': 'externalId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword external_id:
        :paramtype external_id: str
        :keyword name:
        :paramtype name: str
        :keyword id:
        :paramtype id: long
        """
        super(AssetSimpleStructureDto, self).__init__(**kwargs)
        self.external_id = kwargs.get('external_id', None)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)


class AssetStructureDto(msrest.serialization.Model):
    """AssetStructureDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar external_id:
    :vartype external_id: str
    :ivar name:
    :vartype name: str
    :ivar aggregates_display:
    :vartype aggregates_display: str
    :ivar aggregates:
    :vartype aggregates: list[~ignos.api.client.models.AssetSimpleStructureDto]
    :ivar id:
    :vartype id: long
    :ivar created_time:
    :vartype created_time: long
    :ivar last_updated_time:
    :vartype last_updated_time: long
    """

    _validation = {
        'aggregates_display': {'readonly': True},
    }

    _attribute_map = {
        'external_id': {'key': 'externalId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'aggregates_display': {'key': 'aggregatesDisplay', 'type': 'str'},
        'aggregates': {'key': 'aggregates', 'type': '[AssetSimpleStructureDto]'},
        'id': {'key': 'id', 'type': 'long'},
        'created_time': {'key': 'createdTime', 'type': 'long'},
        'last_updated_time': {'key': 'lastUpdatedTime', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword external_id:
        :paramtype external_id: str
        :keyword name:
        :paramtype name: str
        :keyword aggregates:
        :paramtype aggregates: list[~ignos.api.client.models.AssetSimpleStructureDto]
        :keyword id:
        :paramtype id: long
        :keyword created_time:
        :paramtype created_time: long
        :keyword last_updated_time:
        :paramtype last_updated_time: long
        """
        super(AssetStructureDto, self).__init__(**kwargs)
        self.external_id = kwargs.get('external_id', None)
        self.name = kwargs.get('name', None)
        self.aggregates_display = None
        self.aggregates = kwargs.get('aggregates', None)
        self.id = kwargs.get('id', None)
        self.created_time = kwargs.get('created_time', None)
        self.last_updated_time = kwargs.get('last_updated_time', None)


class AzureRegionDto(msrest.serialization.Model):
    """AzureRegionDto.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: Required.
    :vartype display_name: str
    :ivar name: Required.
    :vartype name: str
    :ivar region_display_name: Required.
    :vartype region_display_name: str
    """

    _validation = {
        'display_name': {'required': True},
        'name': {'required': True},
        'region_display_name': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'region_display_name': {'key': 'regionDisplayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword display_name: Required.
        :paramtype display_name: str
        :keyword name: Required.
        :paramtype name: str
        :keyword region_display_name: Required.
        :paramtype region_display_name: str
        """
        super(AzureRegionDto, self).__init__(**kwargs)
        self.display_name = kwargs['display_name']
        self.name = kwargs['name']
        self.region_display_name = kwargs['region_display_name']


class CdfClusterDto(msrest.serialization.Model):
    """CdfClusterDto.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar base_url: Required.
    :vartype base_url: str
    :ivar scope: Required.
    :vartype scope: str
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'base_url': {'required': True},
        'scope': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'base_url': {'key': 'baseUrl', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword base_url: Required.
        :paramtype base_url: str
        :keyword scope: Required.
        :paramtype scope: str
        """
        super(CdfClusterDto, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.name = kwargs['name']
        self.base_url = kwargs['base_url']
        self.scope = kwargs['scope']


class CdfConfigDto(msrest.serialization.Model):
    """CdfConfigDto.

    :ivar tenant_id:
    :vartype tenant_id: str
    :ivar client_id:
    :vartype client_id: str
    :ivar client_secret_exists:
    :vartype client_secret_exists: bool
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret_exists': {'key': 'clientSecretExists', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tenant_id:
        :paramtype tenant_id: str
        :keyword client_id:
        :paramtype client_id: str
        :keyword client_secret_exists:
        :paramtype client_secret_exists: bool
        """
        super(CdfConfigDto, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.client_id = kwargs.get('client_id', None)
        self.client_secret_exists = kwargs.get('client_secret_exists', None)


class ConsumptionDto(msrest.serialization.Model):
    """ConsumptionDto.

    :ivar asset_name:
    :vartype asset_name: str
    :ivar kwh:
    :vartype kwh: float
    :ivar co2_equivalent:
    :vartype co2_equivalent: float
    :ivar items:
    :vartype items: list[~ignos.api.client.models.AssetComsumptionDto]
    """

    _attribute_map = {
        'asset_name': {'key': 'assetName', 'type': 'str'},
        'kwh': {'key': 'kwh', 'type': 'float'},
        'co2_equivalent': {'key': 'co2Equivalent', 'type': 'float'},
        'items': {'key': 'items', 'type': '[AssetComsumptionDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword kwh:
        :paramtype kwh: float
        :keyword co2_equivalent:
        :paramtype co2_equivalent: float
        :keyword items:
        :paramtype items: list[~ignos.api.client.models.AssetComsumptionDto]
        """
        super(ConsumptionDto, self).__init__(**kwargs)
        self.asset_name = kwargs.get('asset_name', None)
        self.kwh = kwargs.get('kwh', None)
        self.co2_equivalent = kwargs.get('co2_equivalent', None)
        self.items = kwargs.get('items', None)


class ContactPersonDto(msrest.serialization.Model):
    """ContactPersonDto.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required.
    :vartype name: str
    :ivar phone: Required.
    :vartype phone: str
    :ivar email: Required.
    :vartype email: str
    """

    _validation = {
        'name': {'required': True},
        'phone': {'required': True},
        'email': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword phone: Required.
        :paramtype phone: str
        :keyword email: Required.
        :paramtype email: str
        """
        super(ContactPersonDto, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.phone = kwargs['phone']
        self.email = kwargs['email']


class CountryDto(msrest.serialization.Model):
    """CountryDto.

    All required parameters must be populated in order to send to Azure.

    :ivar two_letter_iso_region_name: Required.
    :vartype two_letter_iso_region_name: str
    :ivar three_letter_iso_region_name: Required.
    :vartype three_letter_iso_region_name: str
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        'two_letter_iso_region_name': {'required': True},
        'three_letter_iso_region_name': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'two_letter_iso_region_name': {'key': 'twoLetterISORegionName', 'type': 'str'},
        'three_letter_iso_region_name': {'key': 'threeLetterISORegionName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword two_letter_iso_region_name: Required.
        :paramtype two_letter_iso_region_name: str
        :keyword three_letter_iso_region_name: Required.
        :paramtype three_letter_iso_region_name: str
        :keyword name: Required.
        :paramtype name: str
        """
        super(CountryDto, self).__init__(**kwargs)
        self.two_letter_iso_region_name = kwargs['two_letter_iso_region_name']
        self.three_letter_iso_region_name = kwargs['three_letter_iso_region_name']
        self.name = kwargs['name']


class CreateApp(msrest.serialization.Model):
    """CreateApp.

    All required parameters must be populated in order to send to Azure.

    :ivar key: Required.
    :vartype key: str
    :ivar name: Required.
    :vartype name: str
    :ivar description: Required.
    :vartype description: str
    :ivar private_app: Required.
    :vartype private_app: bool
    """

    _validation = {
        'key': {'required': True},
        'name': {'required': True},
        'description': {'required': True},
        'private_app': {'required': True},
    }

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'private_app': {'key': 'privateApp', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key: Required.
        :paramtype key: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description: Required.
        :paramtype description: str
        :keyword private_app: Required.
        :paramtype private_app: bool
        """
        super(CreateApp, self).__init__(**kwargs)
        self.key = kwargs['key']
        self.name = kwargs['name']
        self.description = kwargs['description']
        self.private_app = kwargs['private_app']


class CreateAsset(msrest.serialization.Model):
    """CreateAsset.

    :ivar parent_id:
    :vartype parent_id: long
    """

    _attribute_map = {
        'parent_id': {'key': 'parentId', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword parent_id:
        :paramtype parent_id: long
        """
        super(CreateAsset, self).__init__(**kwargs)
        self.parent_id = kwargs.get('parent_id', None)


class CreateCdfCluster(msrest.serialization.Model):
    """CreateCdfCluster.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required.
    :vartype name: str
    :ivar base_url: Required.
    :vartype base_url: str
    :ivar scope: Required.
    :vartype scope: str
    """

    _validation = {
        'name': {'required': True},
        'base_url': {'required': True},
        'scope': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'base_url': {'key': 'baseUrl', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword base_url: Required.
        :paramtype base_url: str
        :keyword scope: Required.
        :paramtype scope: str
        """
        super(CreateCdfCluster, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.base_url = kwargs['base_url']
        self.scope = kwargs['scope']


class CreateElectricalIotConfig(msrest.serialization.Model):
    """CreateElectricalIotConfig.

    :ivar type_id:
    :vartype type_id: str
    :ivar serial_number:
    :vartype serial_number: str
    :ivar asset_id:
    :vartype asset_id: long
    :ivar asset_external_id:
    :vartype asset_external_id: str
    """

    _attribute_map = {
        'type_id': {'key': 'typeId', 'type': 'str'},
        'serial_number': {'key': 'serialNumber', 'type': 'str'},
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'asset_external_id': {'key': 'assetExternalId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type_id:
        :paramtype type_id: str
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword asset_id:
        :paramtype asset_id: long
        :keyword asset_external_id:
        :paramtype asset_external_id: str
        """
        super(CreateElectricalIotConfig, self).__init__(**kwargs)
        self.type_id = kwargs.get('type_id', None)
        self.serial_number = kwargs.get('serial_number', None)
        self.asset_id = kwargs.get('asset_id', None)
        self.asset_external_id = kwargs.get('asset_external_id', None)


class CreateIgnosCustomer(msrest.serialization.Model):
    """CreateIgnosCustomer.

    All required parameters must be populated in order to send to Azure.

    :ivar short_name: Required.
    :vartype short_name: str
    :ivar name: Required.
    :vartype name: str
    :ivar azure_region_id: Required.
    :vartype azure_region_id: str
    :ivar azure_ad_tenant_id:
    :vartype azure_ad_tenant_id: str
    :ivar contact_person: Required.
    :vartype contact_person: ~ignos.api.client.models.ContactPersonDto
    :ivar external_reference:
    :vartype external_reference: str
    :ivar three_letter_iso_country: Required.
    :vartype three_letter_iso_country: str
    :ivar logo_url:
    :vartype logo_url: str
    :ivar company_url:
    :vartype company_url: str
    :ivar domain:
    :vartype domain: str
    """

    _validation = {
        'short_name': {'required': True},
        'name': {'required': True},
        'azure_region_id': {'required': True},
        'contact_person': {'required': True},
        'three_letter_iso_country': {'required': True},
    }

    _attribute_map = {
        'short_name': {'key': 'shortName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'azure_region_id': {'key': 'azureRegionId', 'type': 'str'},
        'azure_ad_tenant_id': {'key': 'azureAdTenantId', 'type': 'str'},
        'contact_person': {'key': 'contactPerson', 'type': 'ContactPersonDto'},
        'external_reference': {'key': 'externalReference', 'type': 'str'},
        'three_letter_iso_country': {'key': 'threeLetterIsoCountry', 'type': 'str'},
        'logo_url': {'key': 'logoUrl', 'type': 'str'},
        'company_url': {'key': 'companyUrl', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword short_name: Required.
        :paramtype short_name: str
        :keyword name: Required.
        :paramtype name: str
        :keyword azure_region_id: Required.
        :paramtype azure_region_id: str
        :keyword azure_ad_tenant_id:
        :paramtype azure_ad_tenant_id: str
        :keyword contact_person: Required.
        :paramtype contact_person: ~ignos.api.client.models.ContactPersonDto
        :keyword external_reference:
        :paramtype external_reference: str
        :keyword three_letter_iso_country: Required.
        :paramtype three_letter_iso_country: str
        :keyword logo_url:
        :paramtype logo_url: str
        :keyword company_url:
        :paramtype company_url: str
        :keyword domain:
        :paramtype domain: str
        """
        super(CreateIgnosCustomer, self).__init__(**kwargs)
        self.short_name = kwargs['short_name']
        self.name = kwargs['name']
        self.azure_region_id = kwargs['azure_region_id']
        self.azure_ad_tenant_id = kwargs.get('azure_ad_tenant_id', None)
        self.contact_person = kwargs['contact_person']
        self.external_reference = kwargs.get('external_reference', None)
        self.three_letter_iso_country = kwargs['three_letter_iso_country']
        self.logo_url = kwargs.get('logo_url', None)
        self.company_url = kwargs.get('company_url', None)
        self.domain = kwargs.get('domain', None)


class CreatePowerRegion(msrest.serialization.Model):
    """CreatePowerRegion.

    All required parameters must be populated in order to send to Azure.

    :ivar country: Required.
    :vartype country: str
    :ivar region: Required.
    :vartype region: str
    :ivar description: Required.
    :vartype description: str
    :ivar initial_co2_per_kwh_date:
    :vartype initial_co2_per_kwh_date: ~datetime.datetime
    :ivar co2_per_kwh:
    :vartype co2_per_kwh: int
    """

    _validation = {
        'country': {'required': True},
        'region': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'country': {'key': 'country', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'initial_co2_per_kwh_date': {'key': 'initialCo2PerKwhDate', 'type': 'iso-8601'},
        'co2_per_kwh': {'key': 'co2PerKwh', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword country: Required.
        :paramtype country: str
        :keyword region: Required.
        :paramtype region: str
        :keyword description: Required.
        :paramtype description: str
        :keyword initial_co2_per_kwh_date:
        :paramtype initial_co2_per_kwh_date: ~datetime.datetime
        :keyword co2_per_kwh:
        :paramtype co2_per_kwh: int
        """
        super(CreatePowerRegion, self).__init__(**kwargs)
        self.country = kwargs['country']
        self.region = kwargs['region']
        self.description = kwargs['description']
        self.initial_co2_per_kwh_date = kwargs.get('initial_co2_per_kwh_date', None)
        self.co2_per_kwh = kwargs.get('co2_per_kwh', None)


class CreateTenantRequest(msrest.serialization.Model):
    """CreateTenantRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar description:
    :vartype description: str
    :ivar azure_region_id: Required.
    :vartype azure_region_id: str
    :ivar contact_person:
    :vartype contact_person: ~ignos.api.client.models.ContactPersonDto
    :ivar environment: Required. Possible values include: "Prod", "QA", "Test", "Dev".
    :vartype environment: str or ~ignos.api.client.models.TenantEnvironment
    :ivar cdf_tenant:
    :vartype cdf_tenant: str
    :ivar cdf_cluster_id: Required.
    :vartype cdf_cluster_id: str
    """

    _validation = {
        'azure_region_id': {'required': True},
        'environment': {'required': True},
        'cdf_cluster_id': {'required': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'azure_region_id': {'key': 'azureRegionId', 'type': 'str'},
        'contact_person': {'key': 'contactPerson', 'type': 'ContactPersonDto'},
        'environment': {'key': 'environment', 'type': 'str'},
        'cdf_tenant': {'key': 'cdfTenant', 'type': 'str'},
        'cdf_cluster_id': {'key': 'cdfClusterId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword description:
        :paramtype description: str
        :keyword azure_region_id: Required.
        :paramtype azure_region_id: str
        :keyword contact_person:
        :paramtype contact_person: ~ignos.api.client.models.ContactPersonDto
        :keyword environment: Required. Possible values include: "Prod", "QA", "Test", "Dev".
        :paramtype environment: str or ~ignos.api.client.models.TenantEnvironment
        :keyword cdf_tenant:
        :paramtype cdf_tenant: str
        :keyword cdf_cluster_id: Required.
        :paramtype cdf_cluster_id: str
        """
        super(CreateTenantRequest, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.azure_region_id = kwargs['azure_region_id']
        self.contact_person = kwargs.get('contact_person', None)
        self.environment = kwargs['environment']
        self.cdf_tenant = kwargs.get('cdf_tenant', None)
        self.cdf_cluster_id = kwargs['cdf_cluster_id']


class CustomerAppDto(msrest.serialization.Model):
    """CustomerAppDto.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required.
    :vartype id: str
    :ivar key: Required.
    :vartype key: str
    :ivar name: Required.
    :vartype name: str
    :ivar description: Required.
    :vartype description: str
    :ivar private_app: Required.
    :vartype private_app: bool
    """

    _validation = {
        'id': {'required': True},
        'key': {'required': True},
        'name': {'required': True},
        'description': {'required': True},
        'private_app': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'private_app': {'key': 'privateApp', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword key: Required.
        :paramtype key: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description: Required.
        :paramtype description: str
        :keyword private_app: Required.
        :paramtype private_app: bool
        """
        super(CustomerAppDto, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.key = kwargs['key']
        self.name = kwargs['name']
        self.description = kwargs['description']
        self.private_app = kwargs['private_app']


class CustomerDto(msrest.serialization.Model):
    """CustomerDto.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar group_id:
    :vartype group_id: str
    :ivar group_name:
    :vartype group_name: str
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'group_name': {'key': 'groupName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword group_id:
        :paramtype group_id: str
        :keyword group_name:
        :paramtype group_name: str
        """
        super(CustomerDto, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.name = kwargs['name']
        self.group_id = kwargs.get('group_id', None)
        self.group_name = kwargs.get('group_name', None)


class CustomerOrderConsumptionRequest(msrest.serialization.Model):
    """CustomerOrderConsumptionRequest.

    :ivar customer_order_lines:
    :vartype customer_order_lines: list[int]
    """

    _attribute_map = {
        'customer_order_lines': {'key': 'customerOrderLines', 'type': '[int]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword customer_order_lines:
        :paramtype customer_order_lines: list[int]
        """
        super(CustomerOrderConsumptionRequest, self).__init__(**kwargs)
        self.customer_order_lines = kwargs.get('customer_order_lines', None)


class CustomerOrderInfoDto(msrest.serialization.Model):
    """CustomerOrderInfoDto.

    :ivar id:
    :vartype id: str
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        """
        super(CustomerOrderInfoDto, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.customer_id = kwargs.get('customer_id', None)
        self.customer_name = kwargs.get('customer_name', None)


class CustomerOrderLineDto(msrest.serialization.Model):
    """CustomerOrderLineDto.

    All required parameters must be populated in order to send to Azure.

    :ivar line: Required.
    :vartype line: int
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar remaining_quantity: Required.
    :vartype remaining_quantity: float
    :ivar delivered_quantity: Required.
    :vartype delivered_quantity: float
    :ivar unit: Required.
    :vartype unit: str
    :ivar status: Required. Possible values include: "Draft", "Ready", "Ongoing", "Completed",
     "Deleted".
    :vartype status: str or ~ignos.api.client.models.CustomerOrderLineStatus
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar delivery_date:
    :vartype delivery_date: ~datetime.datetime
    :ivar workorder_hiearchy: Required.
    :vartype workorder_hiearchy: list[~ignos.api.client.models.WorkorderHierarchyDto]
    """

    _validation = {
        'line': {'required': True},
        'quantity': {'required': True},
        'remaining_quantity': {'required': True},
        'delivered_quantity': {'required': True},
        'unit': {'required': True},
        'status': {'required': True},
        'part': {'required': True},
        'workorder_hiearchy': {'required': True},
    }

    _attribute_map = {
        'line': {'key': 'line', 'type': 'int'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'remaining_quantity': {'key': 'remainingQuantity', 'type': 'float'},
        'delivered_quantity': {'key': 'deliveredQuantity', 'type': 'float'},
        'unit': {'key': 'unit', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'part': {'key': 'part', 'type': 'PartDto'},
        'delivery_date': {'key': 'deliveryDate', 'type': 'iso-8601'},
        'workorder_hiearchy': {'key': 'workorderHiearchy', 'type': '[WorkorderHierarchyDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword line: Required.
        :paramtype line: int
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword remaining_quantity: Required.
        :paramtype remaining_quantity: float
        :keyword delivered_quantity: Required.
        :paramtype delivered_quantity: float
        :keyword unit: Required.
        :paramtype unit: str
        :keyword status: Required. Possible values include: "Draft", "Ready", "Ongoing", "Completed",
         "Deleted".
        :paramtype status: str or ~ignos.api.client.models.CustomerOrderLineStatus
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword delivery_date:
        :paramtype delivery_date: ~datetime.datetime
        :keyword workorder_hiearchy: Required.
        :paramtype workorder_hiearchy: list[~ignos.api.client.models.WorkorderHierarchyDto]
        """
        super(CustomerOrderLineDto, self).__init__(**kwargs)
        self.line = kwargs['line']
        self.quantity = kwargs['quantity']
        self.remaining_quantity = kwargs['remaining_quantity']
        self.delivered_quantity = kwargs['delivered_quantity']
        self.unit = kwargs['unit']
        self.status = kwargs['status']
        self.part = kwargs['part']
        self.delivery_date = kwargs.get('delivery_date', None)
        self.workorder_hiearchy = kwargs['workorder_hiearchy']


class ElectricalIotConfigDto(msrest.serialization.Model):
    """ElectricalIotConfigDto.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required.
    :vartype id: str
    :ivar type_id: Required.
    :vartype type_id: str
    :ivar serial_number:
    :vartype serial_number: str
    :ivar asset_id: Required.
    :vartype asset_id: long
    :ivar asset_external_id:
    :vartype asset_external_id: str
    :ivar phases:
    :vartype phases: int
    :ivar electrical_asset_id:
    :vartype electrical_asset_id: long
    :ivar electrical_asset_external_id:
    :vartype electrical_asset_external_id: str
    :ivar electrical_timeseries_id:
    :vartype electrical_timeseries_id: long
    :ivar electrical_timeseries_external_id:
    :vartype electrical_timeseries_external_id: str
    """

    _validation = {
        'id': {'required': True},
        'type_id': {'required': True},
        'asset_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type_id': {'key': 'typeId', 'type': 'str'},
        'serial_number': {'key': 'serialNumber', 'type': 'str'},
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'asset_external_id': {'key': 'assetExternalId', 'type': 'str'},
        'phases': {'key': 'phases', 'type': 'int'},
        'electrical_asset_id': {'key': 'electricalAssetId', 'type': 'long'},
        'electrical_asset_external_id': {'key': 'electricalAssetExternalId', 'type': 'str'},
        'electrical_timeseries_id': {'key': 'electricalTimeseriesId', 'type': 'long'},
        'electrical_timeseries_external_id': {'key': 'electricalTimeseriesExternalId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword type_id: Required.
        :paramtype type_id: str
        :keyword serial_number:
        :paramtype serial_number: str
        :keyword asset_id: Required.
        :paramtype asset_id: long
        :keyword asset_external_id:
        :paramtype asset_external_id: str
        :keyword phases:
        :paramtype phases: int
        :keyword electrical_asset_id:
        :paramtype electrical_asset_id: long
        :keyword electrical_asset_external_id:
        :paramtype electrical_asset_external_id: str
        :keyword electrical_timeseries_id:
        :paramtype electrical_timeseries_id: long
        :keyword electrical_timeseries_external_id:
        :paramtype electrical_timeseries_external_id: str
        """
        super(ElectricalIotConfigDto, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.type_id = kwargs['type_id']
        self.serial_number = kwargs.get('serial_number', None)
        self.asset_id = kwargs['asset_id']
        self.asset_external_id = kwargs.get('asset_external_id', None)
        self.phases = kwargs.get('phases', None)
        self.electrical_asset_id = kwargs.get('electrical_asset_id', None)
        self.electrical_asset_external_id = kwargs.get('electrical_asset_external_id', None)
        self.electrical_timeseries_id = kwargs.get('electrical_timeseries_id', None)
        self.electrical_timeseries_external_id = kwargs.get('electrical_timeseries_external_id', None)


class EmployeeDto(msrest.serialization.Model):
    """EmployeeDto.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        """
        super(EmployeeDto, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)


class GetConsumption(msrest.serialization.Model):
    """GetConsumption.

    :ivar asset_id:
    :vartype asset_id: long
    :ivar start:
    :vartype start: ~datetime.datetime
    :ivar end:
    :vartype end: ~datetime.datetime
    """

    _attribute_map = {
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'start': {'key': 'start', 'type': 'iso-8601'},
        'end': {'key': 'end', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asset_id:
        :paramtype asset_id: long
        :keyword start:
        :paramtype start: ~datetime.datetime
        :keyword end:
        :paramtype end: ~datetime.datetime
        """
        super(GetConsumption, self).__init__(**kwargs)
        self.asset_id = kwargs.get('asset_id', None)
        self.start = kwargs.get('start', None)
        self.end = kwargs.get('end', None)


class GetConsumptionAutoGranularity(msrest.serialization.Model):
    """GetConsumptionAutoGranularity.

    :ivar asset_id:
    :vartype asset_id: long
    :ivar start:
    :vartype start: ~datetime.datetime
    :ivar end:
    :vartype end: ~datetime.datetime
    """

    _attribute_map = {
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'start': {'key': 'start', 'type': 'iso-8601'},
        'end': {'key': 'end', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asset_id:
        :paramtype asset_id: long
        :keyword start:
        :paramtype start: ~datetime.datetime
        :keyword end:
        :paramtype end: ~datetime.datetime
        """
        super(GetConsumptionAutoGranularity, self).__init__(**kwargs)
        self.asset_id = kwargs.get('asset_id', None)
        self.start = kwargs.get('start', None)
        self.end = kwargs.get('end', None)


class GetPower(msrest.serialization.Model):
    """GetPower.

    All required parameters must be populated in order to send to Azure.

    :ivar asset_id: Required.
    :vartype asset_id: long
    :ivar granularity:
    :vartype granularity: str
    :ivar start:
    :vartype start: ~datetime.datetime
    :ivar end:
    :vartype end: ~datetime.datetime
    """

    _validation = {
        'asset_id': {'required': True},
    }

    _attribute_map = {
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'granularity': {'key': 'granularity', 'type': 'str'},
        'start': {'key': 'start', 'type': 'iso-8601'},
        'end': {'key': 'end', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asset_id: Required.
        :paramtype asset_id: long
        :keyword granularity:
        :paramtype granularity: str
        :keyword start:
        :paramtype start: ~datetime.datetime
        :keyword end:
        :paramtype end: ~datetime.datetime
        """
        super(GetPower, self).__init__(**kwargs)
        self.asset_id = kwargs['asset_id']
        self.granularity = kwargs.get('granularity', None)
        self.start = kwargs.get('start', None)
        self.end = kwargs.get('end', None)


class GranluarConsumptionDto(msrest.serialization.Model):
    """GranluarConsumptionDto.

    :ivar asset_id:
    :vartype asset_id: long
    :ivar asset_name:
    :vartype asset_name: str
    :ivar granularity:
    :vartype granularity: str
    :ivar consumption:
    :vartype consumption: list[~ignos.api.client.models.SubConsumptionDto]
    """

    _attribute_map = {
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'asset_name': {'key': 'assetName', 'type': 'str'},
        'granularity': {'key': 'granularity', 'type': 'str'},
        'consumption': {'key': 'consumption', 'type': '[SubConsumptionDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asset_id:
        :paramtype asset_id: long
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword granularity:
        :paramtype granularity: str
        :keyword consumption:
        :paramtype consumption: list[~ignos.api.client.models.SubConsumptionDto]
        """
        super(GranluarConsumptionDto, self).__init__(**kwargs)
        self.asset_id = kwargs.get('asset_id', None)
        self.asset_name = kwargs.get('asset_name', None)
        self.granularity = kwargs.get('granularity', None)
        self.consumption = kwargs.get('consumption', None)


class IgnosCustomerDto(msrest.serialization.Model):
    """IgnosCustomerDto.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required.
    :vartype id: str
    :ivar short_name: Required.
    :vartype short_name: str
    :ivar name: Required.
    :vartype name: str
    :ivar azure_region_id: Required.
    :vartype azure_region_id: str
    :ivar azure_region_name: Required.
    :vartype azure_region_name: str
    :ivar azure_ad_tenant_id:
    :vartype azure_ad_tenant_id: str
    :ivar contact_person: Required.
    :vartype contact_person: ~ignos.api.client.models.ContactPersonDto
    :ivar number_of_tenants: Required.
    :vartype number_of_tenants: int
    :ivar external_reference:
    :vartype external_reference: str
    :ivar status: Required. Possible values include: "Draft", "Active", "Deactivated".
    :vartype status: str or ~ignos.api.client.models.CustomerStatusDto
    :ivar three_letter_iso_country: Required.
    :vartype three_letter_iso_country: str
    :ivar country: Required.
    :vartype country: str
    :ivar logo_url:
    :vartype logo_url: str
    :ivar company_url:
    :vartype company_url: str
    :ivar domain:
    :vartype domain: str
    """

    _validation = {
        'id': {'required': True},
        'short_name': {'required': True},
        'name': {'required': True},
        'azure_region_id': {'required': True},
        'azure_region_name': {'required': True},
        'contact_person': {'required': True},
        'number_of_tenants': {'required': True},
        'status': {'required': True},
        'three_letter_iso_country': {'required': True},
        'country': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'short_name': {'key': 'shortName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'azure_region_id': {'key': 'azureRegionId', 'type': 'str'},
        'azure_region_name': {'key': 'azureRegionName', 'type': 'str'},
        'azure_ad_tenant_id': {'key': 'azureAdTenantId', 'type': 'str'},
        'contact_person': {'key': 'contactPerson', 'type': 'ContactPersonDto'},
        'number_of_tenants': {'key': 'numberOfTenants', 'type': 'int'},
        'external_reference': {'key': 'externalReference', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'three_letter_iso_country': {'key': 'threeLetterIsoCountry', 'type': 'str'},
        'country': {'key': 'country', 'type': 'str'},
        'logo_url': {'key': 'logoUrl', 'type': 'str'},
        'company_url': {'key': 'companyUrl', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword short_name: Required.
        :paramtype short_name: str
        :keyword name: Required.
        :paramtype name: str
        :keyword azure_region_id: Required.
        :paramtype azure_region_id: str
        :keyword azure_region_name: Required.
        :paramtype azure_region_name: str
        :keyword azure_ad_tenant_id:
        :paramtype azure_ad_tenant_id: str
        :keyword contact_person: Required.
        :paramtype contact_person: ~ignos.api.client.models.ContactPersonDto
        :keyword number_of_tenants: Required.
        :paramtype number_of_tenants: int
        :keyword external_reference:
        :paramtype external_reference: str
        :keyword status: Required. Possible values include: "Draft", "Active", "Deactivated".
        :paramtype status: str or ~ignos.api.client.models.CustomerStatusDto
        :keyword three_letter_iso_country: Required.
        :paramtype three_letter_iso_country: str
        :keyword country: Required.
        :paramtype country: str
        :keyword logo_url:
        :paramtype logo_url: str
        :keyword company_url:
        :paramtype company_url: str
        :keyword domain:
        :paramtype domain: str
        """
        super(IgnosCustomerDto, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.short_name = kwargs['short_name']
        self.name = kwargs['name']
        self.azure_region_id = kwargs['azure_region_id']
        self.azure_region_name = kwargs['azure_region_name']
        self.azure_ad_tenant_id = kwargs.get('azure_ad_tenant_id', None)
        self.contact_person = kwargs['contact_person']
        self.number_of_tenants = kwargs['number_of_tenants']
        self.external_reference = kwargs.get('external_reference', None)
        self.status = kwargs['status']
        self.three_letter_iso_country = kwargs['three_letter_iso_country']
        self.country = kwargs['country']
        self.logo_url = kwargs.get('logo_url', None)
        self.company_url = kwargs.get('company_url', None)
        self.domain = kwargs.get('domain', None)


class IIdentity(msrest.serialization.Model):
    """IIdentity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name:
    :vartype name: str
    :ivar authentication_type:
    :vartype authentication_type: str
    :ivar is_authenticated:
    :vartype is_authenticated: bool
    """

    _validation = {
        'name': {'readonly': True},
        'authentication_type': {'readonly': True},
        'is_authenticated': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'is_authenticated': {'key': 'isAuthenticated', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(IIdentity, self).__init__(**kwargs)
        self.name = None
        self.authentication_type = None
        self.is_authenticated = None


class IotTypeSourceDto(msrest.serialization.Model):
    """IotTypeSourceDto.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        """
        super(IotTypeSourceDto, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.name = kwargs['name']


class MachineAlarmDetailsDto(msrest.serialization.Model):
    """MachineAlarmDetailsDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id:
    :vartype id: long
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    :ivar native_code:
    :vartype native_code: str
    :ivar native_severity:
    :vartype native_severity: int
    :ivar description:
    :vartype description: str
    :ivar name:
    :vartype name: str
    :ivar type:
    :vartype type: str
    :ivar timeseries_groups:
    :vartype timeseries_groups: list[~ignos.api.client.models.MachineAlarmTimeseriesGroupDto]
    """

    _validation = {
        'id': {'readonly': True},
        'start_time': {'readonly': True},
        'native_code': {'readonly': True},
        'native_severity': {'readonly': True},
        'description': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'long'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'native_code': {'key': 'nativeCode', 'type': 'str'},
        'native_severity': {'key': 'nativeSeverity', 'type': 'int'},
        'description': {'key': 'description', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'timeseries_groups': {'key': 'timeseriesGroups', 'type': '[MachineAlarmTimeseriesGroupDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type:
        :paramtype type: str
        :keyword timeseries_groups:
        :paramtype timeseries_groups: list[~ignos.api.client.models.MachineAlarmTimeseriesGroupDto]
        """
        super(MachineAlarmDetailsDto, self).__init__(**kwargs)
        self.id = None
        self.start_time = None
        self.native_code = None
        self.native_severity = None
        self.description = None
        self.name = None
        self.type = kwargs.get('type', None)
        self.timeseries_groups = kwargs.get('timeseries_groups', None)


class MachineAlarmDto(msrest.serialization.Model):
    """MachineAlarmDto.

    All required parameters must be populated in order to send to Azure.

    :ivar alarm_type: Required. Possible values include: "Fault", "Warning".
    :vartype alarm_type: str or ~ignos.api.client.models.MachineAlarmType
    :ivar id: Required.
    :vartype id: long
    :ivar type: Required.
    :vartype type: str
    :ivar sub_type: Required.
    :vartype sub_type: str
    :ivar description:
    :vartype description: str
    :ivar native_code: Required.
    :vartype native_code: str
    :ivar native_severity:
    :vartype native_severity: int
    :ivar name:
    :vartype name: str
    :ivar sequence:
    :vartype sequence: str
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    :ivar end_time:
    :vartype end_time: ~datetime.datetime
    """

    _validation = {
        'alarm_type': {'required': True},
        'id': {'required': True},
        'type': {'required': True},
        'sub_type': {'required': True},
        'native_code': {'required': True},
    }

    _attribute_map = {
        'alarm_type': {'key': 'alarmType', 'type': 'str'},
        'id': {'key': 'id', 'type': 'long'},
        'type': {'key': 'type', 'type': 'str'},
        'sub_type': {'key': 'subType', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'native_code': {'key': 'nativeCode', 'type': 'str'},
        'native_severity': {'key': 'nativeSeverity', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'sequence': {'key': 'sequence', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword alarm_type: Required. Possible values include: "Fault", "Warning".
        :paramtype alarm_type: str or ~ignos.api.client.models.MachineAlarmType
        :keyword id: Required.
        :paramtype id: long
        :keyword type: Required.
        :paramtype type: str
        :keyword sub_type: Required.
        :paramtype sub_type: str
        :keyword description:
        :paramtype description: str
        :keyword native_code: Required.
        :paramtype native_code: str
        :keyword native_severity:
        :paramtype native_severity: int
        :keyword name:
        :paramtype name: str
        :keyword sequence:
        :paramtype sequence: str
        :keyword start_time:
        :paramtype start_time: ~datetime.datetime
        :keyword end_time:
        :paramtype end_time: ~datetime.datetime
        """
        super(MachineAlarmDto, self).__init__(**kwargs)
        self.alarm_type = kwargs['alarm_type']
        self.id = kwargs['id']
        self.type = kwargs['type']
        self.sub_type = kwargs['sub_type']
        self.description = kwargs.get('description', None)
        self.native_code = kwargs['native_code']
        self.native_severity = kwargs.get('native_severity', None)
        self.name = kwargs.get('name', None)
        self.sequence = kwargs.get('sequence', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)


class MachineAlarmSeverityOccurenceDto(msrest.serialization.Model):
    """MachineAlarmSeverityOccurenceDto.

    All required parameters must be populated in order to send to Azure.

    :ivar native_severity: Required.
    :vartype native_severity: int
    :ivar quantity: Required.
    :vartype quantity: int
    :ivar alarm_type: Required. Possible values include: "Fault", "Warning".
    :vartype alarm_type: str or ~ignos.api.client.models.MachineAlarmType
    """

    _validation = {
        'native_severity': {'required': True},
        'quantity': {'required': True},
        'alarm_type': {'required': True},
    }

    _attribute_map = {
        'native_severity': {'key': 'nativeSeverity', 'type': 'int'},
        'quantity': {'key': 'quantity', 'type': 'int'},
        'alarm_type': {'key': 'alarmType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword native_severity: Required.
        :paramtype native_severity: int
        :keyword quantity: Required.
        :paramtype quantity: int
        :keyword alarm_type: Required. Possible values include: "Fault", "Warning".
        :paramtype alarm_type: str or ~ignos.api.client.models.MachineAlarmType
        """
        super(MachineAlarmSeverityOccurenceDto, self).__init__(**kwargs)
        self.native_severity = kwargs['native_severity']
        self.quantity = kwargs['quantity']
        self.alarm_type = kwargs['alarm_type']


class MachineAlarmSummaryDto(msrest.serialization.Model):
    """MachineAlarmSummaryDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar asset_id: Required.
    :vartype asset_id: long
    :ivar asset_name: Required.
    :vartype asset_name: str
    :ivar asset_external_id:
    :vartype asset_external_id: str
    :ivar warning_duration: Required.
    :vartype warning_duration: int
    :ivar warning_quantity: Required.
    :vartype warning_quantity: int
    :ivar warning_quantity_open: Required.
    :vartype warning_quantity_open: int
    :ivar fault_duration: Required.
    :vartype fault_duration: int
    :ivar fault_quantity: Required.
    :vartype fault_quantity: int
    :ivar fault_quantity_open: Required.
    :vartype fault_quantity_open: int
    """

    _validation = {
        'asset_id': {'required': True, 'readonly': True},
        'asset_name': {'required': True, 'readonly': True},
        'asset_external_id': {'readonly': True},
        'warning_duration': {'required': True, 'readonly': True},
        'warning_quantity': {'required': True, 'readonly': True},
        'warning_quantity_open': {'required': True, 'readonly': True},
        'fault_duration': {'required': True, 'readonly': True},
        'fault_quantity': {'required': True, 'readonly': True},
        'fault_quantity_open': {'required': True, 'readonly': True},
    }

    _attribute_map = {
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'asset_name': {'key': 'assetName', 'type': 'str'},
        'asset_external_id': {'key': 'assetExternalId', 'type': 'str'},
        'warning_duration': {'key': 'warningDuration', 'type': 'int'},
        'warning_quantity': {'key': 'warningQuantity', 'type': 'int'},
        'warning_quantity_open': {'key': 'warningQuantityOpen', 'type': 'int'},
        'fault_duration': {'key': 'faultDuration', 'type': 'int'},
        'fault_quantity': {'key': 'faultQuantity', 'type': 'int'},
        'fault_quantity_open': {'key': 'faultQuantityOpen', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(MachineAlarmSummaryDto, self).__init__(**kwargs)
        self.asset_id = None
        self.asset_name = None
        self.asset_external_id = None
        self.warning_duration = None
        self.warning_quantity = None
        self.warning_quantity_open = None
        self.fault_duration = None
        self.fault_quantity = None
        self.fault_quantity_open = None


class MachineAlarmTimeserieDto(msrest.serialization.Model):
    """MachineAlarmTimeserieDto.

    :ivar label:
    :vartype label: str
    :ivar unit:
    :vartype unit: str
    :ivar data_points:
    :vartype data_points: list[~ignos.api.client.models.NumericDataPointDto]
    """

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'data_points': {'key': 'dataPoints', 'type': '[NumericDataPointDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword label:
        :paramtype label: str
        :keyword unit:
        :paramtype unit: str
        :keyword data_points:
        :paramtype data_points: list[~ignos.api.client.models.NumericDataPointDto]
        """
        super(MachineAlarmTimeserieDto, self).__init__(**kwargs)
        self.label = kwargs.get('label', None)
        self.unit = kwargs.get('unit', None)
        self.data_points = kwargs.get('data_points', None)


class MachineAlarmTimeseriesGroupDto(msrest.serialization.Model):
    """MachineAlarmTimeseriesGroupDto.

    All required parameters must be populated in order to send to Azure.

    :ivar title: Required.
    :vartype title: str
    :ivar timeseries:
    :vartype timeseries: list[~ignos.api.client.models.MachineAlarmTimeserieDto]
    """

    _validation = {
        'title': {'required': True},
    }

    _attribute_map = {
        'title': {'key': 'title', 'type': 'str'},
        'timeseries': {'key': 'timeseries', 'type': '[MachineAlarmTimeserieDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword title: Required.
        :paramtype title: str
        :keyword timeseries:
        :paramtype timeseries: list[~ignos.api.client.models.MachineAlarmTimeserieDto]
        """
        super(MachineAlarmTimeseriesGroupDto, self).__init__(**kwargs)
        self.title = kwargs['title']
        self.timeseries = kwargs.get('timeseries', None)


class MachineUtilizationDto(msrest.serialization.Model):
    """MachineUtilizationDto.

    All required parameters must be populated in order to send to Azure.

    :ivar asset_id: Required.
    :vartype asset_id: long
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    :ivar state: Required.
    :vartype state: str
    :ivar machine_state: Required. Possible values include: "InCycle", "MasterCam", "MdiCycle",
     "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode", "ManualMode",
     "EStop", "Alarm", "PowerOff".
    :vartype machine_state: str or ~ignos.api.client.models.MachineState
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    :ivar workorder:
    :vartype workorder: ~ignos.api.client.models.UtilizationWorkorderDto
    """

    _validation = {
        'asset_id': {'required': True},
        'name': {'required': True},
        'state': {'required': True},
        'machine_state': {'required': True},
    }

    _attribute_map = {
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'machine_state': {'key': 'machineState', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'workorder': {'key': 'workorder', 'type': 'UtilizationWorkorderDto'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asset_id: Required.
        :paramtype asset_id: long
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        :keyword state: Required.
        :paramtype state: str
        :keyword machine_state: Required. Possible values include: "InCycle", "MasterCam", "MdiCycle",
         "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode", "ManualMode",
         "EStop", "Alarm", "PowerOff".
        :paramtype machine_state: str or ~ignos.api.client.models.MachineState
        :keyword start_time:
        :paramtype start_time: ~datetime.datetime
        :keyword workorder:
        :paramtype workorder: ~ignos.api.client.models.UtilizationWorkorderDto
        """
        super(MachineUtilizationDto, self).__init__(**kwargs)
        self.asset_id = kwargs['asset_id']
        self.name = kwargs['name']
        self.description = kwargs.get('description', None)
        self.state = kwargs['state']
        self.machine_state = kwargs['machine_state']
        self.start_time = kwargs.get('start_time', None)
        self.workorder = kwargs.get('workorder', None)


class NumericDataPointDto(msrest.serialization.Model):
    """NumericDataPointDto.

    :ivar timestamp:
    :vartype timestamp: long
    :ivar value:
    :vartype value: float
    :ivar average:
    :vartype average: float
    :ivar min:
    :vartype min: float
    :ivar max:
    :vartype max: float
    """

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'long'},
        'value': {'key': 'value', 'type': 'float'},
        'average': {'key': 'average', 'type': 'float'},
        'min': {'key': 'min', 'type': 'float'},
        'max': {'key': 'max', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword timestamp:
        :paramtype timestamp: long
        :keyword value:
        :paramtype value: float
        :keyword average:
        :paramtype average: float
        :keyword min:
        :paramtype min: float
        :keyword max:
        :paramtype max: float
        """
        super(NumericDataPointDto, self).__init__(**kwargs)
        self.timestamp = kwargs.get('timestamp', None)
        self.value = kwargs.get('value', None)
        self.average = kwargs.get('average', None)
        self.min = kwargs.get('min', None)
        self.max = kwargs.get('max', None)


class PartDto(msrest.serialization.Model):
    """PartDto.

    All required parameters must be populated in order to send to Azure.

    :ivar part_number: Required.
    :vartype part_number: str
    :ivar part_revision:
    :vartype part_revision: str
    :ivar part_name:
    :vartype part_name: str
    :ivar drawing:
    :vartype drawing: str
    :ivar drawing_revision:
    :vartype drawing_revision: str
    """

    _validation = {
        'part_number': {'required': True},
    }

    _attribute_map = {
        'part_number': {'key': 'partNumber', 'type': 'str'},
        'part_revision': {'key': 'partRevision', 'type': 'str'},
        'part_name': {'key': 'partName', 'type': 'str'},
        'drawing': {'key': 'drawing', 'type': 'str'},
        'drawing_revision': {'key': 'drawingRevision', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword part_number: Required.
        :paramtype part_number: str
        :keyword part_revision:
        :paramtype part_revision: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword drawing:
        :paramtype drawing: str
        :keyword drawing_revision:
        :paramtype drawing_revision: str
        """
        super(PartDto, self).__init__(**kwargs)
        self.part_number = kwargs['part_number']
        self.part_revision = kwargs.get('part_revision', None)
        self.part_name = kwargs.get('part_name', None)
        self.drawing = kwargs.get('drawing', None)
        self.drawing_revision = kwargs.get('drawing_revision', None)


class PowerDto(msrest.serialization.Model):
    """PowerDto.

    :ivar asset_name:
    :vartype asset_name: str
    :ivar assets:
    :vartype assets: list[~ignos.api.client.models.AssetPowerDto]
    """

    _attribute_map = {
        'asset_name': {'key': 'assetName', 'type': 'str'},
        'assets': {'key': 'assets', 'type': '[AssetPowerDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword assets:
        :paramtype assets: list[~ignos.api.client.models.AssetPowerDto]
        """
        super(PowerDto, self).__init__(**kwargs)
        self.asset_name = kwargs.get('asset_name', None)
        self.assets = kwargs.get('assets', None)


class PowerRegionDto(msrest.serialization.Model):
    """PowerRegionDto.

    :ivar id:
    :vartype id: str
    :ivar country:
    :vartype country: str
    :ivar region:
    :vartype region: str
    :ivar description:
    :vartype description: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'country': {'key': 'country', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword country:
        :paramtype country: str
        :keyword region:
        :paramtype region: str
        :keyword description:
        :paramtype description: str
        """
        super(PowerRegionDto, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.country = kwargs.get('country', None)
        self.region = kwargs.get('region', None)
        self.description = kwargs.get('description', None)


class ResourceDto(msrest.serialization.Model):
    """ResourceDto.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required.
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar external: Required.
    :vartype external: bool
    """

    _validation = {
        'id': {'required': True},
        'external': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'external': {'key': 'external', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name:
        :paramtype name: str
        :keyword external: Required.
        :paramtype external: bool
        """
        super(ResourceDto, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.name = kwargs.get('name', None)
        self.external = kwargs['external']


class ResourceExistDto(msrest.serialization.Model):
    """ResourceExistDto.

    All required parameters must be populated in order to send to Azure.

    :ivar exists: Required.
    :vartype exists: bool
    :ivar id:
    :vartype id: str
    :ivar external_id:
    :vartype external_id: str
    """

    _validation = {
        'exists': {'required': True},
    }

    _attribute_map = {
        'exists': {'key': 'exists', 'type': 'bool'},
        'id': {'key': 'id', 'type': 'str'},
        'external_id': {'key': 'externalId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword exists: Required.
        :paramtype exists: bool
        :keyword id:
        :paramtype id: str
        :keyword external_id:
        :paramtype external_id: str
        """
        super(ResourceExistDto, self).__init__(**kwargs)
        self.exists = kwargs['exists']
        self.id = kwargs.get('id', None)
        self.external_id = kwargs.get('external_id', None)


class StartWorkOperationRequest(msrest.serialization.Model):
    """StartWorkOperationRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar is_setup:
    :vartype is_setup: bool
    :ivar employee:
    :vartype employee: ~ignos.api.client.models.EmployeeDto
    :ivar resource_id: Required.
    :vartype resource_id: str
    :ivar customer_order:
    :vartype customer_order: ~ignos.api.client.models.CustomerOrderInfoDto
    :ivar part:
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar workorder_quantity:
    :vartype workorder_quantity: float
    :ivar time:
    :vartype time: ~datetime.datetime
    :ivar material_part_number:
    :vartype material_part_number: str
    :ivar material_part_name:
    :vartype material_part_name: str
    :ivar material_item_group:
    :vartype material_item_group: str
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'is_setup': {'key': 'isSetup', 'type': 'bool'},
        'employee': {'key': 'employee', 'type': 'EmployeeDto'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'customer_order': {'key': 'customerOrder', 'type': 'CustomerOrderInfoDto'},
        'part': {'key': 'part', 'type': 'PartDto'},
        'workorder_quantity': {'key': 'workorderQuantity', 'type': 'float'},
        'time': {'key': 'time', 'type': 'iso-8601'},
        'material_part_number': {'key': 'materialPartNumber', 'type': 'str'},
        'material_part_name': {'key': 'materialPartName', 'type': 'str'},
        'material_item_group': {'key': 'materialItemGroup', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword is_setup:
        :paramtype is_setup: bool
        :keyword employee:
        :paramtype employee: ~ignos.api.client.models.EmployeeDto
        :keyword resource_id: Required.
        :paramtype resource_id: str
        :keyword customer_order:
        :paramtype customer_order: ~ignos.api.client.models.CustomerOrderInfoDto
        :keyword part:
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword workorder_quantity:
        :paramtype workorder_quantity: float
        :keyword time:
        :paramtype time: ~datetime.datetime
        :keyword material_part_number:
        :paramtype material_part_number: str
        :keyword material_part_name:
        :paramtype material_part_name: str
        :keyword material_item_group:
        :paramtype material_item_group: str
        """
        super(StartWorkOperationRequest, self).__init__(**kwargs)
        self.is_setup = kwargs.get('is_setup', None)
        self.employee = kwargs.get('employee', None)
        self.resource_id = kwargs['resource_id']
        self.customer_order = kwargs.get('customer_order', None)
        self.part = kwargs.get('part', None)
        self.workorder_quantity = kwargs.get('workorder_quantity', None)
        self.time = kwargs.get('time', None)
        self.material_part_number = kwargs.get('material_part_number', None)
        self.material_part_name = kwargs.get('material_part_name', None)
        self.material_item_group = kwargs.get('material_item_group', None)


class StateDto(msrest.serialization.Model):
    """StateDto.

    All required parameters must be populated in order to send to Azure.

    :ivar state: Required.
    :vartype state: str
    :ivar machine_state: Required. Possible values include: "InCycle", "MasterCam", "MdiCycle",
     "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode", "ManualMode",
     "EStop", "Alarm", "PowerOff".
    :vartype machine_state: str or ~ignos.api.client.models.MachineState
    :ivar seconds: Required.
    :vartype seconds: int
    """

    _validation = {
        'state': {'required': True},
        'machine_state': {'required': True},
        'seconds': {'required': True},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'machine_state': {'key': 'machineState', 'type': 'str'},
        'seconds': {'key': 'seconds', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword state: Required.
        :paramtype state: str
        :keyword machine_state: Required. Possible values include: "InCycle", "MasterCam", "MdiCycle",
         "Idle", "OptionalStop", "ProgramStop", "M0", "AtcStopped", "FeedHold", "MdiMode", "ManualMode",
         "EStop", "Alarm", "PowerOff".
        :paramtype machine_state: str or ~ignos.api.client.models.MachineState
        :keyword seconds: Required.
        :paramtype seconds: int
        """
        super(StateDto, self).__init__(**kwargs)
        self.state = kwargs['state']
        self.machine_state = kwargs['machine_state']
        self.seconds = kwargs['seconds']


class StopWorkOperationRequest(msrest.serialization.Model):
    """StopWorkOperationRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar is_setup:
    :vartype is_setup: bool
    :ivar employee:
    :vartype employee: ~ignos.api.client.models.EmployeeDto
    :ivar time:
    :vartype time: ~datetime.datetime
    :ivar resource_id: Required.
    :vartype resource_id: str
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'is_setup': {'key': 'isSetup', 'type': 'bool'},
        'employee': {'key': 'employee', 'type': 'EmployeeDto'},
        'time': {'key': 'time', 'type': 'iso-8601'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword is_setup:
        :paramtype is_setup: bool
        :keyword employee:
        :paramtype employee: ~ignos.api.client.models.EmployeeDto
        :keyword time:
        :paramtype time: ~datetime.datetime
        :keyword resource_id: Required.
        :paramtype resource_id: str
        """
        super(StopWorkOperationRequest, self).__init__(**kwargs)
        self.is_setup = kwargs.get('is_setup', None)
        self.employee = kwargs.get('employee', None)
        self.time = kwargs.get('time', None)
        self.resource_id = kwargs['resource_id']


class StringKeyValuePair(msrest.serialization.Model):
    """StringKeyValuePair.

    :ivar key:
    :vartype key: str
    :ivar value:
    :vartype value: str
    """

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key:
        :paramtype key: str
        :keyword value:
        :paramtype value: str
        """
        super(StringKeyValuePair, self).__init__(**kwargs)
        self.key = kwargs.get('key', None)
        self.value = kwargs.get('value', None)


class SubComsumptionResultDto(msrest.serialization.Model):
    """SubComsumptionResultDto.

    :ivar kwh:
    :vartype kwh: float
    :ivar co2_equivalent:
    :vartype co2_equivalent: float
    :ivar timestamp:
    :vartype timestamp: long
    """

    _attribute_map = {
        'kwh': {'key': 'kwh', 'type': 'float'},
        'co2_equivalent': {'key': 'co2Equivalent', 'type': 'float'},
        'timestamp': {'key': 'timestamp', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword kwh:
        :paramtype kwh: float
        :keyword co2_equivalent:
        :paramtype co2_equivalent: float
        :keyword timestamp:
        :paramtype timestamp: long
        """
        super(SubComsumptionResultDto, self).__init__(**kwargs)
        self.kwh = kwargs.get('kwh', None)
        self.co2_equivalent = kwargs.get('co2_equivalent', None)
        self.timestamp = kwargs.get('timestamp', None)


class SubConsumptionDto(msrest.serialization.Model):
    """SubConsumptionDto.

    :ivar asset_id:
    :vartype asset_id: long
    :ivar asset_name:
    :vartype asset_name: str
    :ivar timeseries_id:
    :vartype timeseries_id: long
    :ivar timeseries_name:
    :vartype timeseries_name: str
    :ivar kwh:
    :vartype kwh: float
    :ivar co2_equivalent:
    :vartype co2_equivalent: float
    :ivar first_timestamp:
    :vartype first_timestamp: long
    :ivar last_timestamp:
    :vartype last_timestamp: long
    :ivar items:
    :vartype items: list[~ignos.api.client.models.SubComsumptionResultDto]
    """

    _attribute_map = {
        'asset_id': {'key': 'assetId', 'type': 'long'},
        'asset_name': {'key': 'assetName', 'type': 'str'},
        'timeseries_id': {'key': 'timeseriesId', 'type': 'long'},
        'timeseries_name': {'key': 'timeseriesName', 'type': 'str'},
        'kwh': {'key': 'kwh', 'type': 'float'},
        'co2_equivalent': {'key': 'co2Equivalent', 'type': 'float'},
        'first_timestamp': {'key': 'firstTimestamp', 'type': 'long'},
        'last_timestamp': {'key': 'lastTimestamp', 'type': 'long'},
        'items': {'key': 'items', 'type': '[SubComsumptionResultDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asset_id:
        :paramtype asset_id: long
        :keyword asset_name:
        :paramtype asset_name: str
        :keyword timeseries_id:
        :paramtype timeseries_id: long
        :keyword timeseries_name:
        :paramtype timeseries_name: str
        :keyword kwh:
        :paramtype kwh: float
        :keyword co2_equivalent:
        :paramtype co2_equivalent: float
        :keyword first_timestamp:
        :paramtype first_timestamp: long
        :keyword last_timestamp:
        :paramtype last_timestamp: long
        :keyword items:
        :paramtype items: list[~ignos.api.client.models.SubComsumptionResultDto]
        """
        super(SubConsumptionDto, self).__init__(**kwargs)
        self.asset_id = kwargs.get('asset_id', None)
        self.asset_name = kwargs.get('asset_name', None)
        self.timeseries_id = kwargs.get('timeseries_id', None)
        self.timeseries_name = kwargs.get('timeseries_name', None)
        self.kwh = kwargs.get('kwh', None)
        self.co2_equivalent = kwargs.get('co2_equivalent', None)
        self.first_timestamp = kwargs.get('first_timestamp', None)
        self.last_timestamp = kwargs.get('last_timestamp', None)
        self.items = kwargs.get('items', None)


class TenantDto(msrest.serialization.Model):
    """TenantDto.

    All required parameters must be populated in order to send to Azure.

    :ivar tenant_id: Required.
    :vartype tenant_id: str
    :ivar name: Required.
    :vartype name: str
    :ivar environment: Required. Possible values include: "Prod", "QA", "Test", "Dev".
    :vartype environment: str or ~ignos.api.client.models.TenantEnvironment
    :ivar environment_name: Required.
    :vartype environment_name: str
    :ivar description:
    :vartype description: str
    :ivar customer_id: Required.
    :vartype customer_id: str
    :ivar customer_short_name: Required.
    :vartype customer_short_name: str
    :ivar customer_name: Required.
    :vartype customer_name: str
    :ivar azure_region_id: Required.
    :vartype azure_region_id: str
    :ivar azure_region_name: Required.
    :vartype azure_region_name: str
    :ivar azure_ad_tenant_id: Required.
    :vartype azure_ad_tenant_id: str
    :ivar cosmos_database:
    :vartype cosmos_database: str
    :ivar contact_person: Required.
    :vartype contact_person: ~ignos.api.client.models.ContactPersonDto
    :ivar external_reference:
    :vartype external_reference: str
    :ivar three_letter_iso_country: Required.
    :vartype three_letter_iso_country: str
    :ivar country: Required.
    :vartype country: str
    :ivar status: Required.
    :vartype status: int
    :ivar logo_url:
    :vartype logo_url: str
    :ivar company_url:
    :vartype company_url: str
    :ivar domain:
    :vartype domain: str
    :ivar infrastructure_status: Required. Possible values include: 0, 1, 2, 9.
    :vartype infrastructure_status: int or ~ignos.api.client.models.TenantInfrastructureStatus
    :ivar cdf_tenant:
    :vartype cdf_tenant: str
    :ivar cdf_tenant_client_id:
    :vartype cdf_tenant_client_id: str
    :ivar tenant_key:
    :vartype tenant_key: str
    """

    _validation = {
        'tenant_id': {'required': True},
        'name': {'required': True},
        'environment': {'required': True},
        'environment_name': {'required': True},
        'customer_id': {'required': True},
        'customer_short_name': {'required': True},
        'customer_name': {'required': True},
        'azure_region_id': {'required': True},
        'azure_region_name': {'required': True},
        'azure_ad_tenant_id': {'required': True},
        'contact_person': {'required': True},
        'three_letter_iso_country': {'required': True},
        'country': {'required': True},
        'status': {'required': True},
        'infrastructure_status': {'required': True},
    }

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'environment': {'key': 'environment', 'type': 'str'},
        'environment_name': {'key': 'environmentName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_short_name': {'key': 'customerShortName', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'azure_region_id': {'key': 'azureRegionId', 'type': 'str'},
        'azure_region_name': {'key': 'azureRegionName', 'type': 'str'},
        'azure_ad_tenant_id': {'key': 'azureAdTenantId', 'type': 'str'},
        'cosmos_database': {'key': 'cosmosDatabase', 'type': 'str'},
        'contact_person': {'key': 'contactPerson', 'type': 'ContactPersonDto'},
        'external_reference': {'key': 'externalReference', 'type': 'str'},
        'three_letter_iso_country': {'key': 'threeLetterIsoCountry', 'type': 'str'},
        'country': {'key': 'country', 'type': 'str'},
        'status': {'key': 'status', 'type': 'int'},
        'logo_url': {'key': 'logoUrl', 'type': 'str'},
        'company_url': {'key': 'companyUrl', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'infrastructure_status': {'key': 'infrastructureStatus', 'type': 'int'},
        'cdf_tenant': {'key': 'cdfTenant', 'type': 'str'},
        'cdf_tenant_client_id': {'key': 'cdfTenantClientId', 'type': 'str'},
        'tenant_key': {'key': 'tenantKey', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tenant_id: Required.
        :paramtype tenant_id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword environment: Required. Possible values include: "Prod", "QA", "Test", "Dev".
        :paramtype environment: str or ~ignos.api.client.models.TenantEnvironment
        :keyword environment_name: Required.
        :paramtype environment_name: str
        :keyword description:
        :paramtype description: str
        :keyword customer_id: Required.
        :paramtype customer_id: str
        :keyword customer_short_name: Required.
        :paramtype customer_short_name: str
        :keyword customer_name: Required.
        :paramtype customer_name: str
        :keyword azure_region_id: Required.
        :paramtype azure_region_id: str
        :keyword azure_region_name: Required.
        :paramtype azure_region_name: str
        :keyword azure_ad_tenant_id: Required.
        :paramtype azure_ad_tenant_id: str
        :keyword cosmos_database:
        :paramtype cosmos_database: str
        :keyword contact_person: Required.
        :paramtype contact_person: ~ignos.api.client.models.ContactPersonDto
        :keyword external_reference:
        :paramtype external_reference: str
        :keyword three_letter_iso_country: Required.
        :paramtype three_letter_iso_country: str
        :keyword country: Required.
        :paramtype country: str
        :keyword status: Required.
        :paramtype status: int
        :keyword logo_url:
        :paramtype logo_url: str
        :keyword company_url:
        :paramtype company_url: str
        :keyword domain:
        :paramtype domain: str
        :keyword infrastructure_status: Required. Possible values include: 0, 1, 2, 9.
        :paramtype infrastructure_status: int or ~ignos.api.client.models.TenantInfrastructureStatus
        :keyword cdf_tenant:
        :paramtype cdf_tenant: str
        :keyword cdf_tenant_client_id:
        :paramtype cdf_tenant_client_id: str
        :keyword tenant_key:
        :paramtype tenant_key: str
        """
        super(TenantDto, self).__init__(**kwargs)
        self.tenant_id = kwargs['tenant_id']
        self.name = kwargs['name']
        self.environment = kwargs['environment']
        self.environment_name = kwargs['environment_name']
        self.description = kwargs.get('description', None)
        self.customer_id = kwargs['customer_id']
        self.customer_short_name = kwargs['customer_short_name']
        self.customer_name = kwargs['customer_name']
        self.azure_region_id = kwargs['azure_region_id']
        self.azure_region_name = kwargs['azure_region_name']
        self.azure_ad_tenant_id = kwargs['azure_ad_tenant_id']
        self.cosmos_database = kwargs.get('cosmos_database', None)
        self.contact_person = kwargs['contact_person']
        self.external_reference = kwargs.get('external_reference', None)
        self.three_letter_iso_country = kwargs['three_letter_iso_country']
        self.country = kwargs['country']
        self.status = kwargs['status']
        self.logo_url = kwargs.get('logo_url', None)
        self.company_url = kwargs.get('company_url', None)
        self.domain = kwargs.get('domain', None)
        self.infrastructure_status = kwargs['infrastructure_status']
        self.cdf_tenant = kwargs.get('cdf_tenant', None)
        self.cdf_tenant_client_id = kwargs.get('cdf_tenant_client_id', None)
        self.tenant_key = kwargs.get('tenant_key', None)


class TenantKeyDto(msrest.serialization.Model):
    """TenantKeyDto.

    :ivar key:
    :vartype key: str
    :ivar tenant_id:
    :vartype tenant_id: str
    :ivar tenant_row_key:
    :vartype tenant_row_key: str
    :ivar customer_short_name:
    :vartype customer_short_name: str
    :ivar customer_row_key:
    :vartype customer_row_key: str
    :ivar cdf_tenant:
    :vartype cdf_tenant: str
    """

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'tenant_row_key': {'key': 'tenantRowKey', 'type': 'str'},
        'customer_short_name': {'key': 'customerShortName', 'type': 'str'},
        'customer_row_key': {'key': 'customerRowKey', 'type': 'str'},
        'cdf_tenant': {'key': 'cdfTenant', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key:
        :paramtype key: str
        :keyword tenant_id:
        :paramtype tenant_id: str
        :keyword tenant_row_key:
        :paramtype tenant_row_key: str
        :keyword customer_short_name:
        :paramtype customer_short_name: str
        :keyword customer_row_key:
        :paramtype customer_row_key: str
        :keyword cdf_tenant:
        :paramtype cdf_tenant: str
        """
        super(TenantKeyDto, self).__init__(**kwargs)
        self.key = kwargs.get('key', None)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.tenant_row_key = kwargs.get('tenant_row_key', None)
        self.customer_short_name = kwargs.get('customer_short_name', None)
        self.customer_row_key = kwargs.get('customer_row_key', None)
        self.cdf_tenant = kwargs.get('cdf_tenant', None)


class UpdateAppRequest(msrest.serialization.Model):
    """UpdateAppRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Required.
    :vartype description: str
    :ivar private_app: Required.
    :vartype private_app: bool
    """

    _validation = {
        'description': {'required': True},
        'private_app': {'required': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'private_app': {'key': 'privateApp', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword description: Required.
        :paramtype description: str
        :keyword private_app: Required.
        :paramtype private_app: bool
        """
        super(UpdateAppRequest, self).__init__(**kwargs)
        self.description = kwargs['description']
        self.private_app = kwargs['private_app']


class UpdateCdfClusterRequest(msrest.serialization.Model):
    """UpdateCdfClusterRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar base_url: Required.
    :vartype base_url: str
    :ivar scope: Required.
    :vartype scope: str
    """

    _validation = {
        'base_url': {'required': True},
        'scope': {'required': True},
    }

    _attribute_map = {
        'base_url': {'key': 'baseUrl', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword base_url: Required.
        :paramtype base_url: str
        :keyword scope: Required.
        :paramtype scope: str
        """
        super(UpdateCdfClusterRequest, self).__init__(**kwargs)
        self.base_url = kwargs['base_url']
        self.scope = kwargs['scope']


class UpdateCdfConfig(msrest.serialization.Model):
    """UpdateCdfConfig.

    All required parameters must be populated in order to send to Azure.

    :ivar client_id: Required.
    :vartype client_id: str
    :ivar client_secret:
    :vartype client_secret: str
    """

    _validation = {
        'client_id': {'required': True},
    }

    _attribute_map = {
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword client_id: Required.
        :paramtype client_id: str
        :keyword client_secret:
        :paramtype client_secret: str
        """
        super(UpdateCdfConfig, self).__init__(**kwargs)
        self.client_id = kwargs['client_id']
        self.client_secret = kwargs.get('client_secret', None)


class UpdateCustomerRequest(msrest.serialization.Model):
    """UpdateCustomerRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required.
    :vartype name: str
    :ivar azure_ad_tenant_id:
    :vartype azure_ad_tenant_id: str
    :ivar contact_person: Required.
    :vartype contact_person: ~ignos.api.client.models.ContactPersonDto
    :ivar external_reference:
    :vartype external_reference: str
    :ivar three_letter_iso_country: Required.
    :vartype three_letter_iso_country: str
    :ivar logo_url:
    :vartype logo_url: str
    :ivar company_url:
    :vartype company_url: str
    :ivar domain:
    :vartype domain: str
    """

    _validation = {
        'name': {'required': True},
        'contact_person': {'required': True},
        'three_letter_iso_country': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'azure_ad_tenant_id': {'key': 'azureAdTenantId', 'type': 'str'},
        'contact_person': {'key': 'contactPerson', 'type': 'ContactPersonDto'},
        'external_reference': {'key': 'externalReference', 'type': 'str'},
        'three_letter_iso_country': {'key': 'threeLetterIsoCountry', 'type': 'str'},
        'logo_url': {'key': 'logoUrl', 'type': 'str'},
        'company_url': {'key': 'companyUrl', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword azure_ad_tenant_id:
        :paramtype azure_ad_tenant_id: str
        :keyword contact_person: Required.
        :paramtype contact_person: ~ignos.api.client.models.ContactPersonDto
        :keyword external_reference:
        :paramtype external_reference: str
        :keyword three_letter_iso_country: Required.
        :paramtype three_letter_iso_country: str
        :keyword logo_url:
        :paramtype logo_url: str
        :keyword company_url:
        :paramtype company_url: str
        :keyword domain:
        :paramtype domain: str
        """
        super(UpdateCustomerRequest, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.azure_ad_tenant_id = kwargs.get('azure_ad_tenant_id', None)
        self.contact_person = kwargs['contact_person']
        self.external_reference = kwargs.get('external_reference', None)
        self.three_letter_iso_country = kwargs['three_letter_iso_country']
        self.logo_url = kwargs.get('logo_url', None)
        self.company_url = kwargs.get('company_url', None)
        self.domain = kwargs.get('domain', None)


class UpdateTenantRequest(msrest.serialization.Model):
    """UpdateTenantRequest.

    :ivar description:
    :vartype description: str
    :ivar contact_person:
    :vartype contact_person: ~ignos.api.client.models.ContactPersonDto
    :ivar cdf_tenant:
    :vartype cdf_tenant: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'contact_person': {'key': 'contactPerson', 'type': 'ContactPersonDto'},
        'cdf_tenant': {'key': 'cdfTenant', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword description:
        :paramtype description: str
        :keyword contact_person:
        :paramtype contact_person: ~ignos.api.client.models.ContactPersonDto
        :keyword cdf_tenant:
        :paramtype cdf_tenant: str
        """
        super(UpdateTenantRequest, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.contact_person = kwargs.get('contact_person', None)
        self.cdf_tenant = kwargs.get('cdf_tenant', None)


class UpsertCustomerOrderRequest(msrest.serialization.Model):
    """UpsertCustomerOrderRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar external_order_number: External ordernumber. (ie: What your customer calls this order.).
    :vartype external_order_number: str
    :ivar status: Required. Possible values include: "Draft", "Ready", "Ongoing", "Completed",
     "Deleted".
    :vartype status: str or ~ignos.api.client.models.CustomerOrderStatus
    :ivar customer: Required.
    :vartype customer: ~ignos.api.client.models.CustomerDto
    :ivar order_lines: Required.
    :vartype order_lines: list[~ignos.api.client.models.CustomerOrderLineDto]
    """

    _validation = {
        'status': {'required': True},
        'customer': {'required': True},
        'order_lines': {'required': True},
    }

    _attribute_map = {
        'external_order_number': {'key': 'externalOrderNumber', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'customer': {'key': 'customer', 'type': 'CustomerDto'},
        'order_lines': {'key': 'orderLines', 'type': '[CustomerOrderLineDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword external_order_number: External ordernumber. (ie: What your customer calls this
         order.).
        :paramtype external_order_number: str
        :keyword status: Required. Possible values include: "Draft", "Ready", "Ongoing", "Completed",
         "Deleted".
        :paramtype status: str or ~ignos.api.client.models.CustomerOrderStatus
        :keyword customer: Required.
        :paramtype customer: ~ignos.api.client.models.CustomerDto
        :keyword order_lines: Required.
        :paramtype order_lines: list[~ignos.api.client.models.CustomerOrderLineDto]
        """
        super(UpsertCustomerOrderRequest, self).__init__(**kwargs)
        self.external_order_number = kwargs.get('external_order_number', None)
        self.status = kwargs['status']
        self.customer = kwargs['customer']
        self.order_lines = kwargs['order_lines']


class UpsertWorkorder(msrest.serialization.Model):
    """UpsertWorkorder.

    All required parameters must be populated in order to send to Azure.

    :ivar workorder: Required.
    :vartype workorder: str
    :ivar part: Required.
    :vartype part: ~ignos.api.client.models.PartDto
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar unit:
    :vartype unit: str
    :ivar status: Required. Possible values include: "Draft", "Ready", "Ongoing", "Completed",
     "Deleted".
    :vartype status: str or ~ignos.api.client.models.WorkorderStatus
    :ivar operations: Required.
    :vartype operations: list[~ignos.api.client.models.WorkorderOperationDto]
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar produced_quantity:
    :vartype produced_quantity: float
    :ivar scrapped_quantity:
    :vartype scrapped_quantity: float
    :ivar customer_order_reference:
    :vartype customer_order_reference: ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
    """

    _validation = {
        'workorder': {'required': True},
        'part': {'required': True},
        'quantity': {'required': True},
        'status': {'required': True},
        'operations': {'required': True},
    }

    _attribute_map = {
        'workorder': {'key': 'workorder', 'type': 'str'},
        'part': {'key': 'part', 'type': 'PartDto'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'unit': {'key': 'unit', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'operations': {'key': 'operations', 'type': '[WorkorderOperationDto]'},
        'planned_start': {'key': 'plannedStart', 'type': 'iso-8601'},
        'planned_end': {'key': 'plannedEnd', 'type': 'iso-8601'},
        'produced_quantity': {'key': 'producedQuantity', 'type': 'float'},
        'scrapped_quantity': {'key': 'scrappedQuantity', 'type': 'float'},
        'customer_order_reference': {'key': 'customerOrderReference', 'type': 'WorkorderCustomerOrderReferenceDto'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword workorder: Required.
        :paramtype workorder: str
        :keyword part: Required.
        :paramtype part: ~ignos.api.client.models.PartDto
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword unit:
        :paramtype unit: str
        :keyword status: Required. Possible values include: "Draft", "Ready", "Ongoing", "Completed",
         "Deleted".
        :paramtype status: str or ~ignos.api.client.models.WorkorderStatus
        :keyword operations: Required.
        :paramtype operations: list[~ignos.api.client.models.WorkorderOperationDto]
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword produced_quantity:
        :paramtype produced_quantity: float
        :keyword scrapped_quantity:
        :paramtype scrapped_quantity: float
        :keyword customer_order_reference:
        :paramtype customer_order_reference:
         ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
        """
        super(UpsertWorkorder, self).__init__(**kwargs)
        self.workorder = kwargs['workorder']
        self.part = kwargs['part']
        self.quantity = kwargs['quantity']
        self.unit = kwargs.get('unit', None)
        self.status = kwargs['status']
        self.operations = kwargs['operations']
        self.planned_start = kwargs.get('planned_start', None)
        self.planned_end = kwargs.get('planned_end', None)
        self.produced_quantity = kwargs.get('produced_quantity', None)
        self.scrapped_quantity = kwargs.get('scrapped_quantity', None)
        self.customer_order_reference = kwargs.get('customer_order_reference', None)


class UserAppDto(msrest.serialization.Model):
    """UserAppDto.

    All required parameters must be populated in order to send to Azure.

    :ivar key: Required.
    :vartype key: str
    :ivar name: Required.
    :vartype name: str
    :ivar description:
    :vartype description: str
    """

    _validation = {
        'key': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key: Required.
        :paramtype key: str
        :keyword name: Required.
        :paramtype name: str
        :keyword description:
        :paramtype description: str
        """
        super(UserAppDto, self).__init__(**kwargs)
        self.key = kwargs['key']
        self.name = kwargs['name']
        self.description = kwargs.get('description', None)


class UserDto(msrest.serialization.Model):
    """UserDto.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar x:
    :vartype x: ~ignos.api.client.models.IIdentity
    :ivar claims:
    :vartype claims: list[~ignos.api.client.models.StringKeyValuePair]
    :ivar tenant_id:
    :vartype tenant_id: str
    """

    _validation = {
        'claims': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'x': {'key': 'x', 'type': 'IIdentity'},
        'claims': {'key': 'claims', 'type': '[StringKeyValuePair]'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword x:
        :paramtype x: ~ignos.api.client.models.IIdentity
        """
        super(UserDto, self).__init__(**kwargs)
        self.x = kwargs.get('x', None)
        self.claims = None
        self.tenant_id = None


class UtilizationDetailsDto(msrest.serialization.Model):
    """UtilizationDetailsDto.

    All required parameters must be populated in order to send to Azure.

    :ivar states: Required.
    :vartype states: list[~ignos.api.client.models.StateDto]
    """

    _validation = {
        'states': {'required': True},
    }

    _attribute_map = {
        'states': {'key': 'states', 'type': '[StateDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword states: Required.
        :paramtype states: list[~ignos.api.client.models.StateDto]
        """
        super(UtilizationDetailsDto, self).__init__(**kwargs)
        self.states = kwargs['states']


class UtilizationDto(msrest.serialization.Model):
    """UtilizationDto.

    :ivar machines:
    :vartype machines: list[~ignos.api.client.models.MachineUtilizationDto]
    """

    _attribute_map = {
        'machines': {'key': 'machines', 'type': '[MachineUtilizationDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword machines:
        :paramtype machines: list[~ignos.api.client.models.MachineUtilizationDto]
        """
        super(UtilizationDto, self).__init__(**kwargs)
        self.machines = kwargs.get('machines', None)


class UtilizationWorkorderDto(msrest.serialization.Model):
    """UtilizationWorkorderDto.

    :ivar id:
    :vartype id: str
    :ivar operation:
    :vartype operation: int
    :ivar is_setup:
    :vartype is_setup: bool
    :ivar part_number:
    :vartype part_number: str
    :ivar part_name:
    :vartype part_name: str
    :ivar customer:
    :vartype customer: ~ignos.api.client.models.CustomerDto
    :ivar start_time:
    :vartype start_time: ~datetime.datetime
    :ivar workorder_utilization:
    :vartype workorder_utilization: float
    :ivar compared_to_average:
    :vartype compared_to_average: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'int'},
        'is_setup': {'key': 'isSetup', 'type': 'bool'},
        'part_number': {'key': 'partNumber', 'type': 'str'},
        'part_name': {'key': 'partName', 'type': 'str'},
        'customer': {'key': 'customer', 'type': 'CustomerDto'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'workorder_utilization': {'key': 'workorderUtilization', 'type': 'float'},
        'compared_to_average': {'key': 'comparedToAverage', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword operation:
        :paramtype operation: int
        :keyword is_setup:
        :paramtype is_setup: bool
        :keyword part_number:
        :paramtype part_number: str
        :keyword part_name:
        :paramtype part_name: str
        :keyword customer:
        :paramtype customer: ~ignos.api.client.models.CustomerDto
        :keyword start_time:
        :paramtype start_time: ~datetime.datetime
        :keyword workorder_utilization:
        :paramtype workorder_utilization: float
        :keyword compared_to_average:
        :paramtype compared_to_average: float
        """
        super(UtilizationWorkorderDto, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.operation = kwargs.get('operation', None)
        self.is_setup = kwargs.get('is_setup', None)
        self.part_number = kwargs.get('part_number', None)
        self.part_name = kwargs.get('part_name', None)
        self.customer = kwargs.get('customer', None)
        self.start_time = kwargs.get('start_time', None)
        self.workorder_utilization = kwargs.get('workorder_utilization', None)
        self.compared_to_average = kwargs.get('compared_to_average', None)


class WorkorderCustomerOrderReferenceDto(msrest.serialization.Model):
    """WorkorderCustomerOrderReferenceDto.

    :ivar customer_order:
    :vartype customer_order: str
    :ivar customer_order_line:
    :vartype customer_order_line: int
    :ivar customer_id:
    :vartype customer_id: str
    :ivar customer_name:
    :vartype customer_name: str
    :ivar external_order_number:
    :vartype external_order_number: str
    """

    _attribute_map = {
        'customer_order': {'key': 'customerOrder', 'type': 'str'},
        'customer_order_line': {'key': 'customerOrderLine', 'type': 'int'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'customer_name': {'key': 'customerName', 'type': 'str'},
        'external_order_number': {'key': 'externalOrderNumber', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword customer_order:
        :paramtype customer_order: str
        :keyword customer_order_line:
        :paramtype customer_order_line: int
        :keyword customer_id:
        :paramtype customer_id: str
        :keyword customer_name:
        :paramtype customer_name: str
        :keyword external_order_number:
        :paramtype external_order_number: str
        """
        super(WorkorderCustomerOrderReferenceDto, self).__init__(**kwargs)
        self.customer_order = kwargs.get('customer_order', None)
        self.customer_order_line = kwargs.get('customer_order_line', None)
        self.customer_id = kwargs.get('customer_id', None)
        self.customer_name = kwargs.get('customer_name', None)
        self.external_order_number = kwargs.get('external_order_number', None)


class WorkorderHierarchyDto(msrest.serialization.Model):
    """WorkorderHierarchyDto.

    All required parameters must be populated in order to send to Azure.

    :ivar workorder: Required.
    :vartype workorder: str
    :ivar quantity: Required.
    :vartype quantity: float
    :ivar total_quantity: Required.
    :vartype total_quantity: float
    :ivar workorders: Required.
    :vartype workorders: list[~ignos.api.client.models.WorkorderHierarchyDto]
    """

    _validation = {
        'workorder': {'required': True},
        'quantity': {'required': True},
        'total_quantity': {'required': True},
        'workorders': {'required': True},
    }

    _attribute_map = {
        'workorder': {'key': 'workorder', 'type': 'str'},
        'quantity': {'key': 'quantity', 'type': 'float'},
        'total_quantity': {'key': 'totalQuantity', 'type': 'float'},
        'workorders': {'key': 'workorders', 'type': '[WorkorderHierarchyDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword workorder: Required.
        :paramtype workorder: str
        :keyword quantity: Required.
        :paramtype quantity: float
        :keyword total_quantity: Required.
        :paramtype total_quantity: float
        :keyword workorders: Required.
        :paramtype workorders: list[~ignos.api.client.models.WorkorderHierarchyDto]
        """
        super(WorkorderHierarchyDto, self).__init__(**kwargs)
        self.workorder = kwargs['workorder']
        self.quantity = kwargs['quantity']
        self.total_quantity = kwargs['total_quantity']
        self.workorders = kwargs['workorders']


class WorkorderMaterialDto(msrest.serialization.Model):
    """WorkorderMaterialDto.

    All required parameters must be populated in order to send to Azure.

    :ivar material_line:
    :vartype material_line: int
    :ivar status: Required. Possible values include: "Unknown", "NotStarted", "Partial",
     "Completed".
    :vartype status: str or ~ignos.api.client.models.MaterialStatus
    :ivar material: Required.
    :vartype material: ~ignos.api.client.models.PartDto
    :ivar quantity_per_part: Required.
    :vartype quantity_per_part: float
    :ivar fixed_quantity: Required.
    :vartype fixed_quantity: bool
    :ivar used_quantity:
    :vartype used_quantity: float
    :ivar unit:
    :vartype unit: str
    """

    _validation = {
        'status': {'required': True},
        'material': {'required': True},
        'quantity_per_part': {'required': True},
        'fixed_quantity': {'required': True},
    }

    _attribute_map = {
        'material_line': {'key': 'materialLine', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'material': {'key': 'material', 'type': 'PartDto'},
        'quantity_per_part': {'key': 'quantityPerPart', 'type': 'float'},
        'fixed_quantity': {'key': 'fixedQuantity', 'type': 'bool'},
        'used_quantity': {'key': 'usedQuantity', 'type': 'float'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword material_line:
        :paramtype material_line: int
        :keyword status: Required. Possible values include: "Unknown", "NotStarted", "Partial",
         "Completed".
        :paramtype status: str or ~ignos.api.client.models.MaterialStatus
        :keyword material: Required.
        :paramtype material: ~ignos.api.client.models.PartDto
        :keyword quantity_per_part: Required.
        :paramtype quantity_per_part: float
        :keyword fixed_quantity: Required.
        :paramtype fixed_quantity: bool
        :keyword used_quantity:
        :paramtype used_quantity: float
        :keyword unit:
        :paramtype unit: str
        """
        super(WorkorderMaterialDto, self).__init__(**kwargs)
        self.material_line = kwargs.get('material_line', None)
        self.status = kwargs['status']
        self.material = kwargs['material']
        self.quantity_per_part = kwargs['quantity_per_part']
        self.fixed_quantity = kwargs['fixed_quantity']
        self.used_quantity = kwargs.get('used_quantity', None)
        self.unit = kwargs.get('unit', None)


class WorkorderOperationDto(msrest.serialization.Model):
    """WorkorderOperationDto.

    All required parameters must be populated in order to send to Azure.

    :ivar operation: Required.
    :vartype operation: int
    :ivar description:
    :vartype description: str
    :ivar planned_setup_time: Required.
    :vartype planned_setup_time: float
    :ivar planned_production_time_per_part: Required.
    :vartype planned_production_time_per_part: float
    :ivar fixed_time:
    :vartype fixed_time: bool
    :ivar resource: Required.
    :vartype resource: ~ignos.api.client.models.ResourceDto
    :ivar planned_start:
    :vartype planned_start: ~datetime.datetime
    :ivar planned_end:
    :vartype planned_end: ~datetime.datetime
    :ivar status: Required. Possible values include: "NotReady", "Ready", "Ongoing", "Completed".
    :vartype status: str or ~ignos.api.client.models.OperationStatus
    :ivar produced_quantity: Required.
    :vartype produced_quantity: float
    :ivar scrapped_quantity: Required.
    :vartype scrapped_quantity: float
    :ivar used_production_time: Required.
    :vartype used_production_time: float
    :ivar used_setup_time: Required.
    :vartype used_setup_time: float
    :ivar materials: Required.
    :vartype materials: list[~ignos.api.client.models.WorkorderMaterialDto]
    """

    _validation = {
        'operation': {'required': True},
        'planned_setup_time': {'required': True},
        'planned_production_time_per_part': {'required': True},
        'resource': {'required': True},
        'status': {'required': True},
        'produced_quantity': {'required': True},
        'scrapped_quantity': {'required': True},
        'used_production_time': {'required': True},
        'used_setup_time': {'required': True},
        'materials': {'required': True},
    }

    _attribute_map = {
        'operation': {'key': 'operation', 'type': 'int'},
        'description': {'key': 'description', 'type': 'str'},
        'planned_setup_time': {'key': 'plannedSetupTime', 'type': 'float'},
        'planned_production_time_per_part': {'key': 'plannedProductionTimePerPart', 'type': 'float'},
        'fixed_time': {'key': 'fixedTime', 'type': 'bool'},
        'resource': {'key': 'resource', 'type': 'ResourceDto'},
        'planned_start': {'key': 'plannedStart', 'type': 'iso-8601'},
        'planned_end': {'key': 'plannedEnd', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'produced_quantity': {'key': 'producedQuantity', 'type': 'float'},
        'scrapped_quantity': {'key': 'scrappedQuantity', 'type': 'float'},
        'used_production_time': {'key': 'usedProductionTime', 'type': 'float'},
        'used_setup_time': {'key': 'usedSetupTime', 'type': 'float'},
        'materials': {'key': 'materials', 'type': '[WorkorderMaterialDto]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword operation: Required.
        :paramtype operation: int
        :keyword description:
        :paramtype description: str
        :keyword planned_setup_time: Required.
        :paramtype planned_setup_time: float
        :keyword planned_production_time_per_part: Required.
        :paramtype planned_production_time_per_part: float
        :keyword fixed_time:
        :paramtype fixed_time: bool
        :keyword resource: Required.
        :paramtype resource: ~ignos.api.client.models.ResourceDto
        :keyword planned_start:
        :paramtype planned_start: ~datetime.datetime
        :keyword planned_end:
        :paramtype planned_end: ~datetime.datetime
        :keyword status: Required. Possible values include: "NotReady", "Ready", "Ongoing",
         "Completed".
        :paramtype status: str or ~ignos.api.client.models.OperationStatus
        :keyword produced_quantity: Required.
        :paramtype produced_quantity: float
        :keyword scrapped_quantity: Required.
        :paramtype scrapped_quantity: float
        :keyword used_production_time: Required.
        :paramtype used_production_time: float
        :keyword used_setup_time: Required.
        :paramtype used_setup_time: float
        :keyword materials: Required.
        :paramtype materials: list[~ignos.api.client.models.WorkorderMaterialDto]
        """
        super(WorkorderOperationDto, self).__init__(**kwargs)
        self.operation = kwargs['operation']
        self.description = kwargs.get('description', None)
        self.planned_setup_time = kwargs['planned_setup_time']
        self.planned_production_time_per_part = kwargs['planned_production_time_per_part']
        self.fixed_time = kwargs.get('fixed_time', None)
        self.resource = kwargs['resource']
        self.planned_start = kwargs.get('planned_start', None)
        self.planned_end = kwargs.get('planned_end', None)
        self.status = kwargs['status']
        self.produced_quantity = kwargs['produced_quantity']
        self.scrapped_quantity = kwargs['scrapped_quantity']
        self.used_production_time = kwargs['used_production_time']
        self.used_setup_time = kwargs['used_setup_time']
        self.materials = kwargs['materials']


class WorkorderOperationEventDto(msrest.serialization.Model):
    """WorkorderOperationEventDto.

    All required parameters must be populated in order to send to Azure.

    :ivar event_id: Required.
    :vartype event_id: str
    :ivar external_id:
    :vartype external_id: str
    :ivar workorder: Required.
    :vartype workorder: str
    :ivar operation: Required.
    :vartype operation: int
    :ivar start_time: Required.
    :vartype start_time: ~datetime.datetime
    :ivar is_setup: Required.
    :vartype is_setup: bool
    :ivar employee:
    :vartype employee: ~ignos.api.client.models.EmployeeDto
    :ivar resource_id: Required.
    :vartype resource_id: str
    :ivar description:
    :vartype description: str
    :ivar part:
    :vartype part: ~ignos.api.client.models.PartDto
    """

    _validation = {
        'event_id': {'required': True},
        'workorder': {'required': True},
        'operation': {'required': True},
        'start_time': {'required': True},
        'is_setup': {'required': True},
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'event_id': {'key': 'eventId', 'type': 'str'},
        'external_id': {'key': 'externalId', 'type': 'str'},
        'workorder': {'key': 'workorder', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'int'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'is_setup': {'key': 'isSetup', 'type': 'bool'},
        'employee': {'key': 'employee', 'type': 'EmployeeDto'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'part': {'key': 'part', 'type': 'PartDto'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword event_id: Required.
        :paramtype event_id: str
        :keyword external_id:
        :paramtype external_id: str
        :keyword workorder: Required.
        :paramtype workorder: str
        :keyword operation: Required.
        :paramtype operation: int
        :keyword start_time: Required.
        :paramtype start_time: ~datetime.datetime
        :keyword is_setup: Required.
        :paramtype is_setup: bool
        :keyword employee:
        :paramtype employee: ~ignos.api.client.models.EmployeeDto
        :keyword resource_id: Required.
        :paramtype resource_id: str
        :keyword description:
        :paramtype description: str
        :keyword part:
        :paramtype part: ~ignos.api.client.models.PartDto
        """
        super(WorkorderOperationEventDto, self).__init__(**kwargs)
        self.event_id = kwargs['event_id']
        self.external_id = kwargs.get('external_id', None)
        self.workorder = kwargs['workorder']
        self.operation = kwargs['operation']
        self.start_time = kwargs['start_time']
        self.is_setup = kwargs['is_setup']
        self.employee = kwargs.get('employee', None)
        self.resource_id = kwargs['resource_id']
        self.description = kwargs.get('description', None)
        self.part = kwargs.get('part', None)
