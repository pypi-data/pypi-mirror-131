[tool.poetry]
name = "graia-ariadne"
version = "0.5.0-a5"
description = "Another elegant framework for mirai and mirai-api-http v2."
authors = [
    "BlueGlassBlock <blueglassblock@outlook.com>",
    "GreyElaina <GreyElaina@outlook.com>"
]
packages = [{ include = "graia", from = "src" }]
readme = "README.md"
repository = "https://github.com/GraiaProject/Ariadne"
homepage = "https://graia.readthedocs.io/zh_CN/latest"

[[tool.poetry.source]]
name = "tuna-tsinghua"
default = false
url = "https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/"

[[tool.poetry.source]]
name = "sustech"
default = false
url = "https://mirrors.sustech.edu.cn/pypi/simple/"

[[tool.poetry.source]]
name = "aliyun"
default = false
url = "https://mirrors.aliyun.com/pypi/simple/"

[[tool.poetry.source]]
name = "tencent-cloud"
default = false
url = "https://mirrors.cloud.tencent.com/pypi/simple"

[[tool.poetry.source]]
name = "netease"
default = false
url = "https://mirrors.163.com/pypi/simple/"

[tool.poetry.dependencies]
python = "^3.8"
graia-broadcast = ">=0.14.4"
aiohttp = "^3.7.4"
pydantic = "^1.8.2"
yarl = "^1.7"
loguru = "^0.5"
typing-extensions = "^3.10.0"
prompt-toolkit = "^3.0.24"
arclet-alconna = { version = "^0.3.1", optional = true }
graia-scheduler = { version = "^0.0.6", optional = true }
graia-saya = { version = "^0.0.13", optional = true }

[tool.poetry.extras]
alconna = ["arclet-alconna"]
full = ["graia-saya", "graia-scheduler"]
dev = [
    "devtools",
    "objgraph",
    "ptpython",
    "pydeps",
    "pre-commit",
    "requests",
    "yappi",
]
qc = ["pytest", "coverage", "flake8", "black", "coverage-asyncio"]

[tool.poetry.dev-dependencies]
black = { version = ">=21.10b0", optional = true }
isort = { version = ">=5.9.3", optional = true }
pytest = { version = "^6.2", optional = true }
coverage = { version = "^6.2", optional = true }
flake8 = { version = "^4.0", optional = true }
pytest-asyncio = { version = "^0.16.0", optional = true }
mkdocs-material = ">=8.1.1"
pdoc = "^8.0"
devtools = { version = ">= 0.8", optional = true }
objgraph = { version = ">= 3.5", optional = true }
ptpython = { version = ">= 3.0", optional = true }
pydeps = { version = "^1.10", optional = true }
pre-commit = { version = "^2.16", optional = true }
requests = { version = "^2.26", optional = true }
yappi = { version = "^1.3.3", optional = true }

[tool.isort]
profile = "black"

[tool.black]
line-length = 110
target-version = ['py39']

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
branch = true
omit = ["*/test/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # standard pragma
    "pragma: no cover",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if (typing\\.)?TYPE_CHECKING( is True)?:",
    "\\.\\.\\.",
    "pass",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain overload method / functions
    "@(typing\\.)?overload"
]
