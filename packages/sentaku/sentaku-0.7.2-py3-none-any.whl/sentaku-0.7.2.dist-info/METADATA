Metadata-Version: 2.1
Name: sentaku
Version: 0.7.2
Summary: variadic ux implementation for testing
Home-page: https://github.com/RonnyPfannschmidt/Sentaku
Author: RonnyPfannschmidt
Author-email: opensource@ronnypfannschmidt.de
License: MPLv2
Keywords: testing
Platform: UNKNOWN
Classifier: Topic :: Utilities
Classifier: License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Intended Audience :: Developers
Classifier: Development Status :: 4 - Beta
Description-Content-Type: text/x-rst
License-File: LICENSE.rst
Requires-Dist: attrs (>=19.0.0)
Requires-Dist: dectate (>=0.12)
Provides-Extra: docs
Requires-Dist: sphinx ; extra == 'docs'
Requires-Dist: requests ; extra == 'docs'
Requires-Dist: selenium ; extra == 'docs'
Provides-Extra: examples
Requires-Dist: selenium ; extra == 'examples'
Provides-Extra: test
Requires-Dist: pytest ; extra == 'test'

About Sentaku
==============

Sentaku_ is a python library that allows objects to dynamically choose their implementation.
Sentaku_ is the Japanese word for 'choice'.

With Sentaku_ it is possible to describe the elements of the applications you interact with
and the actions/attributes they have.
Sentaku_ takes care of choosing the implementation of the actions/attributes.


Installing
----------

::

	pip install sentaku



Use cases
-----------

A common use for such a system is testing various layers of an application with the same code,
as well as using different layers of an application for setup/teardown and for concise acceptance-tests.


A typical use case is testing your modern html5 application.
Such an application usually consists of different layers.

1. The internal back-end API
2. A rich front-end
3. A REST API
4. APIs that directly interact with other services the application uses

When doing test setup/teardown it is
desirable to run against the fast back-end API or REST API,
while when running the actual acceptance/system tests
it is more desirable to run against the rich user interface or the REST API.

.. _Sentaku: http://pypi.python.org/pypi/sentaku


