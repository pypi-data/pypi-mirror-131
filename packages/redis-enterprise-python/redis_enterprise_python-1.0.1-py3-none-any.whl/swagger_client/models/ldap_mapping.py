# coding: utf-8

"""
    Redis Enterprise API

    REST API Specifications[¶](#rest-api-specifications \"Permalink to this headline\") =================================================================================  Key Concepts[¶](#key-concepts \"Permalink to this headline\") -----------------------------------------------------------  ### Clusters[¶](#clusters \"Permalink to this headline\")  Redis Labs clusters are a set of nodes, typically two or more, providing database services. Clusters are inherently multi-tenant, and a single cluster can manage multiple databases accessed through individual endpoints.  Protocol and Headers[¶](#protocol-and-headers \"Permalink to this headline\") ---------------------------------------------------------------------------  ### JSON Requests and Responses[¶](#json-requests-and-responses \"Permalink to this headline\")  The Redis Labs REST API uses the JavaScript Object Notation (JSON) for requests and responses.  Some responses may have an empty body, but indicate the response with standard HTTP codes. For more information, see RFC 4627 ([http://www.ietf.org/rfc/rfc4627.txt](http://www.ietf.org/rfc/rfc4627.txt)) and www.json.org.  Both requests and responses may include zero or more objects.  In case the request is for a single entity, the response shall return a single JSON object, or none. In case the request if for a list of entities, the response shall return a single JSON array with 0 or more elements.  Requests may be delivered with some JSON object fields missing. In this case, these fields will be assigned default values (often indicating they are not in use).  ### Request Headers[¶](#request-headers \"Permalink to this headline\")  The Redis Labs REST API supports the following HTTP headers:  | Header | Supported/Required Values | |---|---| | Accept | application/json | | Content-Length | Length (in bytes) of request message. | | Content-Type | application/json |   ### Response Headers[¶](#response-headers \"Permalink to this headline\")  The Redis Labs REST API supports the following HTTP headers:  | Header | Supported/Required Values | |---|---| | Content-Type | application/json | | Content-Length | Length (in bytes) of request message. |   API Versions[¶](#api-versions \"Permalink to this headline\") -----------------------------------------------------------  All RLEC API operations are versioned, in order to minimize the impact of backwards-incompatible API changes and to coordinate between different versions operating in parallel.  Authentication[¶](#authentication \"Permalink to this headline\") ---------------------------------------------------------------  Authentication to RLEC API occurs via [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Provide your RLEC username and password as the basic auth credentials.  All calls must be made over SSL, to port 9443.  Example Request:  ```bash curl \\-u \"demo@redislabs.com:password\" https://localhost:9443/v1/bdbs ```  Common Responses[¶](#common-responses \"Permalink to this headline\") -------------------------------------------------------------------  The following are common responses which may be returned in some cases regardless of any specific request.  | Response | Condition / Required handling | |---|---| | 503 (Service Unavailable) | Contacted node is currently not a member of any active cluster. | | 505 (HTTP Version Not Supported) | An unsupported X-API-Version was used, see API Versions above. |   # noqa: E501

    OpenAPI spec version: 6.2.4-55
    Contact: matthew.royal@redis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LdapMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'action_uid': 'str',
        'bdbs_email_alerts': 'AnyOfldapMappingBdbsEmailAlerts',
        'cluster_email_alerts': 'bool',
        'dn': 'str',
        'email': 'str',
        'email_alerts': 'bool',
        'name': 'str',
        'role_uids': 'list[int]',
        'uid': 'int'
    }

    attribute_map = {
        'account_id': 'account_id',
        'action_uid': 'action_uid',
        'bdbs_email_alerts': 'bdbs_email_alerts',
        'cluster_email_alerts': 'cluster_email_alerts',
        'dn': 'dn',
        'email': 'email',
        'email_alerts': 'email_alerts',
        'name': 'name',
        'role_uids': 'role_uids',
        'uid': 'uid'
    }

    def __init__(self, account_id=None, action_uid=None, bdbs_email_alerts=None, cluster_email_alerts=None, dn=None, email=None, email_alerts=True, name=None, role_uids=None, uid=None):  # noqa: E501
        """LdapMapping - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._action_uid = None
        self._bdbs_email_alerts = None
        self._cluster_email_alerts = None
        self._dn = None
        self._email = None
        self._email_alerts = None
        self._name = None
        self._role_uids = None
        self._uid = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if action_uid is not None:
            self.action_uid = action_uid
        if bdbs_email_alerts is not None:
            self.bdbs_email_alerts = bdbs_email_alerts
        if cluster_email_alerts is not None:
            self.cluster_email_alerts = cluster_email_alerts
        if dn is not None:
            self.dn = dn
        if email is not None:
            self.email = email
        if email_alerts is not None:
            self.email_alerts = email_alerts
        if name is not None:
            self.name = name
        if role_uids is not None:
            self.role_uids = role_uids
        if uid is not None:
            self.uid = uid

    @property
    def account_id(self):
        """Gets the account_id of this LdapMapping.  # noqa: E501

        SM account ID  # noqa: E501

        :return: The account_id of this LdapMapping.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this LdapMapping.

        SM account ID  # noqa: E501

        :param account_id: The account_id of this LdapMapping.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def action_uid(self):
        """Gets the action_uid of this LdapMapping.  # noqa: E501

        Action uid. If exists - progress can be tracked by the GET /actions/<uid> API  # noqa: E501

        :return: The action_uid of this LdapMapping.  # noqa: E501
        :rtype: str
        """
        return self._action_uid

    @action_uid.setter
    def action_uid(self, action_uid):
        """Sets the action_uid of this LdapMapping.

        Action uid. If exists - progress can be tracked by the GET /actions/<uid> API  # noqa: E501

        :param action_uid: The action_uid of this LdapMapping.  # noqa: E501
        :type: str
        """

        self._action_uid = action_uid

    @property
    def bdbs_email_alerts(self):
        """Gets the bdbs_email_alerts of this LdapMapping.  # noqa: E501

        UIDs of databases that associated email will receive alerts for.  # noqa: E501

        :return: The bdbs_email_alerts of this LdapMapping.  # noqa: E501
        :rtype: AnyOfldapMappingBdbsEmailAlerts
        """
        return self._bdbs_email_alerts

    @bdbs_email_alerts.setter
    def bdbs_email_alerts(self, bdbs_email_alerts):
        """Sets the bdbs_email_alerts of this LdapMapping.

        UIDs of databases that associated email will receive alerts for.  # noqa: E501

        :param bdbs_email_alerts: The bdbs_email_alerts of this LdapMapping.  # noqa: E501
        :type: AnyOfldapMappingBdbsEmailAlerts
        """

        self._bdbs_email_alerts = bdbs_email_alerts

    @property
    def cluster_email_alerts(self):
        """Gets the cluster_email_alerts of this LdapMapping.  # noqa: E501

        Activate cluster email alerts for an associated email.  # noqa: E501

        :return: The cluster_email_alerts of this LdapMapping.  # noqa: E501
        :rtype: bool
        """
        return self._cluster_email_alerts

    @cluster_email_alerts.setter
    def cluster_email_alerts(self, cluster_email_alerts):
        """Sets the cluster_email_alerts of this LdapMapping.

        Activate cluster email alerts for an associated email.  # noqa: E501

        :param cluster_email_alerts: The cluster_email_alerts of this LdapMapping.  # noqa: E501
        :type: bool
        """

        self._cluster_email_alerts = cluster_email_alerts

    @property
    def dn(self):
        """Gets the dn of this LdapMapping.  # noqa: E501

        An LDAP group's distinguished name  # noqa: E501

        :return: The dn of this LdapMapping.  # noqa: E501
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this LdapMapping.

        An LDAP group's distinguished name  # noqa: E501

        :param dn: The dn of this LdapMapping.  # noqa: E501
        :type: str
        """

        self._dn = dn

    @property
    def email(self):
        """Gets the email of this LdapMapping.  # noqa: E501

        email address that (if set) is used for alerts  # noqa: E501

        :return: The email of this LdapMapping.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this LdapMapping.

        email address that (if set) is used for alerts  # noqa: E501

        :param email: The email of this LdapMapping.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def email_alerts(self):
        """Gets the email_alerts of this LdapMapping.  # noqa: E501

        Activate email alerts for an associated email.  # noqa: E501

        :return: The email_alerts of this LdapMapping.  # noqa: E501
        :rtype: bool
        """
        return self._email_alerts

    @email_alerts.setter
    def email_alerts(self, email_alerts):
        """Sets the email_alerts of this LdapMapping.

        Activate email alerts for an associated email.  # noqa: E501

        :param email_alerts: The email_alerts of this LdapMapping.  # noqa: E501
        :type: bool
        """

        self._email_alerts = email_alerts

    @property
    def name(self):
        """Gets the name of this LdapMapping.  # noqa: E501

        Role's name  # noqa: E501

        :return: The name of this LdapMapping.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LdapMapping.

        Role's name  # noqa: E501

        :param name: The name of this LdapMapping.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def role_uids(self):
        """Gets the role_uids of this LdapMapping.  # noqa: E501

        List of role uids associated with the LDAP group  # noqa: E501

        :return: The role_uids of this LdapMapping.  # noqa: E501
        :rtype: list[int]
        """
        return self._role_uids

    @role_uids.setter
    def role_uids(self, role_uids):
        """Sets the role_uids of this LdapMapping.

        List of role uids associated with the LDAP group  # noqa: E501

        :param role_uids: The role_uids of this LdapMapping.  # noqa: E501
        :type: list[int]
        """

        self._role_uids = role_uids

    @property
    def uid(self):
        """Gets the uid of this LdapMapping.  # noqa: E501

        LDAP-mapping's unique uid.  # noqa: E501

        :return: The uid of this LdapMapping.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this LdapMapping.

        LDAP-mapping's unique uid.  # noqa: E501

        :param uid: The uid of this LdapMapping.  # noqa: E501
        :type: int
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
