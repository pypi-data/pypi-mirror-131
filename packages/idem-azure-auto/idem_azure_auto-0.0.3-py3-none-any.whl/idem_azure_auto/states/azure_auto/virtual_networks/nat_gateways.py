"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__


"""
from typing import Any
from typing import Dict

from idem_azure_auto.helpers.exc import DescribeError
from idem_azure_auto.helpers.returns import StateReturn


async def present(
    hub,
    ctx,
    name: str,
    nat_gateway_name: str,
    resource_group_name: str,
    parameters: dict = {},
) -> StateReturn:
    r"""
    **Autogenerated function**

    Create or update Nat Gateways

    Args:
        name(str): The identifier for this state.
        nat_gateway_name(str): The name of the nat gateway.
        resource_group_name(str): The name of the resource group.
        parameters(dict, optional): API request payload parameters. Defaults to {}.

    Returns:
        StateReturn

    Examples:

        .. code-block:: sls

            resource_is_present:
              azure_auto.virtual_networks.nat_gateways.present:
                - name: value
                - nat_gateway_name: value
                - resource_group_name: value
    """

    subscription_id = ctx.acct.subscription_id
    response_get = await hub.exec.request.json.get(
        ctx,
        url=f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.Network/natGateways/{nat_gateway_name}?api-version=2021-03-01",
        success_codes=[200],
        headers=ctx.acct.headers,
    )

    if not response_get["status"]:
        if ctx.get("test", False):
            return StateReturn(
                name=name,
                result=True,
                comment="Would create azure.virtual_networks.nat_gateways",
            )

        if response_get["status_code"] == 404:
            # PUT operation to create a resource
            response_put = await hub.exec.request.json.put(
                ctx,
                url=f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.Network/natGateways/{nat_gateway_name}?api-version=2021-03-01",
                success_codes=[200, 201],
                headers=ctx.acct.headers,
                json=parameters,
            )

            if not response_put["status"]:
                hub.log.debug(
                    f"Could not create Nat Gateways {response_put['comment']}"
                )
                return StateReturn(
                    name=name, result=False, comment=response_put["comment"]
                )

            return StateReturn(
                name=name,
                result=True,
                old_obj=None,
                new_obj=response_put["ret"],
                comment=response_put["comment"],
            )
        else:
            hub.log.debug(f"Could not get Nat Gateways {response_get['comment']}")
            return StateReturn(name=name, result=False, comment=response_get["comment"])
    else:
        # PATCH operation to update a resource
        patch_parameters = {"tags": "tags"}
        existing_resource = response_get["ret"]
        new_parameters = hub.tool.azure.utils.patch_json_content(
            patch_parameters, parameters
        )
        if ctx.get("test", False):
            return StateReturn(
                name=name,
                result=True,
                comment=f"Would update azure.virtual_networks.nat_gateways with parameters: {new_parameters}",
            )

        response_patch = await hub.exec.request.json.patch(
            ctx,
            url=f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.Network/natGateways/{nat_gateway_name}?api-version=2021-03-01",
            success_codes=[200],
            headers=ctx.acct.headers,
            json=new_parameters,
        )

        if not response_patch["status"]:
            hub.log.debug(f"Could not update Nat Gateways {response_patch['comment']}")
            return StateReturn(
                name=name, result=False, comment=response_patch["comment"]
            )

        return StateReturn(
            name=name,
            result=True,
            old_obj=existing_resource,
            new_obj=response_patch["ret"],
            comment=response_patch["comment"],
        )


async def absent(
    hub, ctx, name: str, nat_gateway_name: str, resource_group_name: str
) -> StateReturn:
    r"""
    **Autogenerated function**

    Delete Nat Gateways

    Args:
        name(str): The identifier for this state.
        nat_gateway_name(str): The name of the nat gateway.
        resource_group_name(str): The name of the resource group.

    Returns:
        StateReturn

    Examples:

        .. code-block:: sls

            resource_is_absent:
              azure_auto.virtual_networks.nat_gateways.absent:
                - name: value
                - nat_gateway_name: value
                - resource_group_name: value
    """

    subscription_id = ctx.acct.subscription_id
    response_get = await hub.exec.request.json.get(
        ctx,
        url=f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.Network/natGateways/{nat_gateway_name}?api-version=2021-03-01",
        success_codes=[200],
        headers=ctx.acct.headers,
    )
    if response_get["status"]:
        if ctx.get("test", False):
            return StateReturn(
                name=name,
                result=True,
                comment="Would delete azure.virtual_networks.nat_gateways",
            )

        existing_resource = response_get["ret"]
        response_delete = await hub.exec.request.raw.delete(
            ctx,
            url=f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group_name}/providers/Microsoft.Network/natGateways/{nat_gateway_name}?api-version=2021-03-01",
            success_codes=[200, 202],
            headers=ctx.acct.headers,
        )

        if not response_delete["status"]:
            hub.log.debug(f"Could not delete Nat Gateways {response_delete['comment']}")
            return StateReturn(
                name=name, result=False, comment=response_delete["comment"]
            )

        return StateReturn(
            name=name,
            result=True,
            old_obj=existing_resource,
            new_obj={},
            comment=response_delete["comment"],
        )
    elif response_get["status_code"] == 404:
        # If Azure returns 'Not Found' error, it means the resource has been absent.
        return StateReturn(
            name=name,
            result=True,
            old_obj=None,
            new_obj=None,
            comment=f"'{name}' already absent",
        )
    else:
        hub.log.debug(f"Could not get Nat Gateways {response_get['comment']}")
        return StateReturn(name=name, result=False, comment=response_get["comment"])


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    List all Nat Gateways under the same subscription


    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe azure_auto.virtual_networks.nat_gateways
    """

    result = {}
    subscription_id = ctx.acct.subscription_id
    try:
        async for page_result in hub.tool.azure.request.paginate(
            ctx,
            url=f"https://management.azure.com/subscriptions/{subscription_id}/providers/Microsoft.Network/natGateways?api-version=2021-03-01",
            success_codes=[200],
            headers=ctx.acct.headers,
        ):
            resource_list = page_result.get("value", None)
            if resource_list:
                for resource in resource_list:
                    result[resource["id"]] = {
                        f"azure.virtual_networks.nat_gateways.present": resource
                    }
    except ValueError as e:
        raise DescribeError(f"Error on describing Nat Gateways: {str(e)}")
    return result
