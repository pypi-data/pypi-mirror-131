"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__


"""
from collections import OrderedDict
from typing import Any
from typing import Dict

from idem_azure_auto.helpers.exc import DescribeError
from idem_azure_auto.helpers.returns import StateReturn

__contracts__ = ["resource"]


async def present(
    hub, ctx, name: str, scope: str, role_definition_id: str, parameters: dict = {}
) -> StateReturn:
    r"""
    **Autogenerated function**

    Create or update Role Definitions

    Args:
        name(str): The identifier for this state.
        scope(str): The scope of the role definition.
        role_definition_id(str): The ID of the role definition.
        parameters(dict, optional): API request payload parameters. Defaults to {}.

    Returns:
        StateReturn

    Examples:

        .. code-block:: sls

            resource_is_present:
              azure_auto.authorization.role_definitions.present:
                - name: value
                - scope: value
                - role_definition_id: value
    """

    response_get = await hub.exec.request.json.get(
        ctx,
        url=f"https://management.azure.com/{scope}/providers/Microsoft.Authorization/roleDefinitions/{role_definition_id}?api-version=2015-07-01",
        success_codes=[200],
        headers=ctx.acct.headers,
    )

    if not response_get["result"]:
        if ctx.get("test", False):
            return StateReturn(
                name=name,
                result=True,
                comment="Would create azure.authorization.role_definitions",
            )

        if response_get["status"] == 404:
            # PUT operation to create a resource
            response_put = await hub.exec.request.json.put(
                ctx,
                url=f"https://management.azure.com/{scope}/providers/Microsoft.Authorization/roleDefinitions/{role_definition_id}?api-version=2015-07-01",
                success_codes=[201],
                headers=ctx.acct.headers,
                json=parameters,
            )

            if not response_put["result"]:
                hub.log.debug(
                    f"Could not create Role Definitions {response_put['comment']} {response_put['ret']}"
                )
                return StateReturn(
                    name=name,
                    result=False,
                    comment=response_put["comment"],
                    error=response_put["ret"],
                )

            return StateReturn(
                name=name,
                result=True,
                old_obj=None,
                new_obj=response_put["ret"],
                comment=response_put["comment"],
            )
        else:
            hub.log.debug(
                f"Could not get Role Definitions {response_get['comment']} {response_get['ret']}"
            )
            return StateReturn(
                name=name,
                result=False,
                comment=response_get["comment"],
                error=response_get["ret"],
            )

    # No update operation on Role Definitions since Azure does not have PATCH api on Role Definitions
    return StateReturn(
        name=name,
        result=True,
        old_obj=response_get["ret"],
        new_obj=response_get["ret"],
        comment=response_get["comment"],
    )


async def absent(
    hub, ctx, name: str, scope: str, role_definition_id: str
) -> StateReturn:
    r"""
    **Autogenerated function**

    Delete Role Definitions

    Args:
        name(str): The identifier for this state.
        scope(str): The scope of the role definition.
        role_definition_id(str): The ID of the role definition to delete.

    Returns:
        StateReturn

    Examples:

        .. code-block:: sls

            resource_is_absent:
              azure_auto.authorization.role_definitions.absent:
                - name: value
                - scope: value
                - role_definition_id: value
    """

    response_get = await hub.exec.request.json.get(
        ctx,
        url=f"https://management.azure.com/{scope}/providers/Microsoft.Authorization/roleDefinitions/{role_definition_id}?api-version=2015-07-01",
        success_codes=[200],
        headers=ctx.acct.headers,
    )
    if response_get["result"]:
        if ctx.get("test", False):
            return StateReturn(
                name=name,
                result=True,
                comment="Would delete azure.authorization.role_definitions",
            )

        existing_resource = response_get["ret"]
        response_delete = await hub.exec.request.raw.delete(
            ctx,
            url=f"https://management.azure.com/{scope}/providers/Microsoft.Authorization/roleDefinitions/{role_definition_id}?api-version=2015-07-01",
            success_codes=[200, 204],
            headers=ctx.acct.headers,
        )

        if not response_delete["result"]:
            hub.log.debug(
                f"Could not delete Role Definitions {response_delete['comment']} {response_delete['ret']}"
            )
            return StateReturn(
                name=name,
                result=False,
                comment=response_delete["comment"],
                error=response_delete["ret"],
            )

        return StateReturn(
            name=name,
            result=True,
            old_obj=existing_resource,
            new_obj={},
            comment=response_delete["comment"],
        )
    elif response_get["status"] == 404:
        # If Azure returns 'Not Found' error, it means the resource has been absent.
        return StateReturn(
            name=name,
            result=True,
            old_obj=None,
            new_obj=None,
            comment=f"'{name}' already absent",
        )
    else:
        hub.log.debug(
            f"Could not get Role Definitions {response_get['comment']} {response_get['ret']}"
        )
        return StateReturn(
            name=name,
            result=False,
            comment=response_get["comment"],
            error=response_get["ret"],
        )


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    List all Role Definitions under the same subscription


    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe azure.authorization.role_definitions
    """

    result = {}
    subscription_id = ctx.acct.subscription_id
    uri_parameters = OrderedDict({"roleDefinitions": "role_definition_id"})
    try:
        async for page_result in hub.tool.azure.request.paginate(
            ctx,
            url=f"https://management.azure.com/subscriptions/{subscription_id}/providers/Microsoft.Authorization/roleDefinitions?api-version=2015-07-01",
            success_codes=[200],
            headers=ctx.acct.headers,
        ):
            resource_list = page_result.get("value", None)
            if resource_list:
                for resource in resource_list:
                    uri_parameter_values = (
                        hub.tool.azure.utils.get_uri_parameter_value_from_uri(
                            resource["id"], uri_parameters
                        )
                    )
                    if uri_parameter_values is None:
                        uri_parameter_values = list()
                    uri_parameter_values.insert(
                        0, {"scope": f"subscriptions/{subscription_id}"}
                    )
                    result[resource["id"]] = {
                        f"azure.authorization.role_definitions.present": uri_parameter_values
                        + [{"parameters": resource}]
                    }
    except ValueError as e:
        raise DescribeError(f"Error on describing Role Definitions: {str(e)}")
    return result
