#!/usr/bin/env python
# ------------------------------------------------------------------------------------------------------%
# Created by "Thieu Nguyen" at 22:07, 07/04/2020                                                        %
#                                                                                                       %
#       Email:      nguyenthieu2102@gmail.com                                                           %
#       Homepage:   https://www.researchgate.net/profile/Thieu_Nguyen6                                  %
#       Github:     https://github.com/thieu1995                                                        %
#-------------------------------------------------------------------------------------------------------%

import numpy as np
from copy import deepcopy
from mealpy.optimizer import Optimizer


class BaseFA(Optimizer):
    """
        The original version of: Fireworks Algorithm (FA)
            (Fireworks algorithm for optimization)
        Link:
            DOI: https://doi.org/10.1007/978-3-642-13495-1_44
    """

    def __init__(self, problem, epoch=10000, pop_size=100, max_sparks=50, p_a=0.04, p_b=0.8, max_ea=40, m_sparks=5, **kwargs):
        """
        Args:
            problem ():
            epoch (int): maximum number of iterations, default = 10000
            pop_size (int): number of population size, default = 100
            max_sparks (int): parameter controlling the total number of sparks generated by the pop_size fireworks, default=50
            p_a (float): percent (const parameter), default=0.04
            p_b (float): percent (const parameter), default=0.8
            max_ea (int): maximum explosion amplitude, default=40
            m_sparks (int): number of sparks generated in each explosion generation, default=5
            **kwargs ():
        """
        super().__init__(problem, kwargs)
        self.nfe_per_epoch = pop_size
        self.sort_flag = False

        self.epoch = epoch
        self.pop_size = pop_size
        self.max_sparks = max_sparks
        self.p_a = p_a
        self.p_b = p_b
        self.max_ea = max_ea
        self.m_sparks = m_sparks

    def evolve(self, epoch):
        """
        Args:
            epoch (int): The current iteration
        """
        nfe_epoch = 0
        fit_list = np.array([agent[self.ID_FIT][self.ID_TAR] for agent in self.pop])
        fit_list = sorted(fit_list)

        pop_new = []
        for idx in range(0, self.pop_size):
            si = self.max_sparks * (fit_list[-1] - self.pop[idx][self.ID_FIT][self.ID_TAR] + self.EPSILON) / \
                 (self.pop_size * fit_list[-1] - np.sum(fit_list) + self.EPSILON)
            Ai = self.max_ea * (self.pop[idx][self.ID_FIT][self.ID_TAR] - fit_list[0] + self.EPSILON) / \
                 (np.sum(fit_list) - fit_list[0] + self.EPSILON)
            if si < self.p_a * self.max_sparks:
                si_ = int(round(self.p_a * self.max_sparks) + 1)
            elif si > self.p_b * self.m_sparks:
                si_ = int(round(self.p_b * self.max_sparks) + 1)
            else:
                si_ = int(round(si) + 1)

            ## Algorithm 1
            pop_new = []
            for j in range(0, si_):
                pos_new = deepcopy(self.pop[idx][self.ID_POS])
                list_idx = np.random.choice(range(0, self.problem.n_dims), round(np.random.uniform() * self.problem.n_dims), replace=False)
                displacement = Ai * np.random.uniform(-1, 1)
                pos_new[list_idx] = pos_new[list_idx] + displacement
                pos_new = np.where(np.logical_or(pos_new < self.problem.lb, pos_new > self.problem.ub),
                                   self.problem.lb + np.abs(pos_new) % (self.problem.ub - self.problem.lb), pos_new)
                pos_new = self.amend_position_faster(pos_new)
                pop_new.append([pos_new, None])
                nfe_epoch += 1
            pop_new = self.update_fitness_population(pop_new)

        for _ in range(0, self.m_sparks):
            idx = np.random.randint(0, self.pop_size)
            pos_new = deepcopy(self.pop[idx][self.ID_POS])
            list_idx = np.random.choice(range(0, self.problem.n_dims), round(np.random.uniform() * self.problem.n_dims), replace=False)
            pos_new[list_idx] = pos_new[list_idx] + np.random.normal(0, 1)  # Gaussian
            pos_new = np.where(np.logical_or(pos_new < self.problem.lb, pos_new > self.problem.ub), self.problem.lb + \
                               np.abs(pos_new) % (self.problem.ub - self.problem.lb), pos_new)
            pos_new = self.amend_position_faster(pos_new)
            pop_new.append([pos_new, None])
            nfe_epoch += 1
        pop_new = self.update_fitness_population(pop_new)

        ## Update the global best
        self.pop = self.get_sorted_strim_population(pop_new + self.pop, self.pop_size)
