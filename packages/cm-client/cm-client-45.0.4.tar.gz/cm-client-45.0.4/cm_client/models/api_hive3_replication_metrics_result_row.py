# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v45</h1>       <p>Introduced in Cloudera Manager 7.5.4</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.5.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHive3ReplicationMetricsResultRow(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scheduled_execution_id': 'int',
        'policy': 'str',
        'dump_execution_id': 'int',
        'metadata': 'ApiHive3ReplicationMetricsMetadata',
        'progress': 'ApiHive3ReplicationMetricsProgress',
        'start_date': 'str',
        'end_date': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'scheduled_execution_id': 'scheduledExecutionId',
        'policy': 'policy',
        'dump_execution_id': 'dumpExecutionId',
        'metadata': 'metadata',
        'progress': 'progress',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'error_message': 'errorMessage'
    }

    def __init__(self, scheduled_execution_id=None, policy=None, dump_execution_id=None, metadata=None, progress=None, start_date=None, end_date=None, error_message=None):
        """
        ApiHive3ReplicationMetricsResultRow - a model defined in Swagger
        """

        self._scheduled_execution_id = None
        self._policy = None
        self._dump_execution_id = None
        self._metadata = None
        self._progress = None
        self._start_date = None
        self._end_date = None
        self._error_message = None

        if scheduled_execution_id is not None:
          self.scheduled_execution_id = scheduled_execution_id
        if policy is not None:
          self.policy = policy
        if dump_execution_id is not None:
          self.dump_execution_id = dump_execution_id
        if metadata is not None:
          self.metadata = metadata
        if progress is not None:
          self.progress = progress
        if start_date is not None:
          self.start_date = start_date
        if end_date is not None:
          self.end_date = end_date
        if error_message is not None:
          self.error_message = error_message

    @property
    def scheduled_execution_id(self):
        """
        Gets the scheduled_execution_id of this ApiHive3ReplicationMetricsResultRow.
        

        :return: The scheduled_execution_id of this ApiHive3ReplicationMetricsResultRow.
        :rtype: int
        """
        return self._scheduled_execution_id

    @scheduled_execution_id.setter
    def scheduled_execution_id(self, scheduled_execution_id):
        """
        Sets the scheduled_execution_id of this ApiHive3ReplicationMetricsResultRow.
        

        :param scheduled_execution_id: The scheduled_execution_id of this ApiHive3ReplicationMetricsResultRow.
        :type: int
        """

        self._scheduled_execution_id = scheduled_execution_id

    @property
    def policy(self):
        """
        Gets the policy of this ApiHive3ReplicationMetricsResultRow.
        

        :return: The policy of this ApiHive3ReplicationMetricsResultRow.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """
        Sets the policy of this ApiHive3ReplicationMetricsResultRow.
        

        :param policy: The policy of this ApiHive3ReplicationMetricsResultRow.
        :type: str
        """

        self._policy = policy

    @property
    def dump_execution_id(self):
        """
        Gets the dump_execution_id of this ApiHive3ReplicationMetricsResultRow.
        

        :return: The dump_execution_id of this ApiHive3ReplicationMetricsResultRow.
        :rtype: int
        """
        return self._dump_execution_id

    @dump_execution_id.setter
    def dump_execution_id(self, dump_execution_id):
        """
        Sets the dump_execution_id of this ApiHive3ReplicationMetricsResultRow.
        

        :param dump_execution_id: The dump_execution_id of this ApiHive3ReplicationMetricsResultRow.
        :type: int
        """

        self._dump_execution_id = dump_execution_id

    @property
    def metadata(self):
        """
        Gets the metadata of this ApiHive3ReplicationMetricsResultRow.
        

        :return: The metadata of this ApiHive3ReplicationMetricsResultRow.
        :rtype: ApiHive3ReplicationMetricsMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this ApiHive3ReplicationMetricsResultRow.
        

        :param metadata: The metadata of this ApiHive3ReplicationMetricsResultRow.
        :type: ApiHive3ReplicationMetricsMetadata
        """

        self._metadata = metadata

    @property
    def progress(self):
        """
        Gets the progress of this ApiHive3ReplicationMetricsResultRow.
        

        :return: The progress of this ApiHive3ReplicationMetricsResultRow.
        :rtype: ApiHive3ReplicationMetricsProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """
        Sets the progress of this ApiHive3ReplicationMetricsResultRow.
        

        :param progress: The progress of this ApiHive3ReplicationMetricsResultRow.
        :type: ApiHive3ReplicationMetricsProgress
        """

        self._progress = progress

    @property
    def start_date(self):
        """
        Gets the start_date of this ApiHive3ReplicationMetricsResultRow.
        

        :return: The start_date of this ApiHive3ReplicationMetricsResultRow.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this ApiHive3ReplicationMetricsResultRow.
        

        :param start_date: The start_date of this ApiHive3ReplicationMetricsResultRow.
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this ApiHive3ReplicationMetricsResultRow.
        

        :return: The end_date of this ApiHive3ReplicationMetricsResultRow.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this ApiHive3ReplicationMetricsResultRow.
        

        :param end_date: The end_date of this ApiHive3ReplicationMetricsResultRow.
        :type: str
        """

        self._end_date = end_date

    @property
    def error_message(self):
        """
        Gets the error_message of this ApiHive3ReplicationMetricsResultRow.
        

        :return: The error_message of this ApiHive3ReplicationMetricsResultRow.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this ApiHive3ReplicationMetricsResultRow.
        

        :param error_message: The error_message of this ApiHive3ReplicationMetricsResultRow.
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHive3ReplicationMetricsResultRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
