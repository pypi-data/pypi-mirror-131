# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v45</h1>       <p>Introduced in Cloudera Manager 7.5.4</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.5.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHive3ReplicationMetricsStage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'status': 'ApiHive3ReplicationMetricsStatus',
        'start_date': 'str',
        'end_date': 'str',
        'metrics': 'list[ApiHive3ReplicationMetric]',
        'error_log_path': 'str'
    }

    attribute_map = {
        'name': 'name',
        'status': 'status',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'metrics': 'metrics',
        'error_log_path': 'errorLogPath'
    }

    def __init__(self, name=None, status=None, start_date=None, end_date=None, metrics=None, error_log_path=None):
        """
        ApiHive3ReplicationMetricsStage - a model defined in Swagger
        """

        self._name = None
        self._status = None
        self._start_date = None
        self._end_date = None
        self._metrics = None
        self._error_log_path = None

        if name is not None:
          self.name = name
        if status is not None:
          self.status = status
        if start_date is not None:
          self.start_date = start_date
        if end_date is not None:
          self.end_date = end_date
        if metrics is not None:
          self.metrics = metrics
        if error_log_path is not None:
          self.error_log_path = error_log_path

    @property
    def name(self):
        """
        Gets the name of this ApiHive3ReplicationMetricsStage.
        

        :return: The name of this ApiHive3ReplicationMetricsStage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiHive3ReplicationMetricsStage.
        

        :param name: The name of this ApiHive3ReplicationMetricsStage.
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this ApiHive3ReplicationMetricsStage.
        

        :return: The status of this ApiHive3ReplicationMetricsStage.
        :rtype: ApiHive3ReplicationMetricsStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ApiHive3ReplicationMetricsStage.
        

        :param status: The status of this ApiHive3ReplicationMetricsStage.
        :type: ApiHive3ReplicationMetricsStatus
        """

        self._status = status

    @property
    def start_date(self):
        """
        Gets the start_date of this ApiHive3ReplicationMetricsStage.
        

        :return: The start_date of this ApiHive3ReplicationMetricsStage.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this ApiHive3ReplicationMetricsStage.
        

        :param start_date: The start_date of this ApiHive3ReplicationMetricsStage.
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this ApiHive3ReplicationMetricsStage.
        

        :return: The end_date of this ApiHive3ReplicationMetricsStage.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this ApiHive3ReplicationMetricsStage.
        

        :param end_date: The end_date of this ApiHive3ReplicationMetricsStage.
        :type: str
        """

        self._end_date = end_date

    @property
    def metrics(self):
        """
        Gets the metrics of this ApiHive3ReplicationMetricsStage.
        

        :return: The metrics of this ApiHive3ReplicationMetricsStage.
        :rtype: list[ApiHive3ReplicationMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """
        Sets the metrics of this ApiHive3ReplicationMetricsStage.
        

        :param metrics: The metrics of this ApiHive3ReplicationMetricsStage.
        :type: list[ApiHive3ReplicationMetric]
        """

        self._metrics = metrics

    @property
    def error_log_path(self):
        """
        Gets the error_log_path of this ApiHive3ReplicationMetricsStage.
        

        :return: The error_log_path of this ApiHive3ReplicationMetricsStage.
        :rtype: str
        """
        return self._error_log_path

    @error_log_path.setter
    def error_log_path(self, error_log_path):
        """
        Sets the error_log_path of this ApiHive3ReplicationMetricsStage.
        

        :param error_log_path: The error_log_path of this ApiHive3ReplicationMetricsStage.
        :type: str
        """

        self._error_log_path = error_log_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHive3ReplicationMetricsStage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
