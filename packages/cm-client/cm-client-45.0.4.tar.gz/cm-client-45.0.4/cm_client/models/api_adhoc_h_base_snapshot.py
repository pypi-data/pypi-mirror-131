# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v45</h1>       <p>Introduced in Cloudera Manager 7.5.4</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.5.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiAdhocHBaseSnapshot(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_account': 'str',
        'source_table': 'str',
        'source_scheduler_pool': 'str',
        'source_service': 'ApiServiceRef',
        'source_num_mappers': 'int'
    }

    attribute_map = {
        'source_account': 'sourceAccount',
        'source_table': 'sourceTable',
        'source_scheduler_pool': 'sourceSchedulerPool',
        'source_service': 'sourceService',
        'source_num_mappers': 'sourceNumMappers'
    }

    def __init__(self, source_account=None, source_table=None, source_scheduler_pool=None, source_service=None, source_num_mappers=None):
        """
        ApiAdhocHBaseSnapshot - a model defined in Swagger
        """

        self._source_account = None
        self._source_table = None
        self._source_scheduler_pool = None
        self._source_service = None
        self._source_num_mappers = None

        if source_account is not None:
          self.source_account = source_account
        if source_table is not None:
          self.source_table = source_table
        if source_scheduler_pool is not None:
          self.source_scheduler_pool = source_scheduler_pool
        if source_service is not None:
          self.source_service = source_service
        if source_num_mappers is not None:
          self.source_num_mappers = source_num_mappers

    @property
    def source_account(self):
        """
        Gets the source_account of this ApiAdhocHBaseSnapshot.
        

        :return: The source_account of this ApiAdhocHBaseSnapshot.
        :rtype: str
        """
        return self._source_account

    @source_account.setter
    def source_account(self, source_account):
        """
        Sets the source_account of this ApiAdhocHBaseSnapshot.
        

        :param source_account: The source_account of this ApiAdhocHBaseSnapshot.
        :type: str
        """

        self._source_account = source_account

    @property
    def source_table(self):
        """
        Gets the source_table of this ApiAdhocHBaseSnapshot.
        

        :return: The source_table of this ApiAdhocHBaseSnapshot.
        :rtype: str
        """
        return self._source_table

    @source_table.setter
    def source_table(self, source_table):
        """
        Sets the source_table of this ApiAdhocHBaseSnapshot.
        

        :param source_table: The source_table of this ApiAdhocHBaseSnapshot.
        :type: str
        """

        self._source_table = source_table

    @property
    def source_scheduler_pool(self):
        """
        Gets the source_scheduler_pool of this ApiAdhocHBaseSnapshot.
        

        :return: The source_scheduler_pool of this ApiAdhocHBaseSnapshot.
        :rtype: str
        """
        return self._source_scheduler_pool

    @source_scheduler_pool.setter
    def source_scheduler_pool(self, source_scheduler_pool):
        """
        Sets the source_scheduler_pool of this ApiAdhocHBaseSnapshot.
        

        :param source_scheduler_pool: The source_scheduler_pool of this ApiAdhocHBaseSnapshot.
        :type: str
        """

        self._source_scheduler_pool = source_scheduler_pool

    @property
    def source_service(self):
        """
        Gets the source_service of this ApiAdhocHBaseSnapshot.
        

        :return: The source_service of this ApiAdhocHBaseSnapshot.
        :rtype: ApiServiceRef
        """
        return self._source_service

    @source_service.setter
    def source_service(self, source_service):
        """
        Sets the source_service of this ApiAdhocHBaseSnapshot.
        

        :param source_service: The source_service of this ApiAdhocHBaseSnapshot.
        :type: ApiServiceRef
        """

        self._source_service = source_service

    @property
    def source_num_mappers(self):
        """
        Gets the source_num_mappers of this ApiAdhocHBaseSnapshot.
        

        :return: The source_num_mappers of this ApiAdhocHBaseSnapshot.
        :rtype: int
        """
        return self._source_num_mappers

    @source_num_mappers.setter
    def source_num_mappers(self, source_num_mappers):
        """
        Sets the source_num_mappers of this ApiAdhocHBaseSnapshot.
        

        :param source_num_mappers: The source_num_mappers of this ApiAdhocHBaseSnapshot.
        :type: int
        """

        self._source_num_mappers = source_num_mappers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiAdhocHBaseSnapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
