# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v45</h1>       <p>Introduced in Cloudera Manager 7.5.4</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.5.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHBaseReplicationSetupCommandArgs(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'keystore_password': 'str',
        'replication_user': 'str',
        'source_ref': 'ApiServiceRef',
        'cm_peer_name_on_remote': 'str'
    }

    attribute_map = {
        'keystore_password': 'keystorePassword',
        'replication_user': 'replicationUser',
        'source_ref': 'sourceRef',
        'cm_peer_name_on_remote': 'cmPeerNameOnRemote'
    }

    def __init__(self, keystore_password=None, replication_user=None, source_ref=None, cm_peer_name_on_remote=None):
        """
        ApiHBaseReplicationSetupCommandArgs - a model defined in Swagger
        """

        self._keystore_password = None
        self._replication_user = None
        self._source_ref = None
        self._cm_peer_name_on_remote = None

        if keystore_password is not None:
          self.keystore_password = keystore_password
        if replication_user is not None:
          self.replication_user = replication_user
        if source_ref is not None:
          self.source_ref = source_ref
        if cm_peer_name_on_remote is not None:
          self.cm_peer_name_on_remote = cm_peer_name_on_remote

    @property
    def keystore_password(self):
        """
        Gets the keystore_password of this ApiHBaseReplicationSetupCommandArgs.
        

        :return: The keystore_password of this ApiHBaseReplicationSetupCommandArgs.
        :rtype: str
        """
        return self._keystore_password

    @keystore_password.setter
    def keystore_password(self, keystore_password):
        """
        Sets the keystore_password of this ApiHBaseReplicationSetupCommandArgs.
        

        :param keystore_password: The keystore_password of this ApiHBaseReplicationSetupCommandArgs.
        :type: str
        """

        self._keystore_password = keystore_password

    @property
    def replication_user(self):
        """
        Gets the replication_user of this ApiHBaseReplicationSetupCommandArgs.
        

        :return: The replication_user of this ApiHBaseReplicationSetupCommandArgs.
        :rtype: str
        """
        return self._replication_user

    @replication_user.setter
    def replication_user(self, replication_user):
        """
        Sets the replication_user of this ApiHBaseReplicationSetupCommandArgs.
        

        :param replication_user: The replication_user of this ApiHBaseReplicationSetupCommandArgs.
        :type: str
        """

        self._replication_user = replication_user

    @property
    def source_ref(self):
        """
        Gets the source_ref of this ApiHBaseReplicationSetupCommandArgs.
        

        :return: The source_ref of this ApiHBaseReplicationSetupCommandArgs.
        :rtype: ApiServiceRef
        """
        return self._source_ref

    @source_ref.setter
    def source_ref(self, source_ref):
        """
        Sets the source_ref of this ApiHBaseReplicationSetupCommandArgs.
        

        :param source_ref: The source_ref of this ApiHBaseReplicationSetupCommandArgs.
        :type: ApiServiceRef
        """

        self._source_ref = source_ref

    @property
    def cm_peer_name_on_remote(self):
        """
        Gets the cm_peer_name_on_remote of this ApiHBaseReplicationSetupCommandArgs.
        The peer name of the local CM in the given sourceRef CM

        :return: The cm_peer_name_on_remote of this ApiHBaseReplicationSetupCommandArgs.
        :rtype: str
        """
        return self._cm_peer_name_on_remote

    @cm_peer_name_on_remote.setter
    def cm_peer_name_on_remote(self, cm_peer_name_on_remote):
        """
        Sets the cm_peer_name_on_remote of this ApiHBaseReplicationSetupCommandArgs.
        The peer name of the local CM in the given sourceRef CM

        :param cm_peer_name_on_remote: The cm_peer_name_on_remote of this ApiHBaseReplicationSetupCommandArgs.
        :type: str
        """

        self._cm_peer_name_on_remote = cm_peer_name_on_remote

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHBaseReplicationSetupCommandArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
