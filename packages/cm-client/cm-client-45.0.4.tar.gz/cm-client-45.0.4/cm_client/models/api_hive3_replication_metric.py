# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v45</h1>       <p>Introduced in Cloudera Manager 7.5.4</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.5.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHive3ReplicationMetric(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'current_count': 'int',
        'total_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'current_count': 'currentCount',
        'total_count': 'totalCount'
    }

    def __init__(self, name=None, current_count=None, total_count=None):
        """
        ApiHive3ReplicationMetric - a model defined in Swagger
        """

        self._name = None
        self._current_count = None
        self._total_count = None

        if name is not None:
          self.name = name
        if current_count is not None:
          self.current_count = current_count
        if total_count is not None:
          self.total_count = total_count

    @property
    def name(self):
        """
        Gets the name of this ApiHive3ReplicationMetric.
        

        :return: The name of this ApiHive3ReplicationMetric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiHive3ReplicationMetric.
        

        :param name: The name of this ApiHive3ReplicationMetric.
        :type: str
        """

        self._name = name

    @property
    def current_count(self):
        """
        Gets the current_count of this ApiHive3ReplicationMetric.
        

        :return: The current_count of this ApiHive3ReplicationMetric.
        :rtype: int
        """
        return self._current_count

    @current_count.setter
    def current_count(self, current_count):
        """
        Sets the current_count of this ApiHive3ReplicationMetric.
        

        :param current_count: The current_count of this ApiHive3ReplicationMetric.
        :type: int
        """

        self._current_count = current_count

    @property
    def total_count(self):
        """
        Gets the total_count of this ApiHive3ReplicationMetric.
        

        :return: The total_count of this ApiHive3ReplicationMetric.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """
        Sets the total_count of this ApiHive3ReplicationMetric.
        

        :param total_count: The total_count of this ApiHive3ReplicationMetric.
        :type: int
        """

        self._total_count = total_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHive3ReplicationMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
