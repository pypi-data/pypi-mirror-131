# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v45</h1>       <p>Introduced in Cloudera Manager 7.5.4</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.5.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiCspArguments(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ca_cert_content': 'str',
        'cert_content': 'str',
        'key_content': 'str'
    }

    attribute_map = {
        'ca_cert_content': 'caCertContent',
        'cert_content': 'certContent',
        'key_content': 'keyContent'
    }

    def __init__(self, ca_cert_content=None, cert_content=None, key_content=None):
        """
        ApiCspArguments - a model defined in Swagger
        """

        self._ca_cert_content = None
        self._cert_content = None
        self._key_content = None

        if ca_cert_content is not None:
          self.ca_cert_content = ca_cert_content
        if cert_content is not None:
          self.cert_content = cert_content
        if key_content is not None:
          self.key_content = key_content

    @property
    def ca_cert_content(self):
        """
        Gets the ca_cert_content of this ApiCspArguments.
        The content of the public CA certificate.

        :return: The ca_cert_content of this ApiCspArguments.
        :rtype: str
        """
        return self._ca_cert_content

    @ca_cert_content.setter
    def ca_cert_content(self, ca_cert_content):
        """
        Sets the ca_cert_content of this ApiCspArguments.
        The content of the public CA certificate.

        :param ca_cert_content: The ca_cert_content of this ApiCspArguments.
        :type: str
        """

        self._ca_cert_content = ca_cert_content

    @property
    def cert_content(self):
        """
        Gets the cert_content of this ApiCspArguments.
        The content of the private client certificate.

        :return: The cert_content of this ApiCspArguments.
        :rtype: str
        """
        return self._cert_content

    @cert_content.setter
    def cert_content(self, cert_content):
        """
        Sets the cert_content of this ApiCspArguments.
        The content of the private client certificate.

        :param cert_content: The cert_content of this ApiCspArguments.
        :type: str
        """

        self._cert_content = cert_content

    @property
    def key_content(self):
        """
        Gets the key_content of this ApiCspArguments.
        The content of the private client key.

        :return: The key_content of this ApiCspArguments.
        :rtype: str
        """
        return self._key_content

    @key_content.setter
    def key_content(self, key_content):
        """
        Sets the key_content of this ApiCspArguments.
        The content of the private client key.

        :param key_content: The key_content of this ApiCspArguments.
        :type: str
        """

        self._key_content = key_content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiCspArguments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
