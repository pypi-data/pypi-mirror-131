# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v45</h1>       <p>Introduced in Cloudera Manager 7.5.4</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.5.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHBaseReplicationSetupStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'Status',
        'sub_status': 'SubStatus',
        'main_command_id': 'ApiCommand',
        'current_command_id': 'ApiCommand',
        'error': 'str'
    }

    attribute_map = {
        'status': 'status',
        'sub_status': 'subStatus',
        'main_command_id': 'mainCommandId',
        'current_command_id': 'currentCommandId',
        'error': 'error'
    }

    def __init__(self, status=None, sub_status=None, main_command_id=None, current_command_id=None, error=None):
        """
        ApiHBaseReplicationSetupStatus - a model defined in Swagger
        """

        self._status = None
        self._sub_status = None
        self._main_command_id = None
        self._current_command_id = None
        self._error = None

        if status is not None:
          self.status = status
        if sub_status is not None:
          self.sub_status = sub_status
        if main_command_id is not None:
          self.main_command_id = main_command_id
        if current_command_id is not None:
          self.current_command_id = current_command_id
        if error is not None:
          self.error = error

    @property
    def status(self):
        """
        Gets the status of this ApiHBaseReplicationSetupStatus.
        

        :return: The status of this ApiHBaseReplicationSetupStatus.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ApiHBaseReplicationSetupStatus.
        

        :param status: The status of this ApiHBaseReplicationSetupStatus.
        :type: Status
        """

        self._status = status

    @property
    def sub_status(self):
        """
        Gets the sub_status of this ApiHBaseReplicationSetupStatus.
        

        :return: The sub_status of this ApiHBaseReplicationSetupStatus.
        :rtype: SubStatus
        """
        return self._sub_status

    @sub_status.setter
    def sub_status(self, sub_status):
        """
        Sets the sub_status of this ApiHBaseReplicationSetupStatus.
        

        :param sub_status: The sub_status of this ApiHBaseReplicationSetupStatus.
        :type: SubStatus
        """

        self._sub_status = sub_status

    @property
    def main_command_id(self):
        """
        Gets the main_command_id of this ApiHBaseReplicationSetupStatus.
        

        :return: The main_command_id of this ApiHBaseReplicationSetupStatus.
        :rtype: ApiCommand
        """
        return self._main_command_id

    @main_command_id.setter
    def main_command_id(self, main_command_id):
        """
        Sets the main_command_id of this ApiHBaseReplicationSetupStatus.
        

        :param main_command_id: The main_command_id of this ApiHBaseReplicationSetupStatus.
        :type: ApiCommand
        """

        self._main_command_id = main_command_id

    @property
    def current_command_id(self):
        """
        Gets the current_command_id of this ApiHBaseReplicationSetupStatus.
        

        :return: The current_command_id of this ApiHBaseReplicationSetupStatus.
        :rtype: ApiCommand
        """
        return self._current_command_id

    @current_command_id.setter
    def current_command_id(self, current_command_id):
        """
        Sets the current_command_id of this ApiHBaseReplicationSetupStatus.
        

        :param current_command_id: The current_command_id of this ApiHBaseReplicationSetupStatus.
        :type: ApiCommand
        """

        self._current_command_id = current_command_id

    @property
    def error(self):
        """
        Gets the error of this ApiHBaseReplicationSetupStatus.
        

        :return: The error of this ApiHBaseReplicationSetupStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this ApiHBaseReplicationSetupStatus.
        

        :param error: The error of this ApiHBaseReplicationSetupStatus.
        :type: str
        """

        self._error = error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHBaseReplicationSetupStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
