# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v45</h1>       <p>Introduced in Cloudera Manager 7.5.4</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.5.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHiveOnTezReplicationResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'status': 'str',
        'error': 'str',
        'tables_current': 'int',
        'tables_total': 'int',
        'functions_current': 'int',
        'functions_total': 'int',
        'events_current': 'int',
        'events_total': 'int',
        'policies_current': 'int',
        'policies_total': 'int',
        'entities_current': 'int',
        'entities_total': 'int',
        'origin': 'Origin'
    }

    attribute_map = {
        'type': 'type',
        'status': 'status',
        'error': 'error',
        'tables_current': 'tablesCurrent',
        'tables_total': 'tablesTotal',
        'functions_current': 'functionsCurrent',
        'functions_total': 'functionsTotal',
        'events_current': 'eventsCurrent',
        'events_total': 'eventsTotal',
        'policies_current': 'policiesCurrent',
        'policies_total': 'policiesTotal',
        'entities_current': 'entitiesCurrent',
        'entities_total': 'entitiesTotal',
        'origin': 'origin'
    }

    def __init__(self, type=None, status=None, error=None, tables_current=None, tables_total=None, functions_current=None, functions_total=None, events_current=None, events_total=None, policies_current=None, policies_total=None, entities_current=None, entities_total=None, origin=None):
        """
        ApiHiveOnTezReplicationResult - a model defined in Swagger
        """

        self._type = None
        self._status = None
        self._error = None
        self._tables_current = None
        self._tables_total = None
        self._functions_current = None
        self._functions_total = None
        self._events_current = None
        self._events_total = None
        self._policies_current = None
        self._policies_total = None
        self._entities_current = None
        self._entities_total = None
        self._origin = None

        if type is not None:
          self.type = type
        if status is not None:
          self.status = status
        if error is not None:
          self.error = error
        self.tables_current = tables_current
        self.tables_total = tables_total
        self.functions_current = functions_current
        self.functions_total = functions_total
        self.events_current = events_current
        self.events_total = events_total
        self.policies_current = policies_current
        self.policies_total = policies_total
        self.entities_current = entities_current
        self.entities_total = entities_total
        if origin is not None:
          self.origin = origin

    @property
    def type(self):
        """
        Gets the type of this ApiHiveOnTezReplicationResult.
        Type of replication. <p/> BOOTSTRAP or INCREMENTAL

        :return: The type of this ApiHiveOnTezReplicationResult.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ApiHiveOnTezReplicationResult.
        Type of replication. <p/> BOOTSTRAP or INCREMENTAL

        :param type: The type of this ApiHiveOnTezReplicationResult.
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """
        Gets the status of this ApiHiveOnTezReplicationResult.
        

        :return: The status of this ApiHiveOnTezReplicationResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ApiHiveOnTezReplicationResult.
        

        :param status: The status of this ApiHiveOnTezReplicationResult.
        :type: str
        """

        self._status = status

    @property
    def error(self):
        """
        Gets the error of this ApiHiveOnTezReplicationResult.
        

        :return: The error of this ApiHiveOnTezReplicationResult.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this ApiHiveOnTezReplicationResult.
        

        :param error: The error of this ApiHiveOnTezReplicationResult.
        :type: str
        """

        self._error = error

    @property
    def tables_current(self):
        """
        Gets the tables_current of this ApiHiveOnTezReplicationResult.
        

        :return: The tables_current of this ApiHiveOnTezReplicationResult.
        :rtype: int
        """
        return self._tables_current

    @tables_current.setter
    def tables_current(self, tables_current):
        """
        Sets the tables_current of this ApiHiveOnTezReplicationResult.
        

        :param tables_current: The tables_current of this ApiHiveOnTezReplicationResult.
        :type: int
        """
        if tables_current is None:
            raise ValueError("Invalid value for `tables_current`, must not be `None`")

        self._tables_current = tables_current

    @property
    def tables_total(self):
        """
        Gets the tables_total of this ApiHiveOnTezReplicationResult.
        

        :return: The tables_total of this ApiHiveOnTezReplicationResult.
        :rtype: int
        """
        return self._tables_total

    @tables_total.setter
    def tables_total(self, tables_total):
        """
        Sets the tables_total of this ApiHiveOnTezReplicationResult.
        

        :param tables_total: The tables_total of this ApiHiveOnTezReplicationResult.
        :type: int
        """
        if tables_total is None:
            raise ValueError("Invalid value for `tables_total`, must not be `None`")

        self._tables_total = tables_total

    @property
    def functions_current(self):
        """
        Gets the functions_current of this ApiHiveOnTezReplicationResult.
        

        :return: The functions_current of this ApiHiveOnTezReplicationResult.
        :rtype: int
        """
        return self._functions_current

    @functions_current.setter
    def functions_current(self, functions_current):
        """
        Sets the functions_current of this ApiHiveOnTezReplicationResult.
        

        :param functions_current: The functions_current of this ApiHiveOnTezReplicationResult.
        :type: int
        """
        if functions_current is None:
            raise ValueError("Invalid value for `functions_current`, must not be `None`")

        self._functions_current = functions_current

    @property
    def functions_total(self):
        """
        Gets the functions_total of this ApiHiveOnTezReplicationResult.
        

        :return: The functions_total of this ApiHiveOnTezReplicationResult.
        :rtype: int
        """
        return self._functions_total

    @functions_total.setter
    def functions_total(self, functions_total):
        """
        Sets the functions_total of this ApiHiveOnTezReplicationResult.
        

        :param functions_total: The functions_total of this ApiHiveOnTezReplicationResult.
        :type: int
        """
        if functions_total is None:
            raise ValueError("Invalid value for `functions_total`, must not be `None`")

        self._functions_total = functions_total

    @property
    def events_current(self):
        """
        Gets the events_current of this ApiHiveOnTezReplicationResult.
        

        :return: The events_current of this ApiHiveOnTezReplicationResult.
        :rtype: int
        """
        return self._events_current

    @events_current.setter
    def events_current(self, events_current):
        """
        Sets the events_current of this ApiHiveOnTezReplicationResult.
        

        :param events_current: The events_current of this ApiHiveOnTezReplicationResult.
        :type: int
        """
        if events_current is None:
            raise ValueError("Invalid value for `events_current`, must not be `None`")

        self._events_current = events_current

    @property
    def events_total(self):
        """
        Gets the events_total of this ApiHiveOnTezReplicationResult.
        

        :return: The events_total of this ApiHiveOnTezReplicationResult.
        :rtype: int
        """
        return self._events_total

    @events_total.setter
    def events_total(self, events_total):
        """
        Sets the events_total of this ApiHiveOnTezReplicationResult.
        

        :param events_total: The events_total of this ApiHiveOnTezReplicationResult.
        :type: int
        """
        if events_total is None:
            raise ValueError("Invalid value for `events_total`, must not be `None`")

        self._events_total = events_total

    @property
    def policies_current(self):
        """
        Gets the policies_current of this ApiHiveOnTezReplicationResult.
        

        :return: The policies_current of this ApiHiveOnTezReplicationResult.
        :rtype: int
        """
        return self._policies_current

    @policies_current.setter
    def policies_current(self, policies_current):
        """
        Sets the policies_current of this ApiHiveOnTezReplicationResult.
        

        :param policies_current: The policies_current of this ApiHiveOnTezReplicationResult.
        :type: int
        """
        if policies_current is None:
            raise ValueError("Invalid value for `policies_current`, must not be `None`")

        self._policies_current = policies_current

    @property
    def policies_total(self):
        """
        Gets the policies_total of this ApiHiveOnTezReplicationResult.
        

        :return: The policies_total of this ApiHiveOnTezReplicationResult.
        :rtype: int
        """
        return self._policies_total

    @policies_total.setter
    def policies_total(self, policies_total):
        """
        Sets the policies_total of this ApiHiveOnTezReplicationResult.
        

        :param policies_total: The policies_total of this ApiHiveOnTezReplicationResult.
        :type: int
        """
        if policies_total is None:
            raise ValueError("Invalid value for `policies_total`, must not be `None`")

        self._policies_total = policies_total

    @property
    def entities_current(self):
        """
        Gets the entities_current of this ApiHiveOnTezReplicationResult.
        

        :return: The entities_current of this ApiHiveOnTezReplicationResult.
        :rtype: int
        """
        return self._entities_current

    @entities_current.setter
    def entities_current(self, entities_current):
        """
        Sets the entities_current of this ApiHiveOnTezReplicationResult.
        

        :param entities_current: The entities_current of this ApiHiveOnTezReplicationResult.
        :type: int
        """
        if entities_current is None:
            raise ValueError("Invalid value for `entities_current`, must not be `None`")

        self._entities_current = entities_current

    @property
    def entities_total(self):
        """
        Gets the entities_total of this ApiHiveOnTezReplicationResult.
        

        :return: The entities_total of this ApiHiveOnTezReplicationResult.
        :rtype: int
        """
        return self._entities_total

    @entities_total.setter
    def entities_total(self, entities_total):
        """
        Sets the entities_total of this ApiHiveOnTezReplicationResult.
        

        :param entities_total: The entities_total of this ApiHiveOnTezReplicationResult.
        :type: int
        """
        if entities_total is None:
            raise ValueError("Invalid value for `entities_total`, must not be `None`")

        self._entities_total = entities_total

    @property
    def origin(self):
        """
        Gets the origin of this ApiHiveOnTezReplicationResult.
        

        :return: The origin of this ApiHiveOnTezReplicationResult.
        :rtype: Origin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """
        Sets the origin of this ApiHiveOnTezReplicationResult.
        

        :param origin: The origin of this ApiHiveOnTezReplicationResult.
        :type: Origin
        """

        self._origin = origin

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHiveOnTezReplicationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
