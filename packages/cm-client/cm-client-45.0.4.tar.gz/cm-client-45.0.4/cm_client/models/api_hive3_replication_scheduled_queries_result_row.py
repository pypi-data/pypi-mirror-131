# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v45</h1>       <p>Introduced in Cloudera Manager 7.5.4</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 7.5.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiHive3ReplicationScheduledQueriesResultRow(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_id': 'int',
        'name': 'str',
        'enabled': 'bool',
        'name_space': 'str',
        'schedule': 'str',
        'user': 'str',
        'query': 'str',
        'next_execution': 'str',
        'execution_id': 'int'
    }

    attribute_map = {
        'query_id': 'queryId',
        'name': 'name',
        'enabled': 'enabled',
        'name_space': 'nameSpace',
        'schedule': 'schedule',
        'user': 'user',
        'query': 'query',
        'next_execution': 'nextExecution',
        'execution_id': 'executionId'
    }

    def __init__(self, query_id=None, name=None, enabled=None, name_space=None, schedule=None, user=None, query=None, next_execution=None, execution_id=None):
        """
        ApiHive3ReplicationScheduledQueriesResultRow - a model defined in Swagger
        """

        self._query_id = None
        self._name = None
        self._enabled = None
        self._name_space = None
        self._schedule = None
        self._user = None
        self._query = None
        self._next_execution = None
        self._execution_id = None

        if query_id is not None:
          self.query_id = query_id
        if name is not None:
          self.name = name
        if enabled is not None:
          self.enabled = enabled
        if name_space is not None:
          self.name_space = name_space
        if schedule is not None:
          self.schedule = schedule
        if user is not None:
          self.user = user
        if query is not None:
          self.query = query
        if next_execution is not None:
          self.next_execution = next_execution
        if execution_id is not None:
          self.execution_id = execution_id

    @property
    def query_id(self):
        """
        Gets the query_id of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :return: The query_id of this ApiHive3ReplicationScheduledQueriesResultRow.
        :rtype: int
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """
        Sets the query_id of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :param query_id: The query_id of this ApiHive3ReplicationScheduledQueriesResultRow.
        :type: int
        """

        self._query_id = query_id

    @property
    def name(self):
        """
        Gets the name of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :return: The name of this ApiHive3ReplicationScheduledQueriesResultRow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :param name: The name of this ApiHive3ReplicationScheduledQueriesResultRow.
        :type: str
        """

        self._name = name

    @property
    def enabled(self):
        """
        Gets the enabled of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :return: The enabled of this ApiHive3ReplicationScheduledQueriesResultRow.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :param enabled: The enabled of this ApiHive3ReplicationScheduledQueriesResultRow.
        :type: bool
        """

        self._enabled = enabled

    @property
    def name_space(self):
        """
        Gets the name_space of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :return: The name_space of this ApiHive3ReplicationScheduledQueriesResultRow.
        :rtype: str
        """
        return self._name_space

    @name_space.setter
    def name_space(self, name_space):
        """
        Sets the name_space of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :param name_space: The name_space of this ApiHive3ReplicationScheduledQueriesResultRow.
        :type: str
        """

        self._name_space = name_space

    @property
    def schedule(self):
        """
        Gets the schedule of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :return: The schedule of this ApiHive3ReplicationScheduledQueriesResultRow.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :param schedule: The schedule of this ApiHive3ReplicationScheduledQueriesResultRow.
        :type: str
        """

        self._schedule = schedule

    @property
    def user(self):
        """
        Gets the user of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :return: The user of this ApiHive3ReplicationScheduledQueriesResultRow.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :param user: The user of this ApiHive3ReplicationScheduledQueriesResultRow.
        :type: str
        """

        self._user = user

    @property
    def query(self):
        """
        Gets the query of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :return: The query of this ApiHive3ReplicationScheduledQueriesResultRow.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :param query: The query of this ApiHive3ReplicationScheduledQueriesResultRow.
        :type: str
        """

        self._query = query

    @property
    def next_execution(self):
        """
        Gets the next_execution of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :return: The next_execution of this ApiHive3ReplicationScheduledQueriesResultRow.
        :rtype: str
        """
        return self._next_execution

    @next_execution.setter
    def next_execution(self, next_execution):
        """
        Sets the next_execution of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :param next_execution: The next_execution of this ApiHive3ReplicationScheduledQueriesResultRow.
        :type: str
        """

        self._next_execution = next_execution

    @property
    def execution_id(self):
        """
        Gets the execution_id of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :return: The execution_id of this ApiHive3ReplicationScheduledQueriesResultRow.
        :rtype: int
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """
        Sets the execution_id of this ApiHive3ReplicationScheduledQueriesResultRow.
        

        :param execution_id: The execution_id of this ApiHive3ReplicationScheduledQueriesResultRow.
        :type: int
        """

        self._execution_id = execution_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiHive3ReplicationScheduledQueriesResultRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
