# coding: utf-8

"""
    gnomock

    `gnomock` is an HTTP wrapper for [Gnomock](https://github.com/orlangure/gnomock) integration and end-to-end testing toolkit. It allows to use Gnomock outside of Go ecosystem. Not all Gnomock features exist in this wrapper, but official presets, as well as basic general configuration, are supported.   # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gnomock.configuration import Configuration


class Influxdb(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'username': 'str',
        'password': 'str',
        'org': 'str',
        'bucket': 'str',
        'auth_token': 'str'
    }

    attribute_map = {
        'version': 'version',
        'username': 'username',
        'password': 'password',
        'org': 'org',
        'bucket': 'bucket',
        'auth_token': 'auth_token'
    }

    def __init__(self, version='latest', username='gnomock', password='gnomock-password', org='gnomock-org', bucket='gnomock-bucket', auth_token='gnomock-influxdb-token', local_vars_configuration=None):  # noqa: E501
        """Influxdb - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._username = None
        self._password = None
        self._org = None
        self._bucket = None
        self._auth_token = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if org is not None:
            self.org = org
        if bucket is not None:
            self.bucket = bucket
        if auth_token is not None:
            self.auth_token = auth_token

    @property
    def version(self):
        """Gets the version of this Influxdb.  # noqa: E501

        Docker image tag (version)  # noqa: E501

        :return: The version of this Influxdb.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Influxdb.

        Docker image tag (version)  # noqa: E501

        :param version: The version of this Influxdb.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def username(self):
        """Gets the username of this Influxdb.  # noqa: E501

        Super-user name  # noqa: E501

        :return: The username of this Influxdb.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Influxdb.

        Super-user name  # noqa: E501

        :param username: The username of this Influxdb.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this Influxdb.  # noqa: E501

        Super-user password  # noqa: E501

        :return: The password of this Influxdb.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Influxdb.

        Super-user password  # noqa: E501

        :param password: The password of this Influxdb.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def org(self):
        """Gets the org of this Influxdb.  # noqa: E501

        Organization name  # noqa: E501

        :return: The org of this Influxdb.  # noqa: E501
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Influxdb.

        Organization name  # noqa: E501

        :param org: The org of this Influxdb.  # noqa: E501
        :type: str
        """

        self._org = org

    @property
    def bucket(self):
        """Gets the bucket of this Influxdb.  # noqa: E501

        Default bucket name  # noqa: E501

        :return: The bucket of this Influxdb.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this Influxdb.

        Default bucket name  # noqa: E501

        :param bucket: The bucket of this Influxdb.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def auth_token(self):
        """Gets the auth_token of this Influxdb.  # noqa: E501

        Database authentication token  # noqa: E501

        :return: The auth_token of this Influxdb.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this Influxdb.

        Database authentication token  # noqa: E501

        :param auth_token: The auth_token of this Influxdb.  # noqa: E501
        :type: str
        """

        self._auth_token = auth_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Influxdb):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Influxdb):
            return True

        return self.to_dict() != other.to_dict()
