# coding: utf-8

"""
    Versatile Data Kit Control Service API

    The Data Jobs API of Versatile Data Kit Control Service. Data Jobs allows Data Engineers to implement automated pull ingestion (E in ELT) and batch data transformation into a database (T in ELT). See also https://github.com/vmware/versatile-data-kit/wiki/Introduction  The API has resource-oriented URLs, JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The API enables creating, deploying, managing and executing Data Jobs in the runtime environment.<br> <br> ![](https://github.com/vmware/versatile-data-kit/wiki/vdk-data-job-lifecycle-state-diagram.png) <br> The API reflects the usual Data Job Development lifecycle:<br> <li> Create a new data job (webhook to further configure the job, e.g authorize its creation, setup permissions, etc). <li> Download keytab. Develop and run the data job locally. <li> Deploy the data job in cloud runtime environment to run on a scheduled basis. <br><br> If Authentication is enabled, pass OAuth2 access token in HTTP header 'Authorization: Bearer [access-token-here]' (https://datatracker.ietf.org/doc/html/rfc6750). <br  The API promotes some best practices (inspired by https://12factor.net): <li> Explicitly declare and isolate dependencies. <li> Strict separation of configurations from code. Configurations vary substantially across deploys, code does not. <li> Separation between the build, release/deploy, and run stages. <li> Data Jobs are stateless and share-nothing processes. Any data that needs to be persisted must be stored in a stateful backing service (e.g IProperties). <li> Implementation is assumed to be atomic and idempotent - should be OK for a job to fail somewhere in the middle; subsequent restart should not cause data corruption. <li> Keep development, staging, and production as similar as possible. <br><br> <b>API Evolution</b><br> In the following sections, there are some terms that have a special meaning in the context of the APIs. <br><br> <li> <i>Stable</i> - The implementation of the API has been battle-tested (has been in production for some time).                      The API is a subject to semantic versioning model and will follow deprecation policy. <li> <i>Experimental</i> - May disappear without notice and is not a subject to semantic versioning.                            Implementation of the API is not considered stable nor well tested.                            Generally this is given to clients to experiment within testing environment. Must not be used in production. <li> <i>Deprecated</i> - API is expected to be removed within next one or two major version upgrade.                          The deprecation notice/comment will say when the API will be removed and what alternatives should be used instead.   # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from taurus_datajob_api.api_client import ApiClient
from taurus_datajob_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DataJobsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def data_job_create(self, team_name, data_job, **kwargs):  # noqa: E501
        """Creates a new Data Job | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i> | Creates a new Data Job.<br> The name of the Data job should comply to the following naming convention:<br> <li>should start with a letter <li>50 characters at most <li>5 characters at least <li>should contain only lowercase alphanumeric symbols and dash [a-z0-9\\-] <br><br> When succesfully created clients can download the keytab associated with the Data Job to run it locally.<br> To deploy so that it can be executed reguarly in the runtime environment use /data-jobs/for-team/{team_name}/jobs/{job_name}/deployments API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_create(team_name, data_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: The Team which owns the Data Job (required)
        :param DataJob data_job: (required)
        :param str name: The Name of the Data Job
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.data_job_create_with_http_info(team_name, data_job, **kwargs)  # noqa: E501

    def data_job_create_with_http_info(self, team_name, data_job, **kwargs):  # noqa: E501
        """Creates a new Data Job | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i> | Creates a new Data Job.<br> The name of the Data job should comply to the following naming convention:<br> <li>should start with a letter <li>50 characters at most <li>5 characters at least <li>should contain only lowercase alphanumeric symbols and dash [a-z0-9\\-] <br><br> When succesfully created clients can download the keytab associated with the Data Job to run it locally.<br> To deploy so that it can be executed reguarly in the runtime environment use /data-jobs/for-team/{team_name}/jobs/{job_name}/deployments API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_create_with_http_info(team_name, data_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: The Team which owns the Data Job (required)
        :param DataJob data_job: (required)
        :param str name: The Name of the Data Job
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_name',
            'data_job',
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_name' is set
        if self.api_client.client_side_validation and ('team_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_name` when calling `data_job_create`")  # noqa: E501
        # verify the required parameter 'data_job' is set
        if self.api_client.client_side_validation and ('data_job' not in local_var_params or  # noqa: E501
                                                        local_var_params['data_job'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data_job` when calling `data_job_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_name' in local_var_params:
            path_params['team_name'] = local_var_params['team_name']  # noqa: E501

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data_job' in local_var_params:
            body_params = local_var_params['data_job']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_job_delete(self, team_name, job_name, **kwargs):  # noqa: E501
        """Delete Data Job | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i> | Delete Data Job including its state (properties) and deployments. Currently executing Data Jobs will be left to finish.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_delete(team_name, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Team Name (required)
        :param str job_name: Data Job Name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.data_job_delete_with_http_info(team_name, job_name, **kwargs)  # noqa: E501

    def data_job_delete_with_http_info(self, team_name, job_name, **kwargs):  # noqa: E501
        """Delete Data Job | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i> | Delete Data Job including its state (properties) and deployments. Currently executing Data Jobs will be left to finish.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_delete_with_http_info(team_name, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Team Name (required)
        :param str job_name: Data Job Name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_name',
            'job_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_name' is set
        if self.api_client.client_side_validation and ('team_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_name` when calling `data_job_delete`")  # noqa: E501
        # verify the required parameter 'job_name' is set
        if self.api_client.client_side_validation and ('job_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['job_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `job_name` when calling `data_job_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_name' in local_var_params:
            path_params['team_name'] = local_var_params['team_name']  # noqa: E501
        if 'job_name' in local_var_params:
            path_params['job_name'] = local_var_params['job_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_job_keytab_download(self, team_name, job_name, **kwargs):  # noqa: E501
        """Get data job keytab. | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_keytab_download(team_name, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Team Name (required)
        :param str job_name: Data Job Name. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.data_job_keytab_download_with_http_info(team_name, job_name, **kwargs)  # noqa: E501

    def data_job_keytab_download_with_http_info(self, team_name, job_name, **kwargs):  # noqa: E501
        """Get data job keytab. | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_keytab_download_with_http_info(team_name, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Team Name (required)
        :param str job_name: Data Job Name. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_name',
            'job_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_keytab_download" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_name' is set
        if self.api_client.client_side_validation and ('team_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_name` when calling `data_job_keytab_download`")  # noqa: E501
        # verify the required parameter 'job_name' is set
        if self.api_client.client_side_validation and ('job_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['job_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `job_name` when calling `data_job_keytab_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_name' in local_var_params:
            path_params['team_name'] = local_var_params['team_name']  # noqa: E501
        if 'job_name' in local_var_params:
            path_params['job_name'] = local_var_params['job_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}/keytab', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_job_read(self, team_name, job_name, **kwargs):  # noqa: E501
        """Retrieves details of an existing Data Job by specifying the name of the Data Job. | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_read(team_name, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Team Name (required)
        :param str job_name: Data Job Name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DataJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.data_job_read_with_http_info(team_name, job_name, **kwargs)  # noqa: E501

    def data_job_read_with_http_info(self, team_name, job_name, **kwargs):  # noqa: E501
        """Retrieves details of an existing Data Job by specifying the name of the Data Job. | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_read_with_http_info(team_name, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Team Name (required)
        :param str job_name: Data Job Name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DataJob, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_name',
            'job_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_name' is set
        if self.api_client.client_side_validation and ('team_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_name` when calling `data_job_read`")  # noqa: E501
        # verify the required parameter 'job_name' is set
        if self.api_client.client_side_validation and ('job_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['job_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `job_name` when calling `data_job_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_name' in local_var_params:
            path_params['team_name'] = local_var_params['team_name']  # noqa: E501
        if 'job_name' in local_var_params:
            path_params['job_name'] = local_var_params['job_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_job_team_update(self, team_name, new_team, job_name, **kwargs):  # noqa: E501
        """Update API for Data Jobs team | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i> | Update API for Data Jobs team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_team_update(team_name, new_team, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Current Team Name. (required)
        :param str new_team: New Team Name. (required)
        :param str job_name: Data Job Name. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.data_job_team_update_with_http_info(team_name, new_team, job_name, **kwargs)  # noqa: E501

    def data_job_team_update_with_http_info(self, team_name, new_team, job_name, **kwargs):  # noqa: E501
        """Update API for Data Jobs team | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i> | Update API for Data Jobs team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_team_update_with_http_info(team_name, new_team, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Current Team Name. (required)
        :param str new_team: New Team Name. (required)
        :param str job_name: Data Job Name. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_name',
            'new_team',
            'job_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_team_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_name' is set
        if self.api_client.client_side_validation and ('team_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_name` when calling `data_job_team_update`")  # noqa: E501
        # verify the required parameter 'new_team' is set
        if self.api_client.client_side_validation and ('new_team' not in local_var_params or  # noqa: E501
                                                        local_var_params['new_team'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `new_team` when calling `data_job_team_update`")  # noqa: E501
        # verify the required parameter 'job_name' is set
        if self.api_client.client_side_validation and ('job_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['job_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `job_name` when calling `data_job_team_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_name' in local_var_params:
            path_params['team_name'] = local_var_params['team_name']  # noqa: E501
        if 'new_team' in local_var_params:
            path_params['new_team'] = local_var_params['new_team']  # noqa: E501
        if 'job_name' in local_var_params:
            path_params['job_name'] = local_var_params['job_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}/team/{new_team}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_job_update(self, team_name, job_name, data_job, **kwargs):  # noqa: E501
        """Update Data Job. | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_update(team_name, job_name, data_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Team Name (required)
        :param str job_name: Data Job Name (required)
        :param DataJob data_job: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.data_job_update_with_http_info(team_name, job_name, data_job, **kwargs)  # noqa: E501

    def data_job_update_with_http_info(self, team_name, job_name, data_job, **kwargs):  # noqa: E501
        """Update Data Job. | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_job_update_with_http_info(team_name, job_name, data_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Team Name (required)
        :param str job_name: Data Job Name (required)
        :param DataJob data_job: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_name',
            'job_name',
            'data_job'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_job_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_name' is set
        if self.api_client.client_side_validation and ('team_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_name` when calling `data_job_update`")  # noqa: E501
        # verify the required parameter 'job_name' is set
        if self.api_client.client_side_validation and ('job_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['job_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `job_name` when calling `data_job_update`")  # noqa: E501
        # verify the required parameter 'data_job' is set
        if self.api_client.client_side_validation and ('data_job' not in local_var_params or  # noqa: E501
                                                        local_var_params['data_job'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data_job` when calling `data_job_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_name' in local_var_params:
            path_params['team_name'] = local_var_params['team_name']  # noqa: E501
        if 'job_name' in local_var_params:
            path_params['job_name'] = local_var_params['job_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data_job' in local_var_params:
            body_params = local_var_params['data_job']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs/{job_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_list(self, team_name, **kwargs):  # noqa: E501
        """List all or Team's Data Jobs | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_list(team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Team Name (required)
        :param bool show_all: If set to 'true' will list the jobs for all the teams, otherwise will list only the jobs that belong to this team. 
        :param int page_number: The number of pages of items to skip before starting to collect the result set.
        :param int page_size: The number of items per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DataJobSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.jobs_list_with_http_info(team_name, **kwargs)  # noqa: E501

    def jobs_list_with_http_info(self, team_name, **kwargs):  # noqa: E501
        """List all or Team's Data Jobs | (Stable)  # noqa: E501

        <i>(Introduced in v1.0)</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_list_with_http_info(team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: Team Name (required)
        :param bool show_all: If set to 'true' will list the jobs for all the teams, otherwise will list only the jobs that belong to this team. 
        :param int page_number: The number of pages of items to skip before starting to collect the result set.
        :param int page_size: The number of items per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DataJobSummary], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_name',
            'show_all',
            'page_number',
            'page_size'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_name' is set
        if self.api_client.client_side_validation and ('team_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_name` when calling `jobs_list`")  # noqa: E501

        if self.api_client.client_side_validation and 'page_number' in local_var_params and local_var_params['page_number'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page_number` when calling `jobs_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'page_size' in local_var_params and local_var_params['page_size'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page_size` when calling `jobs_list`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and 'page_size' in local_var_params and local_var_params['page_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page_size` when calling `jobs_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'team_name' in local_var_params:
            path_params['team_name'] = local_var_params['team_name']  # noqa: E501

        query_params = []
        if 'show_all' in local_var_params and local_var_params['show_all'] is not None:  # noqa: E501
            query_params.append(('show_all', local_var_params['show_all']))  # noqa: E501
        if 'page_number' in local_var_params and local_var_params['page_number'] is not None:  # noqa: E501
            query_params.append(('page_number', local_var_params['page_number']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataJobSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_query(self, team_name, **kwargs):  # noqa: E501
        """List Data Jobs  | (Experimental)  # noqa: E501

        List data Jobs with GraphQL like query. By choosing which field to be returned you can control the output. You can learn more about the GraphQL queries by visiting [GraphQL official website](https://graphql.org/learn/queries/) Query should be provided as GET parameter, not by POST body. Don't worry about the spaces and tabs Keep in mind that each aditional field <b>could make query response time slower, for instance deployments</b>, it's best if you request only what you need <br/><br/>  The <b>pageNumber</b> and <b>pageSize</b> arguments are required! Page number should be a <b>number greater than 1</b>, and pageSize <b>should be greater than 1</b> (per page) Check the latest example for the full list of supported query fields.<br/><br/>  Simplest query that you could make is to fetch the job names <pre> {<br/>   jobs(pageNumber: 1, pageSize: 25) {<br/>     content {<br/>       jobName<br/>     }<br/>   }<br/> }<br/> </pre><br/>  You could also use filtering and sorting function. Filter object has <b>property, pattern and sort</b> fields.<br/> * <b>property</b> points out which field you want to filter, if you point out some other field that is not supported, an invalid response will be return.<br/> * <b>pattern</b> should be a non-empty string which the provided property should contains [ignoring cases], for instance: `starshot` pattern will match <b>import-starshot-sql, StarShot-servers and notify-starshot</b> job names, but it won't match <b>stars-shot-daily-prune`</b> If a pattern string is not provided, then you must atleast provide the property field<br/> * <b>sort</b> should be an enum value - ASC (ascending) or DESC (descending) option [not required, default is ASC] Multiple filters could be applied, but <b>maximum one should contain sorting</b>! <pre> {<br/>   jobs(<br/>     pageNumber: 1,<br/>     pageSize: 25,<br/>     filter: [{<br/>       property: \"jobName\",<br/>       pattern: \"starshot\",<br/>       sort: \"DESC\"<br/>     }],<br/>   ) {<br/>     content {<br/>       jobName<br/>     }<br/>   }<br/> }<br/> </pre><br/>  You could also search for a string into the properties that you are requesting, for instance: This query will search for job names, team names and descriptions which contains the provided \"starshot\" string <pre> {<br/>   jobs(<br/>     pageNumber: 1,<br/>     pageSize: 25,<br/>     search: \"starshot\"<br/>   ) {<br/>     content {<br/>       jobName,<br/>       config {<br/>         team<br/>         description<br/>       }<br/>     }<br/>   }<br/> }<br/> </pre><br/>  Data jobs execution could also be searched by providing arguments to the <b>execution</b> field. Same as parent query arguments, the <b>pageNumber</b> and <b>pageSize</b> arguments are required! Page number should be a <b>number greater than 1</b>, and pageSize <b>should be between 1 and 100 results</b> (per page). You can also <b>filter</b> using the similar object structure as the parent query, but currently <b>filtering is not supported</b>, you can only provide field for sorting. This query will search <pre> {<br/>   jobs(<br/>     pageNumber: 1,<br/>     pageSize: 25,<br/>   ) {<br/>     content {<br/>       jobName,<br/>       deployments {<br/>         id<br/>         executions(<br/>           pageNumber: 1,<br/>           pageSize: 5<br/>           filter: [{<br/>             property: \"deployments.executions.startTime\",<br/>             sort: \"DESC\",<br/>           }],<br/>         ) {<br/>           id           status           startTime           endTime         {</br>       }<br/>     }<br/>   }<br/> }<br/> </pre><br/>  Full example of currently available for fetching fields. Note that if you combine searching and filtering, first it will apply filters and then within filtered jobs it will apply the search, vice versa is currently not supported: <pre> {<br/>   jobs(<br/>     pageNumber: 1,<br/>     pageSize: 25,<br/>     search: \"daily\",<br/>     filter: [{<br/>       property: \"jobName\",<br/>       pattern: \"import-sql\",<br/>     },{<br/>       property: \"team\",<br/>       pattern: \"starshot\",<br/>       sort: \"DESC\" <br/>     },{<br/>       property: \"deployments.enabled\",<br/>       pattern: \"enabled\",<br/>     }],<br/>   ) {<br/>     content {<br/>       jobName<br/>       config {<br/>         team<br/>         description<br/>         sourceUrl<br/>         schedule {<br/>           scheduleCron<br/>           nextRunEpochSeconds<br/>         }<br/>         contacts {<br/>           notifiedOnJobFailureUserError<br/>           notifiedOnJobFailurePlatformError<br/>           notifiedOnJobSuccess<br/>           notifiedOnJobDeploy<br/>         }<br/>       }<br/>       deployments {<br/>         id<br/>         enabled<br/>         jobVersion<br/>         mode<br/>         executions(<br/>           pageNumber: 1,<br/>           pageSize: 25<br/>           filter: [{<br/>             property: \"deployments.executions.status\",<br/>             sort: \"ASC\",<br/>           }],<br/>         ) {<br/>           id<br/>           type<br/>           status<br/>           message<br/>           startTime<br/>           endTime<br/>           opId<br/>           vkdVersion<br/>           jobVersion<br/>           jobSchedule<br/>           resourcesCpuRequest<br/>           resourcesCpuLimit</br>           resourcesMemoryRequest</br>           resourcesMemoryLimit</br>           deployedDate</br>           deployedBy</br>           startedBy</br>           logsUrl</br>         }<br/>       }<br/>     }<br/>     totalPages<br/>     totalItems<br/>     }<br/>   }<br/> }<br/> </pre><br/>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_query(team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: The Team which owns the Data Job (required)
        :param str query: Request a GraphQL-like query.
        :param str operation_name: If the query is specified and contains several named operations, an operation_name query parameter can be used to control which one should be executed
        :param str variables: If query is specified then variables can be sent as a JSON-encoded string in an additional query parameter called variables
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DataJobQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.jobs_query_with_http_info(team_name, **kwargs)  # noqa: E501

    def jobs_query_with_http_info(self, team_name, **kwargs):  # noqa: E501
        """List Data Jobs  | (Experimental)  # noqa: E501

        List data Jobs with GraphQL like query. By choosing which field to be returned you can control the output. You can learn more about the GraphQL queries by visiting [GraphQL official website](https://graphql.org/learn/queries/) Query should be provided as GET parameter, not by POST body. Don't worry about the spaces and tabs Keep in mind that each aditional field <b>could make query response time slower, for instance deployments</b>, it's best if you request only what you need <br/><br/>  The <b>pageNumber</b> and <b>pageSize</b> arguments are required! Page number should be a <b>number greater than 1</b>, and pageSize <b>should be greater than 1</b> (per page) Check the latest example for the full list of supported query fields.<br/><br/>  Simplest query that you could make is to fetch the job names <pre> {<br/>   jobs(pageNumber: 1, pageSize: 25) {<br/>     content {<br/>       jobName<br/>     }<br/>   }<br/> }<br/> </pre><br/>  You could also use filtering and sorting function. Filter object has <b>property, pattern and sort</b> fields.<br/> * <b>property</b> points out which field you want to filter, if you point out some other field that is not supported, an invalid response will be return.<br/> * <b>pattern</b> should be a non-empty string which the provided property should contains [ignoring cases], for instance: `starshot` pattern will match <b>import-starshot-sql, StarShot-servers and notify-starshot</b> job names, but it won't match <b>stars-shot-daily-prune`</b> If a pattern string is not provided, then you must atleast provide the property field<br/> * <b>sort</b> should be an enum value - ASC (ascending) or DESC (descending) option [not required, default is ASC] Multiple filters could be applied, but <b>maximum one should contain sorting</b>! <pre> {<br/>   jobs(<br/>     pageNumber: 1,<br/>     pageSize: 25,<br/>     filter: [{<br/>       property: \"jobName\",<br/>       pattern: \"starshot\",<br/>       sort: \"DESC\"<br/>     }],<br/>   ) {<br/>     content {<br/>       jobName<br/>     }<br/>   }<br/> }<br/> </pre><br/>  You could also search for a string into the properties that you are requesting, for instance: This query will search for job names, team names and descriptions which contains the provided \"starshot\" string <pre> {<br/>   jobs(<br/>     pageNumber: 1,<br/>     pageSize: 25,<br/>     search: \"starshot\"<br/>   ) {<br/>     content {<br/>       jobName,<br/>       config {<br/>         team<br/>         description<br/>       }<br/>     }<br/>   }<br/> }<br/> </pre><br/>  Data jobs execution could also be searched by providing arguments to the <b>execution</b> field. Same as parent query arguments, the <b>pageNumber</b> and <b>pageSize</b> arguments are required! Page number should be a <b>number greater than 1</b>, and pageSize <b>should be between 1 and 100 results</b> (per page). You can also <b>filter</b> using the similar object structure as the parent query, but currently <b>filtering is not supported</b>, you can only provide field for sorting. This query will search <pre> {<br/>   jobs(<br/>     pageNumber: 1,<br/>     pageSize: 25,<br/>   ) {<br/>     content {<br/>       jobName,<br/>       deployments {<br/>         id<br/>         executions(<br/>           pageNumber: 1,<br/>           pageSize: 5<br/>           filter: [{<br/>             property: \"deployments.executions.startTime\",<br/>             sort: \"DESC\",<br/>           }],<br/>         ) {<br/>           id           status           startTime           endTime         {</br>       }<br/>     }<br/>   }<br/> }<br/> </pre><br/>  Full example of currently available for fetching fields. Note that if you combine searching and filtering, first it will apply filters and then within filtered jobs it will apply the search, vice versa is currently not supported: <pre> {<br/>   jobs(<br/>     pageNumber: 1,<br/>     pageSize: 25,<br/>     search: \"daily\",<br/>     filter: [{<br/>       property: \"jobName\",<br/>       pattern: \"import-sql\",<br/>     },{<br/>       property: \"team\",<br/>       pattern: \"starshot\",<br/>       sort: \"DESC\" <br/>     },{<br/>       property: \"deployments.enabled\",<br/>       pattern: \"enabled\",<br/>     }],<br/>   ) {<br/>     content {<br/>       jobName<br/>       config {<br/>         team<br/>         description<br/>         sourceUrl<br/>         schedule {<br/>           scheduleCron<br/>           nextRunEpochSeconds<br/>         }<br/>         contacts {<br/>           notifiedOnJobFailureUserError<br/>           notifiedOnJobFailurePlatformError<br/>           notifiedOnJobSuccess<br/>           notifiedOnJobDeploy<br/>         }<br/>       }<br/>       deployments {<br/>         id<br/>         enabled<br/>         jobVersion<br/>         mode<br/>         executions(<br/>           pageNumber: 1,<br/>           pageSize: 25<br/>           filter: [{<br/>             property: \"deployments.executions.status\",<br/>             sort: \"ASC\",<br/>           }],<br/>         ) {<br/>           id<br/>           type<br/>           status<br/>           message<br/>           startTime<br/>           endTime<br/>           opId<br/>           vkdVersion<br/>           jobVersion<br/>           jobSchedule<br/>           resourcesCpuRequest<br/>           resourcesCpuLimit</br>           resourcesMemoryRequest</br>           resourcesMemoryLimit</br>           deployedDate</br>           deployedBy</br>           startedBy</br>           logsUrl</br>         }<br/>       }<br/>     }<br/>     totalPages<br/>     totalItems<br/>     }<br/>   }<br/> }<br/> </pre><br/>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_query_with_http_info(team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_name: The Team which owns the Data Job (required)
        :param str query: Request a GraphQL-like query.
        :param str operation_name: If the query is specified and contains several named operations, an operation_name query parameter can be used to control which one should be executed
        :param str variables: If query is specified then variables can be sent as a JSON-encoded string in an additional query parameter called variables
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DataJobQueryResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_name',
            'query',
            'operation_name',
            'variables'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_query" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_name' is set
        if self.api_client.client_side_validation and ('team_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_name` when calling `jobs_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_name' in local_var_params:
            path_params['team_name'] = local_var_params['team_name']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'operation_name' in local_var_params and local_var_params['operation_name'] is not None:  # noqa: E501
            query_params.append(('operation_name', local_var_params['operation_name']))  # noqa: E501
        if 'variables' in local_var_params and local_var_params['variables'] is not None:  # noqa: E501
            query_params.append(('variables', local_var_params['variables']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/data-jobs/for-team/{team_name}/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataJobQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
