# coding: utf-8

"""
    Versatile Data Kit Control Service API

    The Data Jobs API of Versatile Data Kit Control Service. Data Jobs allows Data Engineers to implement automated pull ingestion (E in ELT) and batch data transformation into a database (T in ELT). See also https://github.com/vmware/versatile-data-kit/wiki/Introduction  The API has resource-oriented URLs, JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The API enables creating, deploying, managing and executing Data Jobs in the runtime environment.<br> <br> ![](https://github.com/vmware/versatile-data-kit/wiki/vdk-data-job-lifecycle-state-diagram.png) <br> The API reflects the usual Data Job Development lifecycle:<br> <li> Create a new data job (webhook to further configure the job, e.g authorize its creation, setup permissions, etc). <li> Download keytab. Develop and run the data job locally. <li> Deploy the data job in cloud runtime environment to run on a scheduled basis. <br><br> If Authentication is enabled, pass OAuth2 access token in HTTP header 'Authorization: Bearer [access-token-here]' (https://datatracker.ietf.org/doc/html/rfc6750). <br  The API promotes some best practices (inspired by https://12factor.net): <li> Explicitly declare and isolate dependencies. <li> Strict separation of configurations from code. Configurations vary substantially across deploys, code does not. <li> Separation between the build, release/deploy, and run stages. <li> Data Jobs are stateless and share-nothing processes. Any data that needs to be persisted must be stored in a stateful backing service (e.g IProperties). <li> Implementation is assumed to be atomic and idempotent - should be OK for a job to fail somewhere in the middle; subsequent restart should not cause data corruption. <li> Keep development, staging, and production as similar as possible. <br><br> <b>API Evolution</b><br> In the following sections, there are some terms that have a special meaning in the context of the APIs. <br><br> <li> <i>Stable</i> - The implementation of the API has been battle-tested (has been in production for some time).                      The API is a subject to semantic versioning model and will follow deprecation policy. <li> <i>Experimental</i> - May disappear without notice and is not a subject to semantic versioning.                            Implementation of the API is not considered stable nor well tested.                            Generally this is given to clients to experiment within testing environment. Must not be used in production. <li> <i>Deprecated</i> - API is expected to be removed within next one or two major version upgrade.                          The deprecation notice/comment will say when the API will be removed and what alternatives should be used instead.   # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from taurus_datajob_api.configuration import Configuration


class DataJobExecution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'job_name': 'str',
        'status': 'str',
        'type': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'started_by': 'str',
        'logs_url': 'str',
        'message': 'str',
        'op_id': 'str',
        'deployment': 'DataJobDeployment'
    }

    attribute_map = {
        'id': 'id',
        'job_name': 'job_name',
        'status': 'status',
        'type': 'type',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'started_by': 'started_by',
        'logs_url': 'logs_url',
        'message': 'message',
        'op_id': 'op_id',
        'deployment': 'deployment'
    }

    def __init__(self, id=None, job_name=None, status=None, type=None, start_time=None, end_time=None, started_by=None, logs_url=None, message=None, op_id=None, deployment=None, local_vars_configuration=None):  # noqa: E501
        """DataJobExecution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._job_name = None
        self._status = None
        self._type = None
        self._start_time = None
        self._end_time = None
        self._started_by = None
        self._logs_url = None
        self._message = None
        self._op_id = None
        self._deployment = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if job_name is not None:
            self.job_name = job_name
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if started_by is not None:
            self.started_by = started_by
        if logs_url is not None:
            self.logs_url = logs_url
        if message is not None:
            self.message = message
        if op_id is not None:
            self.op_id = op_id
        if deployment is not None:
            self.deployment = deployment

    @property
    def id(self):
        """Gets the id of this DataJobExecution.  # noqa: E501

        Data Job Execution ID  # noqa: E501

        :return: The id of this DataJobExecution.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataJobExecution.

        Data Job Execution ID  # noqa: E501

        :param id: The id of this DataJobExecution.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_name(self):
        """Gets the job_name of this DataJobExecution.  # noqa: E501

        Data Job name  # noqa: E501

        :return: The job_name of this DataJobExecution.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this DataJobExecution.

        Data Job name  # noqa: E501

        :param job_name: The job_name of this DataJobExecution.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def status(self):
        """Gets the status of this DataJobExecution.  # noqa: E501

        The current status  # noqa: E501

        :return: The status of this DataJobExecution.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataJobExecution.

        The current status  # noqa: E501

        :param status: The status of this DataJobExecution.  # noqa: E501
        :type: str
        """
        allowed_values = ["submitted", "running", "succeeded", "cancelled", "skipped", "user_error", "platform_error"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this DataJobExecution.  # noqa: E501

        Execution type - manual or scheduled  # noqa: E501

        :return: The type of this DataJobExecution.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataJobExecution.

        Execution type - manual or scheduled  # noqa: E501

        :param type: The type of this DataJobExecution.  # noqa: E501
        :type: str
        """
        allowed_values = ["manual", "scheduled"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def start_time(self):
        """Gets the start_time of this DataJobExecution.  # noqa: E501

        Start of execution  # noqa: E501

        :return: The start_time of this DataJobExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DataJobExecution.

        Start of execution  # noqa: E501

        :param start_time: The start_time of this DataJobExecution.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this DataJobExecution.  # noqa: E501

        Start of execution  # noqa: E501

        :return: The end_time of this DataJobExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DataJobExecution.

        Start of execution  # noqa: E501

        :param end_time: The end_time of this DataJobExecution.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def started_by(self):
        """Gets the started_by of this DataJobExecution.  # noqa: E501

        User or service that started the execution (e.g manual/auserov@example.mail.com or scheduled/runtime)  # noqa: E501

        :return: The started_by of this DataJobExecution.  # noqa: E501
        :rtype: str
        """
        return self._started_by

    @started_by.setter
    def started_by(self, started_by):
        """Sets the started_by of this DataJobExecution.

        User or service that started the execution (e.g manual/auserov@example.mail.com or scheduled/runtime)  # noqa: E501

        :param started_by: The started_by of this DataJobExecution.  # noqa: E501
        :type: str
        """

        self._started_by = started_by

    @property
    def logs_url(self):
        """Gets the logs_url of this DataJobExecution.  # noqa: E501

        URL link to persisted logs in central location. Logs generally should be available for longer time. The link is available only if operators have configured it during installation of Control Service. During install operators can conifgure logs to be presisted to log aggregator service whose link can be exposed here.   # noqa: E501

        :return: The logs_url of this DataJobExecution.  # noqa: E501
        :rtype: str
        """
        return self._logs_url

    @logs_url.setter
    def logs_url(self, logs_url):
        """Sets the logs_url of this DataJobExecution.

        URL link to persisted logs in central location. Logs generally should be available for longer time. The link is available only if operators have configured it during installation of Control Service. During install operators can conifgure logs to be presisted to log aggregator service whose link can be exposed here.   # noqa: E501

        :param logs_url: The logs_url of this DataJobExecution.  # noqa: E501
        :type: str
        """

        self._logs_url = logs_url

    @property
    def message(self):
        """Gets the message of this DataJobExecution.  # noqa: E501

        Message (usually error) during execution  # noqa: E501

        :return: The message of this DataJobExecution.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DataJobExecution.

        Message (usually error) during execution  # noqa: E501

        :param message: The message of this DataJobExecution.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def op_id(self):
        """Gets the op_id of this DataJobExecution.  # noqa: E501

        Operation id used for tracing calls between different services  # noqa: E501

        :return: The op_id of this DataJobExecution.  # noqa: E501
        :rtype: str
        """
        return self._op_id

    @op_id.setter
    def op_id(self, op_id):
        """Sets the op_id of this DataJobExecution.

        Operation id used for tracing calls between different services  # noqa: E501

        :param op_id: The op_id of this DataJobExecution.  # noqa: E501
        :type: str
        """

        self._op_id = op_id

    @property
    def deployment(self):
        """Gets the deployment of this DataJobExecution.  # noqa: E501


        :return: The deployment of this DataJobExecution.  # noqa: E501
        :rtype: DataJobDeployment
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this DataJobExecution.


        :param deployment: The deployment of this DataJobExecution.  # noqa: E501
        :type: DataJobDeployment
        """

        self._deployment = deployment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataJobExecution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataJobExecution):
            return True

        return self.to_dict() != other.to_dict()
