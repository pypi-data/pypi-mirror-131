# coding: utf-8

"""
    Versatile Data Kit Control Service API

    The Data Jobs API of Versatile Data Kit Control Service. Data Jobs allows Data Engineers to implement automated pull ingestion (E in ELT) and batch data transformation into a database (T in ELT). See also https://github.com/vmware/versatile-data-kit/wiki/Introduction  The API has resource-oriented URLs, JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The API enables creating, deploying, managing and executing Data Jobs in the runtime environment.<br> <br> ![](https://github.com/vmware/versatile-data-kit/wiki/vdk-data-job-lifecycle-state-diagram.png) <br> The API reflects the usual Data Job Development lifecycle:<br> <li> Create a new data job (webhook to further configure the job, e.g authorize its creation, setup permissions, etc). <li> Download keytab. Develop and run the data job locally. <li> Deploy the data job in cloud runtime environment to run on a scheduled basis. <br><br> If Authentication is enabled, pass OAuth2 access token in HTTP header 'Authorization: Bearer [access-token-here]' (https://datatracker.ietf.org/doc/html/rfc6750). <br  The API promotes some best practices (inspired by https://12factor.net): <li> Explicitly declare and isolate dependencies. <li> Strict separation of configurations from code. Configurations vary substantially across deploys, code does not. <li> Separation between the build, release/deploy, and run stages. <li> Data Jobs are stateless and share-nothing processes. Any data that needs to be persisted must be stored in a stateful backing service (e.g IProperties). <li> Implementation is assumed to be atomic and idempotent - should be OK for a job to fail somewhere in the middle; subsequent restart should not cause data corruption. <li> Keep development, staging, and production as similar as possible. <br><br> <b>API Evolution</b><br> In the following sections, there are some terms that have a special meaning in the context of the APIs. <br><br> <li> <i>Stable</i> - The implementation of the API has been battle-tested (has been in production for some time).                      The API is a subject to semantic versioning model and will follow deprecation policy. <li> <i>Experimental</i> - May disappear without notice and is not a subject to semantic versioning.                            Implementation of the API is not considered stable nor well tested.                            Generally this is given to clients to experiment within testing environment. Must not be used in production. <li> <i>Deprecated</i> - API is expected to be removed within next one or two major version upgrade.                          The deprecation notice/comment will say when the API will be removed and what alternatives should be used instead.   # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from taurus_datajob_api.configuration import Configuration


class DataJobConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'db_default_type': 'str',
        'contacts': 'DataJobContacts',
        'schedule': 'DataJobSchedule',
        'generate_keytab': 'bool',
        'enable_execution_notifications': 'bool',
        'notification_delay_period_minutes': 'int'
    }

    attribute_map = {
        'db_default_type': 'db_default_type',
        'contacts': 'contacts',
        'schedule': 'schedule',
        'generate_keytab': 'generate_keytab',
        'enable_execution_notifications': 'enable_execution_notifications',
        'notification_delay_period_minutes': 'notification_delay_period_minutes'
    }

    def __init__(self, db_default_type=None, contacts=None, schedule=None, generate_keytab=True, enable_execution_notifications=True, notification_delay_period_minutes=240, local_vars_configuration=None):  # noqa: E501
        """DataJobConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._db_default_type = None
        self._contacts = None
        self._schedule = None
        self._generate_keytab = None
        self._enable_execution_notifications = None
        self._notification_delay_period_minutes = None
        self.discriminator = None

        if db_default_type is not None:
            self.db_default_type = db_default_type
        if contacts is not None:
            self.contacts = contacts
        if schedule is not None:
            self.schedule = schedule
        if generate_keytab is not None:
            self.generate_keytab = generate_keytab
        if enable_execution_notifications is not None:
            self.enable_execution_notifications = enable_execution_notifications
        if notification_delay_period_minutes is not None:
            self.notification_delay_period_minutes = notification_delay_period_minutes

    @property
    def db_default_type(self):
        """Gets the db_default_type of this DataJobConfig.  # noqa: E501

        Default DB connection provided for the job, e.g. 'TRINO', 'IMPALA', 'REDSHIFT'.<br>   # noqa: E501

        :return: The db_default_type of this DataJobConfig.  # noqa: E501
        :rtype: str
        """
        return self._db_default_type

    @db_default_type.setter
    def db_default_type(self, db_default_type):
        """Sets the db_default_type of this DataJobConfig.

        Default DB connection provided for the job, e.g. 'TRINO', 'IMPALA', 'REDSHIFT'.<br>   # noqa: E501

        :param db_default_type: The db_default_type of this DataJobConfig.  # noqa: E501
        :type: str
        """

        self._db_default_type = db_default_type

    @property
    def contacts(self):
        """Gets the contacts of this DataJobConfig.  # noqa: E501


        :return: The contacts of this DataJobConfig.  # noqa: E501
        :rtype: DataJobContacts
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this DataJobConfig.


        :param contacts: The contacts of this DataJobConfig.  # noqa: E501
        :type: DataJobContacts
        """

        self._contacts = contacts

    @property
    def schedule(self):
        """Gets the schedule of this DataJobConfig.  # noqa: E501


        :return: The schedule of this DataJobConfig.  # noqa: E501
        :rtype: DataJobSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this DataJobConfig.


        :param schedule: The schedule of this DataJobConfig.  # noqa: E501
        :type: DataJobSchedule
        """

        self._schedule = schedule

    @property
    def generate_keytab(self):
        """Gets the generate_keytab of this DataJobConfig.  # noqa: E501

        Enable Disable flag for generating secret with keytab  # noqa: E501

        :return: The generate_keytab of this DataJobConfig.  # noqa: E501
        :rtype: bool
        """
        return self._generate_keytab

    @generate_keytab.setter
    def generate_keytab(self, generate_keytab):
        """Sets the generate_keytab of this DataJobConfig.

        Enable Disable flag for generating secret with keytab  # noqa: E501

        :param generate_keytab: The generate_keytab of this DataJobConfig.  # noqa: E501
        :type: bool
        """

        self._generate_keytab = generate_keytab

    @property
    def enable_execution_notifications(self):
        """Gets the enable_execution_notifications of this DataJobConfig.  # noqa: E501

        (Optional) Specifies whether to dispatch email notifications per data job execution.  # noqa: E501

        :return: The enable_execution_notifications of this DataJobConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enable_execution_notifications

    @enable_execution_notifications.setter
    def enable_execution_notifications(self, enable_execution_notifications):
        """Sets the enable_execution_notifications of this DataJobConfig.

        (Optional) Specifies whether to dispatch email notifications per data job execution.  # noqa: E501

        :param enable_execution_notifications: The enable_execution_notifications of this DataJobConfig.  # noqa: E501
        :type: bool
        """

        self._enable_execution_notifications = enable_execution_notifications

    @property
    def notification_delay_period_minutes(self):
        """Gets the notification_delay_period_minutes of this DataJobConfig.  # noqa: E501

        (Optional) Specifies the time (in minutes) a job execution is allowed to be delayed from its schedule before an alert is triggered. The value of this property for each data job is exposed as a Prometheus metric by the service at the /data-jobs/debug/prometheus endpoint. These metrics (taurus_datajob_notification_delay) are subsequently used in JobDelay Prometheus rules to generate the alerts.   # noqa: E501

        :return: The notification_delay_period_minutes of this DataJobConfig.  # noqa: E501
        :rtype: int
        """
        return self._notification_delay_period_minutes

    @notification_delay_period_minutes.setter
    def notification_delay_period_minutes(self, notification_delay_period_minutes):
        """Sets the notification_delay_period_minutes of this DataJobConfig.

        (Optional) Specifies the time (in minutes) a job execution is allowed to be delayed from its schedule before an alert is triggered. The value of this property for each data job is exposed as a Prometheus metric by the service at the /data-jobs/debug/prometheus endpoint. These metrics (taurus_datajob_notification_delay) are subsequently used in JobDelay Prometheus rules to generate the alerts.   # noqa: E501

        :param notification_delay_period_minutes: The notification_delay_period_minutes of this DataJobConfig.  # noqa: E501
        :type: int
        """

        self._notification_delay_period_minutes = notification_delay_period_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataJobConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataJobConfig):
            return True

        return self.to_dict() != other.to_dict()
