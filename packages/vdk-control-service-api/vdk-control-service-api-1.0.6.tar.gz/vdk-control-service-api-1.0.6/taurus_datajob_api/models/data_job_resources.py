# coding: utf-8

"""
    Versatile Data Kit Control Service API

    The Data Jobs API of Versatile Data Kit Control Service. Data Jobs allows Data Engineers to implement automated pull ingestion (E in ELT) and batch data transformation into a database (T in ELT). See also https://github.com/vmware/versatile-data-kit/wiki/Introduction  The API has resource-oriented URLs, JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The API enables creating, deploying, managing and executing Data Jobs in the runtime environment.<br> <br> ![](https://github.com/vmware/versatile-data-kit/wiki/vdk-data-job-lifecycle-state-diagram.png) <br> The API reflects the usual Data Job Development lifecycle:<br> <li> Create a new data job (webhook to further configure the job, e.g authorize its creation, setup permissions, etc). <li> Download keytab. Develop and run the data job locally. <li> Deploy the data job in cloud runtime environment to run on a scheduled basis. <br><br> If Authentication is enabled, pass OAuth2 access token in HTTP header 'Authorization: Bearer [access-token-here]' (https://datatracker.ietf.org/doc/html/rfc6750). <br  The API promotes some best practices (inspired by https://12factor.net): <li> Explicitly declare and isolate dependencies. <li> Strict separation of configurations from code. Configurations vary substantially across deploys, code does not. <li> Separation between the build, release/deploy, and run stages. <li> Data Jobs are stateless and share-nothing processes. Any data that needs to be persisted must be stored in a stateful backing service (e.g IProperties). <li> Implementation is assumed to be atomic and idempotent - should be OK for a job to fail somewhere in the middle; subsequent restart should not cause data corruption. <li> Keep development, staging, and production as similar as possible. <br><br> <b>API Evolution</b><br> In the following sections, there are some terms that have a special meaning in the context of the APIs. <br><br> <li> <i>Stable</i> - The implementation of the API has been battle-tested (has been in production for some time).                      The API is a subject to semantic versioning model and will follow deprecation policy. <li> <i>Experimental</i> - May disappear without notice and is not a subject to semantic versioning.                            Implementation of the API is not considered stable nor well tested.                            Generally this is given to clients to experiment within testing environment. Must not be used in production. <li> <i>Deprecated</i> - API is expected to be removed within next one or two major version upgrade.                          The deprecation notice/comment will say when the API will be removed and what alternatives should be used instead.   # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from taurus_datajob_api.configuration import Configuration


class DataJobResources(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpu_request': 'float',
        'cpu_limit': 'float',
        'memory_request': 'int',
        'memory_limit': 'int'
    }

    attribute_map = {
        'cpu_request': 'cpu_request',
        'cpu_limit': 'cpu_limit',
        'memory_request': 'memory_request',
        'memory_limit': 'memory_limit'
    }

    def __init__(self, cpu_request=None, cpu_limit=None, memory_request=None, memory_limit=None, local_vars_configuration=None):  # noqa: E501
        """DataJobResources - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cpu_request = None
        self._cpu_limit = None
        self._memory_request = None
        self._memory_limit = None
        self.discriminator = None

        if cpu_request is not None:
            self.cpu_request = cpu_request
        if cpu_limit is not None:
            self.cpu_limit = cpu_limit
        if memory_request is not None:
            self.memory_request = memory_request
        if memory_limit is not None:
            self.memory_limit = memory_limit

    @property
    def cpu_request(self):
        """Gets the cpu_request of this DataJobResources.  # noqa: E501

        Initial CPU shares in deciCores (1 dCore = 0.1 Core = 100 mCores)  # noqa: E501

        :return: The cpu_request of this DataJobResources.  # noqa: E501
        :rtype: float
        """
        return self._cpu_request

    @cpu_request.setter
    def cpu_request(self, cpu_request):
        """Sets the cpu_request of this DataJobResources.

        Initial CPU shares in deciCores (1 dCore = 0.1 Core = 100 mCores)  # noqa: E501

        :param cpu_request: The cpu_request of this DataJobResources.  # noqa: E501
        :type: float
        """

        self._cpu_request = cpu_request

    @property
    def cpu_limit(self):
        """Gets the cpu_limit of this DataJobResources.  # noqa: E501

        Max CPU shares in deciCores (1 dCore = 0.1 Core = 100 mCores)  # noqa: E501

        :return: The cpu_limit of this DataJobResources.  # noqa: E501
        :rtype: float
        """
        return self._cpu_limit

    @cpu_limit.setter
    def cpu_limit(self, cpu_limit):
        """Sets the cpu_limit of this DataJobResources.

        Max CPU shares in deciCores (1 dCore = 0.1 Core = 100 mCores)  # noqa: E501

        :param cpu_limit: The cpu_limit of this DataJobResources.  # noqa: E501
        :type: float
        """

        self._cpu_limit = cpu_limit

    @property
    def memory_request(self):
        """Gets the memory_request of this DataJobResources.  # noqa: E501

        Initial Memory in MiB.  # noqa: E501

        :return: The memory_request of this DataJobResources.  # noqa: E501
        :rtype: int
        """
        return self._memory_request

    @memory_request.setter
    def memory_request(self, memory_request):
        """Sets the memory_request of this DataJobResources.

        Initial Memory in MiB.  # noqa: E501

        :param memory_request: The memory_request of this DataJobResources.  # noqa: E501
        :type: int
        """

        self._memory_request = memory_request

    @property
    def memory_limit(self):
        """Gets the memory_limit of this DataJobResources.  # noqa: E501

        Max Memory in MiB.  # noqa: E501

        :return: The memory_limit of this DataJobResources.  # noqa: E501
        :rtype: int
        """
        return self._memory_limit

    @memory_limit.setter
    def memory_limit(self, memory_limit):
        """Sets the memory_limit of this DataJobResources.

        Max Memory in MiB.  # noqa: E501

        :param memory_limit: The memory_limit of this DataJobResources.  # noqa: E501
        :type: int
        """

        self._memory_limit = memory_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataJobResources):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataJobResources):
            return True

        return self.to_dict() != other.to_dict()
